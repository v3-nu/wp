"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const oi=function(){var e;return typeof process<"u"&&((e=process.release)==null?void 0:e.name)==="node"?"NODE":typeof window<"u"?"WEB":typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope?"WORKER":"NODE"}();if(oi==="NODE"){let e=function(s){return new Promise(function(n,o){s.onload=s.onerror=function(i){s.onload=s.onerror=null,i.type==="load"?n(s.result):o(new Error("Failed to read the blob/file"))}})},t=function(){const s=new Uint8Array([1,2,3,4]),o=new File([s],"test").stream();try{return o.getReader({mode:"byob"}),!0}catch{return!1}};if(typeof File>"u"){class s extends Blob{constructor(o,i,r){super(o);let p;r!=null&&r.lastModified&&(p=new Date),(!p||isNaN(p.getFullYear()))&&(p=new Date),this.lastModifiedDate=p,this.lastModified=p.getMilliseconds(),this.name=i||""}}global.File=s}typeof Blob.prototype.arrayBuffer>"u"&&(Blob.prototype.arrayBuffer=function(){const n=new FileReader;return n.readAsArrayBuffer(this),e(n)}),typeof Blob.prototype.text>"u"&&(Blob.prototype.text=function(){const n=new FileReader;return n.readAsText(this),e(n)}),(typeof Blob.prototype.stream>"u"||!t())&&(Blob.prototype.stream=function(){let s=0;const n=this;return new ReadableStream({type:"bytes",autoAllocateChunkSize:512*1024,async pull(o){const i=o.byobRequest.view,p=await n.slice(s,s+i.byteLength).arrayBuffer(),m=new Uint8Array(p);new Uint8Array(i.buffer).set(m);const u=m.byteLength;o.byobRequest.respond(u),s+=u,s>=n.size&&o.close()}})})}if(oi==="NODE"&&typeof CustomEvent>"u"){class e extends Event{constructor(s,n={}){super(s,n),this.detail=n.detail}initCustomEvent(){}}globalThis.CustomEvent=e}oi==="NODE"&&typeof URL.canParse!="function"&&(globalThis.URL.canParse=function(e){try{return!!new URL(e)}catch{return!1}});const pi=["db.php","plugins/akismet","plugins/hello.php","plugins/wordpress-importer","mu-plugins/sqlite-database-integration","mu-plugins/playground-includes","mu-plugins/0-playground.php","mu-plugins/0-sqlite.php","themes/twentytwenty","themes/twentytwentyone","themes/twentytwentytwo","themes/twentytwentythree","themes/twentytwentyfour","themes/twentytwentyfive","themes/twentytwentysix"],Do="playground-log",Di=(e,...t)=>{xe.dispatchEvent(new CustomEvent(Do,{detail:{log:e,args:t}}))},Lo=(e,...t)=>{switch(typeof e.message=="string"?Reflect.set(e,"message",Gs(e.message)):e.message.message&&typeof e.message.message=="string"&&Reflect.set(e.message,"message",Gs(e.message.message)),e.severity){case"Debug":console.debug(e.message,...t);break;case"Info":console.info(e.message,...t);break;case"Warn":console.warn(e.message,...t);break;case"Error":console.error(e.message,...t);break;case"Fatal":console.error(e.message,...t);break;default:console.log(e.message,...t)}},Bo=e=>e instanceof Error?[e.message,e.stack].join(`
`):JSON.stringify(e,null,2),Fn=[],Li=e=>{Fn.push(e)},Zs=e=>{if(e.raw===!0)Li(e.message);else{const t=Io(typeof e.message=="object"?Bo(e.message):e.message,e.severity??"Info",e.prefix??"JavaScript");Li(t)}};let As=0;const Bi="/wordpress/wp-content/debug.log",Ro=async e=>await e.fileExists(Bi)?await e.readFileAsText(Bi):"",jo=(e,t)=>{t.addEventListener("request.end",async()=>{const s=await Ro(t);if(s.length>As){const n=s.substring(As);e.logMessage({message:n,raw:!0}),As=s.length}}),t.addEventListener("request.error",s=>{s=s,s.error&&(e.logMessage({message:`${s.error.message} ${s.error.stack}`,severity:"Fatal",prefix:s.source==="request"?"PHP":"WASM Crash"}),e.dispatchEvent(new CustomEvent(e.fatalErrorEvent,{detail:{logs:e.getLogs(),source:s.source}})))})};class Fo extends EventTarget{constructor(t=[]){super(),this.handlers=t,this.fatalErrorEvent="playground-fatal-error"}getLogs(){return this.handlers.includes(Zs)?[...Fn]:(this.error(`Logs aren't stored because the logToMemory handler isn't registered.
				If you're using a custom logger instance, make sure to register logToMemory handler.
			`),[])}logMessage(t,...s){for(const n of this.handlers)n(t,...s)}log(t,...s){this.logMessage({message:t,severity:void 0,prefix:"JavaScript",raw:!1},...s)}debug(t,...s){this.logMessage({message:t,severity:"Debug",prefix:"JavaScript",raw:!1},...s)}info(t,...s){this.logMessage({message:t,severity:"Info",prefix:"JavaScript",raw:!1},...s)}warn(t,...s){this.logMessage({message:t,severity:"Warn",prefix:"JavaScript",raw:!1},...s)}error(t,...s){this.logMessage({message:t,severity:"Error",prefix:"JavaScript",raw:!1},...s)}}const qo=()=>{try{if(process.env.NODE_ENV==="test")return[Zs,Di]}catch{}return[Zs,Lo,Di]},xe=new Fo(qo()),Gs=e=>e.replace(/\t/g,""),Io=(e,t,s)=>{const n=new Date,o=new Intl.DateTimeFormat("en-GB",{year:"numeric",month:"short",day:"2-digit",timeZone:"UTC"}).format(n).replace(/ /g,"-"),i=new Intl.DateTimeFormat("en-GB",{hour:"2-digit",minute:"2-digit",second:"2-digit",hour12:!1,timeZone:"UTC",timeZoneName:"short"}).format(n),r=o+" "+i;return e=Gs(e),`[${r}] ${s} ${t}: ${e}`},fi=async(e,{pluginPath:t,pluginName:s},n)=>{n==null||n.tracker.setCaption(`Activating ${s||t}`);const o=await e.documentRoot,i=await e.run({code:`<?php
			define( 'WP_ADMIN', true );
			require_once( getenv('DOCROOT') . "/wp-load.php" );
			require_once( getenv('DOCROOT') . "/wp-admin/includes/plugin.php" );

			// Set current user to admin
			wp_set_current_user( get_users(array('role' => 'Administrator') )[0]->ID );

			$plugin_path = getenv('PLUGIN_PATH');
			$response = false;
			if ( ! is_dir( $plugin_path)) {
				$response = activate_plugin($plugin_path);
			}

			// Activate plugin by name if activation by path wasn't successful
			if ( null !== $response ) {
				foreach ( ( glob( $plugin_path . '/*.php' ) ?: array() ) as $file ) {
					$info = get_plugin_data( $file, false, false );
					if ( ! empty( $info['Name'] ) ) {
						$response = activate_plugin( $file );
						break;
					}
				}
			}

			if ( is_wp_error($response) ) {
				die( $response->get_error_message() );
			} else if ( false === $response ) {
				die( "The activatePlugin step wasn't able to find the plugin $plugin_path." );
			}
		`,env:{PLUGIN_PATH:t,DOCROOT:o}});i.text&&xe.warn(`Plugin ${t} activation printed the following bytes: ${i.text}`);const r=await e.run({code:`<?php
			ob_start();
			require_once( getenv( 'DOCROOT' ) . "/wp-load.php" );

			/**
			 * Extracts the relative plugin path from either an absolute or relative plugin path.
			 *
			 * Absolute paths starting with plugin directory (e.g., '/wordpress/wp-content/plugins/test-plugin/index.php')
			 * should be converted to relative paths (e.g., 'test-plugin/index.php')
			 *
			 * Directories should finish with a trailing slash to ensure we match the full plugin directory name.
			 *
			 * Examples:
			 * - '/wordpress/wp-content/plugins/test-plugin/index.php' → 'test-plugin/index.php'
			 * - '/wordpress/wp-content/plugins/test-plugin/' → 'test-plugin/'
			 * - '/wordpress/wp-content/plugins/test-plugin' → 'test-plugin/'
			 * - 'test-plugin/index.php' → 'test-plugin/index.php'
			 * - 'test-plugin/' → 'test-plugin/'
			 * - 'test-plugin' → 'test-plugin/'
			 */
			$plugin_directory = WP_PLUGIN_DIR . '/';
			$relative_plugin_path = getenv( 'PLUGIN_PATH' );
			if (strpos($relative_plugin_path, $plugin_directory) === 0) {
				$relative_plugin_path = substr($relative_plugin_path, strlen($plugin_directory));
			}

			if ( is_dir( $plugin_directory . $relative_plugin_path ) ) {
				$relative_plugin_path = rtrim( $relative_plugin_path, '/' ) . '/';
			}

			$active_plugins = get_option( 'active_plugins' );
			foreach ( $active_plugins as $plugin ) {
				if ( substr( $plugin, 0, strlen( $relative_plugin_path ) ) === $relative_plugin_path ) {
					ob_end_clean();
					die( 'true' );
				}
			}
			die( ob_get_flush() ?: 'false' );
		`,env:{DOCROOT:o,PLUGIN_PATH:t}});if(r.text!=="true")throw r.text!=="false"&&xe.debug(r.text),new Error(`Plugin ${t} could not be activated – WordPress exited with no error. Sometimes, when $_SERVER or site options are not configured correctly, WordPress exits early with a 301 redirect. Inspect the "debug" logs in the console for more details.`)},li=async(e,{themeFolderName:t},s)=>{s==null||s.tracker.setCaption(`Activating ${t}`);const n=await e.documentRoot,o=`${n}/wp-content/themes/${t}`;if(!await e.fileExists(o))throw new Error(`
			Couldn't activate theme ${t}.
			Theme not found at the provided theme path: ${o}.
			Check the theme path to ensure it's correct.
			If the theme is not installed, you can install it using the installTheme step.
			More info can be found in the Blueprint documentation: https://wordpress.github.io/wordpress-playground/blueprints/steps/#ActivateThemeStep
		`);const i=await e.run({code:`<?php
			define( 'WP_ADMIN', true );
			require_once( getenv('docroot') . "/wp-load.php" );

			// Set current user to admin
			wp_set_current_user( get_users(array('role' => 'Administrator') )[0]->ID );

			switch_theme( getenv('themeFolderName') );

			if( wp_get_theme()->get_stylesheet() !== getenv('themeFolderName') ) {
				throw new Exception( 'Theme ' . getenv('themeFolderName') . ' could not be activated.' );				
			}
			die('Theme activated successfully');
		`,env:{docroot:n,themeFolderName:t}});if(i.text!=="Theme activated successfully")throw xe.debug(i),new Error(`Theme ${t} could not be activated – WordPress exited with no error. Sometimes, when $_SERVER or site options are not configured correctly, WordPress exits early with a 301 redirect. Inspect the "debug" logs in the console for more details`)},qn=async(e,{code:t})=>await e.run({code:t}),In=async(e,{options:t})=>await e.run(t),ui=async(e,{path:t})=>{await e.unlink(t)},Nn=Symbol("SleepFinished");function No(e){return new Promise(t=>{setTimeout(()=>t(Nn),e)})}class zo extends Error{constructor(){super("Acquiring lock timed out")}}class zn{constructor({concurrency:t,timeout:s}){this._running=0,this.concurrency=t,this.timeout=s,this.queue=[]}get remaining(){return this.concurrency-this.running}get running(){return this._running}async acquire(){for(;;)if(this._running>=this.concurrency){const t=new Promise(s=>{this.queue.push(s)});this.timeout!==void 0?await Promise.race([t,No(this.timeout)]).then(s=>{if(s===Nn)throw new zo}):await t}else{this._running++;let t=!1;return()=>{t||(t=!0,this._running--,this.queue.length>0&&this.queue.shift()())}}}async run(t){const s=await this.acquire();try{return await t()}finally{s()}}}function de(...e){function t(i){return i.substring(i.length-1)==="/"}let s=e.join("/");const n=s[0]==="/",o=t(s);return s=ci(s),!s&&!n&&(s="."),s&&o&&!t(s)&&(s+="/"),s}function wr(e){if(e==="/")return"/";e=ci(e);const t=e.lastIndexOf("/");return t===-1?"":t===0?"/":e.substr(0,t)}function ci(e){const t=e[0]==="/";return e=Wo(e.split("/").filter(s=>!!s),!t).join("/"),(t?"/":"")+e.replace(/\/$/,"")}function Wo(e,t){let s=0;for(let n=e.length-1;n>=0;n--){const o=e[n];o==="."?e.splice(n,1):o===".."?(e.splice(n,1),s++):s&&(e.splice(n,1),s--)}if(t)for(;s;s--)e.unshift("..");return e}function Wn(e=36,t="!@#$%^&*()_+=-[]/.,<>?"){const s="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"+t;let n="";for(let o=e;o>0;--o)n+=s[Math.floor(Math.random()*s.length)];return n}function Vo(){return Wn(36,"-_")}function Le(e){return`json_decode(base64_decode('${Uo(JSON.stringify(e))}'), true)`}function Or(e){const t={};for(const s in e)t[s]=Le(e[s]);return t}function Uo(e){return Ko(new TextEncoder().encode(e))}function Ko(e){const t=String.fromCodePoint(...e);return btoa(t)}const Vn=async(e,{sql:t},s)=>{s==null||s.tracker.setCaption("Executing SQL Queries");const n=`/tmp/${Vo()}.sql`;await e.writeFile(n,new Uint8Array(await t.arrayBuffer()));const o=await e.documentRoot,i=Or({docroot:o,sqlFilename:n}),r=await e.run({code:`<?php
		require_once ${i.docroot} . '/wp-load.php';

		$handle = fopen(${i.sqlFilename}, 'r');

		global $wpdb;

		while ($line = fgets($handle)) {
			if(trim($line, " 
;") === '') {
				continue;
			}

			$wpdb->query($line);
		}
	`});return await ui(e,{path:n}),r},Un=async(e,{request:t})=>{xe.warn('Deprecated: The Blueprint step "request" is deprecated and will be removed in a future release.');const s=await e.request(t);if(s.httpStatusCode>399||s.httpStatusCode<200)throw xe.warn("WordPress response was",{response:s}),new Error(`Request failed with status ${s.httpStatusCode}`);return s},Mo=`<?php

/**
 * Rewrites the wp-config.php file to ensure specific constants are defined
 * with specific values.
 * 
 * Example:
 * 
 * \`\`\`php
 * <?php
 * define('WP_DEBUG', true);
 * // The third define() argument is also supported:
 * define('SAVEQUERIES', false, true);
 * 
 * // Expression
 * define(true ? 'WP_DEBUG_LOG' : 'WP_DEBUG_LOG', 123);
 * 
 * // Guarded expressions shouldn't be wrapped twice
 * if(!defined(1 ? 'A' : 'B')) {
 *     define(1 ? 'A' : 'B', 0);
 * }
 * 
 * // More advanced expression
 * define((function() use($x) {
 *     return [$x, 'a'];
 * })(), 123);
 * \`\`\`
 * 
 * Rewritten with
 * 
 *     $constants = [
 *        'WP_DEBUG' => false,
 *        'WP_DEBUG_LOG' => true,
 *        'SAVEQUERIES' => true,
 *        'NEW_CONSTANT' => "new constant",
 *     ];
 * 
 * \`\`\`php
 * <?php
 * define('WP_DEBUG_LOG',true);
 * define('NEW_CONSTANT','new constant');
 * ?><?php
 * define('WP_DEBUG',false);
 * // The third define() argument is also supported:
 * define('SAVEQUERIES',true, true);
 * 
 * // Expression
 * if(!defined($const ? 'WP_DEBUG_LOG' : 'WP_DEBUG_LOG')) {
 *      define($const ? 'WP_DEBUG_LOG' : 'WP_DEBUG_LOG', 123);
 * }
 * 
 * // Guarded expressions shouldn't be wrapped twice
 * if(!defined(1 ? 'A' : 'B')) {
 *     define(1 ? 'A' : 'B', 0);
 * }
 * 
 * // More advanced expression
 * if(!defined((function() use($x) {
 *    return [$x, 'a'];
 * })())) {
 *     define((function() use($x) {
 *         return [$x, 'a'];
 *     })(), 123);
 * }
 * \`\`\`
 * 
 * @param mixed $content
 * @return string
 */
function rewrite_wp_config_to_define_constants($content, $constants = [])
{
    $tokens = array_reverse(token_get_all($content));
    $output = [];
    $defined_expressions = [];

    // Look through all the tokens and find the define calls
    do {
        $buffer = [];
        $name_buffer = [];
        $value_buffer = [];
        $third_arg_buffer = [];

        // Capture everything until the define call into output.
        // Capturing the define call into a buffer.
        // Example:
        //     <?php echo 'a'; define  (
        //     ^^^^^^^^^^^^^^^^^^^^^^
        //           output   |buffer
        while ($token = array_pop($tokens)) {
            if (is_array($token) && $token[0] === T_STRING && (strtolower($token[1]) === 'define' || strtolower($token[1]) === 'defined')) {
                $buffer[] = $token;
                break;
            }
            $output[] = $token;
        }

        // Maybe we didn't find a define call and reached the end of the file?
        if (!count($tokens)) {
            break;
        }

        // Keep track of the "defined" expressions that are already accounted for
        if($token[1] === 'defined') {
            $output[] = $token;
            $defined_expression = [];
            $open_parenthesis = 0;
            // Capture everything up to the opening parenthesis, including the parenthesis
            // e.g. defined  (
            //           ^^^^
            while ($token = array_pop($tokens)) {
                $output[] = $token;
                if ($token === "(") {
                    ++$open_parenthesis;
                    break;
                }
            }

            // Capture everything up to the closing parenthesis, including the parenthesis
            // e.g. defined  (
            //           ^^^^
            while ($token = array_pop($tokens)) {
                $output[] = $token;
                if ($token === ")") {
                    --$open_parenthesis;
                }
                if ($open_parenthesis === 0) {
                    break;
                }
                $defined_expression[] = $token;
            }

            $defined_expressions[] = stringify_tokens(skip_whitespace($defined_expression));
            continue;
        }

        // Capture everything up to the opening parenthesis, including the parenthesis
        // e.g. define  (
        //           ^^^^
        while ($token = array_pop($tokens)) {
            $buffer[] = $token;
            if ($token === "(") {
                break;
            }
        }

        // Capture the first argument – it's the first expression after the opening
        // parenthesis and before the comma:
        // Examples:
        //     define("WP_DEBUG", true);
        //            ^^^^^^^^^^^
        //
        //     define(count([1,2]) > 2 ? 'WP_DEBUG' : 'FOO', true);
        //            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        $open_parenthesis = 0;
        while ($token = array_pop($tokens)) {
            $buffer[] = $token;
            if ($token === "(" || $token === "[" || $token === "{") {
                ++$open_parenthesis;
            } elseif ($token === ")" || $token === "]" || $token === "}") {
                --$open_parenthesis;
            } elseif ($token === "," && $open_parenthesis === 0) {
                break;
            }

            // Don't capture the comma as a part of the constant name
            $name_buffer[] = $token;
        }

        // Capture everything until the closing parenthesis
        //     define("WP_DEBUG", true);
        //                       ^^^^^^
        $open_parenthesis = 0;
        $is_second_argument = true;
        while ($token = array_pop($tokens)) {
            $buffer[] = $token;
            if ($token === ")" && $open_parenthesis === 0) {
                // Final parenthesis of the define call.
                break;
            } else if ($token === "(" || $token === "[" || $token === "{") {
                ++$open_parenthesis;
            } elseif ($token === ")" || $token === "]" || $token === "}") {
                --$open_parenthesis;
            } elseif ($token === "," && $open_parenthesis === 0) {
                // This define call has more than 2 arguments! The third one is the
                // boolean value indicating $is_case_insensitive. Let's continue capturing
                // to $third_arg_buffer.
                $is_second_argument = false;
            }
            if ($is_second_argument) {
                $value_buffer[] = $token;
            } else {
                $third_arg_buffer[] = $token;
            }
        }

        // Capture until the semicolon
        //     define("WP_DEBUG", true)  ;
        //                             ^^^
        while ($token = array_pop($tokens)) {
            $buffer[] = $token;
            if ($token === ";") {
                break;
            }
        }

        // Decide whether $name_buffer is a constant name or an expression
        $name_token = null;
        $name_token_index = $token;
        $name_is_literal = true;
        foreach ($name_buffer as $k => $token) {
            if (is_array($token)) {
                if ($token[0] === T_WHITESPACE || $token[0] === T_COMMENT || $token[0] === T_DOC_COMMENT) {
                    continue;
                } else if ($token[0] === T_STRING || $token[0] === T_CONSTANT_ENCAPSED_STRING) {
                    $name_token = $token;
                    $name_token_index = $k;
                } else {
                    $name_is_literal = false;
                    break;
                }
            } else if ($token !== "(" && $token !== ")") {
                $name_is_literal = false;
                break;
            }
        }

        // We can't handle expressions as constant names. Let's wrap that define
        // call in an if(!defined()) statement, just in case it collides with
        // a constant name.
        if (!$name_is_literal) {
            // Ensure the defined expression is not already accounted for
            foreach ($defined_expressions as $defined_expression) {
                if ($defined_expression === stringify_tokens(skip_whitespace($name_buffer))) {
                    $output = array_merge($output, $buffer);
                    continue 2;
                }
            }
            $output = array_merge(
                $output,
                ["if(!defined("],
                $name_buffer,
                [")) {\\n     "],
                ['define('],
                $name_buffer,
                [','],
                $value_buffer,
                $third_arg_buffer,
                [");"],
                ["\\n}\\n"]
            );
            continue;
        }

        // Yay, we have a literal constant name in the buffer now. Let's
        // get its value:
        $name = eval('return ' . $name_token[1] . ';');

        // If the constant name is not in the list of constants we're looking,
        // we can ignore it.
        if (!array_key_exists($name, $constants)) {
            $output = array_merge($output, $buffer);
            continue;
        }

        // We now have a define() call that defines a constant we're looking for.
        // Let's rewrite its value to the one 
        $output = array_merge(
            $output,
            ['define('],
            $name_buffer,
            [','],
            [var_export($constants[$name], true)],
            $third_arg_buffer,
            [");"]
        );

        // Remove the constant from the list so we can process any remaining
        // constants later.
        unset($constants[$name]);
    } while (count($tokens));

    // Add any constants that weren't found in the file
    if (count($constants)) {
        $prepend = [
            "<?php \\n"
        ];
        foreach ($constants as $name => $value) {
            $prepend = array_merge(
                $prepend,
                [
                    "define(",
                    var_export($name, true),
                    ',',
                    var_export($value, true),
                    ");\\n"
                ]
            );
        }
        $prepend[] = "?>";
        $output = array_merge(
            $prepend,
            $output
        );
    }

    // Translate the output tokens back into a string
    return stringify_tokens($output);
}

function stringify_tokens($tokens) {
    $output = '';
    foreach ($tokens as $token) {
        if (is_array($token)) {
            $output .= $token[1];
        } else {
            $output .= $token;
        }
    }
    return $output;
}

function skip_whitespace($tokens) {
    $output = [];
    foreach ($tokens as $token) {
        if (is_array($token) && ($token[0] === T_WHITESPACE || $token[0] === T_COMMENT || $token[0] === T_DOC_COMMENT)) {
            continue;
        }
        $output[] = $token;
    }
    return $output;
}
`,ps=async(e,{consts:t,method:s="define-before-run"})=>{switch(s){case"define-before-run":await Zo(e,t);break;case"rewrite-wp-config":{const n=await e.documentRoot,o=de(n,"/wp-config.php"),i=await e.readFileAsText(o),r=await Go(e,i,t);await e.writeFile(o,r);break}default:throw new Error(`Invalid method: ${s}`)}};async function Zo(e,t){for(const s in t)await e.defineConstant(s,t[s])}async function Go(e,t,s){await e.writeFile("/tmp/code.php",t);const n=Or({consts:s});return await e.run({code:`${Mo}
	$wp_config_path = '/tmp/code.php';
	$wp_config = file_get_contents($wp_config_path);
	$new_wp_config = rewrite_wp_config_to_define_constants($wp_config, ${n.consts});
	file_put_contents($wp_config_path, $new_wp_config);
	`}),await e.readFileAsText("/tmp/code.php")}const di=async(e,{options:t})=>{const s=await e.documentRoot;await e.run({code:`<?php
		include ${Le(s)} . '/wp-load.php';
		$site_options = ${Le(t)};
		foreach($site_options as $name => $value) {
			update_option($name, $value);
		}
		echo "Success";
		`})},Kn=async(e,{meta:t,userId:s})=>{const n=await e.documentRoot;await e.run({code:`<?php
		include ${Le(n)} . '/wp-load.php';
		$meta = ${Le(t)};
		foreach($meta as $name => $value) {
			update_user_meta(${Le(s)}, $name, $value);
		}
		`})},hi="/tmp/wp-cli.phar",Qo={resource:"url",url:"https://playground.wordpress.net/wp-cli.phar"},Mn=async(e,t=hi)=>{if(!await e.fileExists(t))throw new Error(`wp-cli.phar not found at ${t}.
			You can enable wp-cli support by adding "wp-cli" to the list of extra libraries in your blueprint as follows:
			{
				"extraLibraries": [ "wp-cli" ]
			}
			Read more about it in the documentation.
			https://wordpress.github.io/wordpress-playground/blueprints/data-format#extra-libraries`)},mi=async(e,{command:t,wpCliPath:s=hi})=>{await Mn(e,s);let n;if(typeof t=="string"?(t=t.trim(),n=Xo(t)):n=t,n.shift()!=="wp")throw new Error('The first argument must be "wp".');const i=await e.documentRoot;await e.writeFile("/tmp/stdout",""),await e.writeFile("/tmp/stderr",""),await e.writeFile(de(i,"run-cli.php"),`<?php
		// Set up the environment to emulate a shell script
		// call.

		// Set SHELL_PIPE to 0 to ensure WP-CLI formats
		// the output as ASCII tables.
		// @see https://github.com/wp-cli/wp-cli/issues/1102
		putenv( 'SHELL_PIPE=0' );

		// Set the argv global.
		$GLOBALS['argv'] = array_merge([
		  "/tmp/wp-cli.phar",
		  "--path=${i}"
		], ${Le(n)});

		// Provide stdin, stdout, stderr streams outside of
		// the CLI SAPI.
		define('STDIN', fopen('php://stdin', 'rb'));
		define('STDOUT', fopen('php://stdout', 'wb'));
		define('STDERR', fopen('php://stderr', 'wb'));

		require( ${Le(s)} );
		`);const r=await e.run({scriptPath:de(i,"run-cli.php")});if(r.errors)throw new Error(r.errors);return r};function Xo(e){let n=0,o="";const i=[];let r="";for(let p=0;p<e.length;p++){const m=e[p];n===0?m==='"'||m==="'"?(n=1,o=m):m.match(/\s/)?(r&&i.push(r),r=""):r+=m:n===1&&(m==="\\"?(p++,r+=e[p]):m===o?(n=0,o=""):r+=m)}return r&&i.push(r),i}const Zn=async(e,{wpCliPath:t})=>{await Mn(e,t),await ps(e,{consts:{WP_ALLOW_MULTISITE:1}});const s=new URL(await e.absoluteUrl);if(s.port!==""){let i=`The current host is ${s.host}, but WordPress multisites do not support custom ports.`;throw s.hostname==="localhost"&&(i+=" For development, you can set up a playground.test domain using the instructions at https://wordpress.github.io/wordpress-playground/contributing/code."),new Error(i)}const n=s.pathname.replace(/\/$/,"")+"/",o=`${s.protocol}//${s.hostname}${n}`;await di(e,{options:{siteurl:o,home:o}}),await mi(e,{command:"wp core multisite-convert"})},Gn=async(e,{fromPath:t,toPath:s})=>{await e.writeFile(s,await e.readFileAsBuffer(t))},Qn=async(e,{fromPath:t,toPath:s})=>{await e.mv(t,s)},Xn=async(e,{path:t})=>{await e.mkdir(t)},Yn=async(e,{path:t})=>{await e.rmdir(t)},Cr=async(e,{path:t,data:s})=>{s instanceof File&&(s=new Uint8Array(await s.arrayBuffer())),t.startsWith("/wordpress/wp-content/mu-plugins")&&!await e.fileExists("/wordpress/wp-content/mu-plugins")&&await e.mkdir("/wordpress/wp-content/mu-plugins"),await e.writeFile(t,s)},es={0:"No error occurred. System call completed successfully.",1:"Argument list too long.",2:"Permission denied.",3:"Address in use.",4:"Address not available.",5:"Address family not supported.",6:"Resource unavailable, or operation would block.",7:"Connection already in progress.",8:"Bad file descriptor.",9:"Bad message.",10:"Device or resource busy.",11:"Operation canceled.",12:"No child processes.",13:"Connection aborted.",14:"Connection refused.",15:"Connection reset.",16:"Resource deadlock would occur.",17:"Destination address required.",18:"Mathematics argument out of domain of function.",19:"Reserved.",20:"File exists.",21:"Bad address.",22:"File too large.",23:"Host is unreachable.",24:"Identifier removed.",25:"Illegal byte sequence.",26:"Operation in progress.",27:"Interrupted function.",28:"Invalid argument.",29:"I/O error.",30:"Socket is connected.",31:"There is a directory under that path.",32:"Too many levels of symbolic links.",33:"File descriptor value too large.",34:"Too many links.",35:"Message too large.",36:"Reserved.",37:"Filename too long.",38:"Network is down.",39:"Connection aborted by network.",40:"Network unreachable.",41:"Too many files open in system.",42:"No buffer space available.",43:"No such device.",44:"There is no such file or directory OR the parent directory does not exist.",45:"Executable file format error.",46:"No locks available.",47:"Reserved.",48:"Not enough space.",49:"No message of the desired type.",50:"Protocol not available.",51:"No space left on device.",52:"Function not supported.",53:"The socket is not connected.",54:"Not a directory or a symbolic link to a directory.",55:"Directory not empty.",56:"State not recoverable.",57:"Not a socket.",58:"Not supported, or operation not supported on socket.",59:"Inappropriate I/O control operation.",60:"No such device or address.",61:"Value too large to be stored in data type.",62:"Previous owner died.",63:"Operation not permitted.",64:"Broken pipe.",65:"Protocol error.",66:"Protocol not supported.",67:"Protocol wrong type for socket.",68:"Result too large.",69:"Read-only file system.",70:"Invalid seek.",71:"No such process.",72:"Reserved.",73:"Connection timed out.",74:"Text file busy.",75:"Cross-device link.",76:"Extension: Capabilities insufficient."};function Yo(e){const t=typeof e=="object"?e==null?void 0:e.errno:null;if(t in es)return es[t]}function Xe(e=""){return function(s,n,o){const i=o.value;o.value=function(...r){try{return i.apply(this,r)}catch(p){const m=typeof p=="object"?p==null?void 0:p.errno:null;if(m in es){const u=es[m],d=typeof r[1]=="string"?r[1]:null,b=d!==null?e.replaceAll("{path}",d):e;throw new Error(`${b}: ${u}`,{cause:p})}throw p}}}}var Jo=Object.defineProperty,_o=Object.getOwnPropertyDescriptor,Ye=(e,t,s,n)=>{for(var o=n>1?void 0:n?_o(t,s):t,i=e.length-1,r;i>=0;i--)(r=e[i])&&(o=(n?r(t,s,o):r(o))||o);return n&&o&&Jo(t,s,o),o};const Je=class Re{static readFileAsText(t,s){return new TextDecoder().decode(Re.readFileAsBuffer(t,s))}static readFileAsBuffer(t,s){return t.readFile(s)}static writeFile(t,s,n){t.writeFile(s,n)}static unlink(t,s){t.unlink(s)}static mv(t,s,n){try{const o=t.lookupPath(s).node.mount,i=Re.fileExists(t,n)?t.lookupPath(n).node.mount:t.lookupPath(wr(n)).node.mount;o.mountpoint!==i.mountpoint?(Re.copyRecursive(t,s,n),Re.isDir(t,s)?Re.rmdir(t,s,{recursive:!0}):t.unlink(s)):t.rename(s,n)}catch(o){const i=Yo(o);throw i?new Error(`Could not move ${s} to ${n}: ${i}`,{cause:o}):o}}static rmdir(t,s,n={recursive:!0}){n!=null&&n.recursive&&Re.listFiles(t,s).forEach(o=>{const i=`${s}/${o}`;Re.isDir(t,i)?Re.rmdir(t,i,n):Re.unlink(t,i)}),t.rmdir(s)}static listFiles(t,s,n={prependPath:!1}){if(!Re.fileExists(t,s))return[];try{const o=t.readdir(s).filter(i=>i!=="."&&i!=="..");if(n.prependPath){const i=s.replace(/\/$/,"");return o.map(r=>`${i}/${r}`)}return o}catch(o){return xe.error(o,{path:s}),[]}}static isDir(t,s){return Re.fileExists(t,s)?t.isDir(t.lookupPath(s,{follow:!0}).node.mode):!1}static isFile(t,s){return Re.fileExists(t,s)?t.isFile(t.lookupPath(s,{follow:!0}).node.mode):!1}static symlink(t,s,n){return t.symlink(s,n)}static isSymlink(t,s){return Re.fileExists(t,s)?t.isLink(t.lookupPath(s).node.mode):!1}static readlink(t,s){return t.readlink(s)}static realpath(t,s){return t.lookupPath(s,{follow:!0}).path}static fileExists(t,s){try{return t.lookupPath(s),!0}catch{return!1}}static mkdir(t,s){t.mkdirTree(s)}static copyRecursive(t,s,n){const o=t.lookupPath(s).node;if(t.isDir(o.mode)){t.mkdirTree(n);const i=t.readdir(s).filter(r=>r!=="."&&r!=="..");for(const r of i)Re.copyRecursive(t,de(s,r),de(n,r))}else t.writeFile(n,t.readFile(s))}};Ye([Xe('Could not read "{path}"')],Je,"readFileAsText",1);Ye([Xe('Could not read "{path}"')],Je,"readFileAsBuffer",1);Ye([Xe('Could not write to "{path}"')],Je,"writeFile",1);Ye([Xe('Could not unlink "{path}"')],Je,"unlink",1);Ye([Xe('Could not remove directory "{path}"')],Je,"rmdir",1);Ye([Xe('Could not list files in "{path}"')],Je,"listFiles",1);Ye([Xe('Could not stat "{path}"')],Je,"isDir",1);Ye([Xe('Could not stat "{path}"')],Je,"isFile",1);Ye([Xe('Could not stat "{path}"')],Je,"realpath",1);Ye([Xe('Could not stat "{path}"')],Je,"fileExists",1);Ye([Xe('Could not create directory "{path}"')],Je,"mkdir",1);Ye([Xe('Could not copy files from "{path}"')],Je,"copyRecursive",1);const $o={500:"Internal Server Error",502:"Bad Gateway",404:"Not Found",403:"Forbidden",401:"Unauthorized",400:"Bad Request",301:"Moved Permanently",302:"Found",307:"Temporary Redirect",308:"Permanent Redirect",204:"No Content",201:"Created",200:"OK"};class ts{constructor(t,s,n,o="",i=0){this.httpStatusCode=t,this.headers=s,this.bytes=n,this.exitCode=i,this.errors=o}static forHttpCode(t,s=""){return new ts(t,{},new TextEncoder().encode(s||$o[t]||""))}static fromRawData(t){return new ts(t.httpStatusCode,t.headers,t.bytes,t.errors,t.exitCode)}toRawData(){return{headers:this.headers,bytes:this.bytes,errors:this.errors,exitCode:this.exitCode,httpStatusCode:this.httpStatusCode}}get json(){return JSON.parse(this.text)}get text(){return new TextDecoder().decode(this.bytes)}}(function(){var e;return typeof process<"u"&&((e=process.release)==null?void 0:e.name)==="node"?"NODE":typeof window<"u"?"WEB":typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope?"WORKER":"NODE"})();const Ri="/internal/shared/php.ini";function yi(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}const{hasOwnProperty:Es}=Object.prototype,Qs=(e,t={})=>{typeof t=="string"&&(t={section:t}),t.align=t.align===!0,t.newline=t.newline===!0,t.sort=t.sort===!0,t.whitespace=t.whitespace===!0||t.align===!0,t.platform=t.platform||typeof process<"u"&&process.platform,t.bracketedArray=t.bracketedArray!==!1;const s=t.platform==="win32"?`\r
`:`
`,n=t.whitespace?" = ":"=",o=[],i=t.sort?Object.keys(e).sort():Object.keys(e);let r=0;t.align&&(r=mt(i.filter(u=>e[u]===null||Array.isArray(e[u])||typeof e[u]!="object").map(u=>Array.isArray(e[u])?`${u}[]`:u).concat([""]).reduce((u,d)=>mt(u).length>=mt(d).length?u:d)).length);let p="";const m=t.bracketedArray?"[]":"";for(const u of i){const d=e[u];if(d&&Array.isArray(d))for(const b of d)p+=mt(`${u}${m}`).padEnd(r," ")+n+mt(b)+s;else d&&typeof d=="object"?o.push(u):p+=mt(u).padEnd(r," ")+n+mt(d)+s}t.section&&p.length&&(p="["+mt(t.section)+"]"+(t.newline?s+s:s)+p);for(const u of o){const d=Jn(u,".").join("\\."),b=(t.section?t.section+".":"")+d,v=Qs(e[u],{...t,section:b});p.length&&v.length&&(p+=s),p+=v}return p};function Jn(e,t){var s=0,n=0,o=0,i=[];do if(o=e.indexOf(t,s),o!==-1){if(s=o+t.length,o>0&&e[o-1]==="\\")continue;i.push(e.slice(n,o)),n=o+t.length}while(o!==-1);return i.push(e.slice(n)),i}const ji=(e,t={})=>{t.bracketedArray=t.bracketedArray!==!1;const s=Object.create(null);let n=s,o=null;const i=/^\[([^\]]*)\]\s*$|^([^=]+)(=(.*))?$/i,r=e.split(/[\r\n]+/g),p={};for(const u of r){if(!u||u.match(/^\s*[;#]/)||u.match(/^\s*$/))continue;const d=u.match(i);if(!d)continue;if(d[1]!==void 0){if(o=Mr(d[1]),o==="__proto__"){n=Object.create(null);continue}n=s[o]=s[o]||Object.create(null);continue}const b=Mr(d[2]);let v;t.bracketedArray?v=b.length>2&&b.slice(-2)==="[]":(p[b]=((p==null?void 0:p[b])||0)+1,v=p[b]>1);const w=v?b.slice(0,-2):b;if(w==="__proto__")continue;const L=d[3]?Mr(d[4]):!0,E=L==="true"||L==="false"||L==="null"?JSON.parse(L):L;v&&(Es.call(n,w)?Array.isArray(n[w])||(n[w]=[n[w]]):n[w]=[]),Array.isArray(n[w])?n[w].push(E):n[w]=E}const m=[];for(const u of Object.keys(s)){if(!Es.call(s,u)||typeof s[u]!="object"||Array.isArray(s[u]))continue;const d=Jn(u,".");n=s;const b=d.pop(),v=b.replace(/\\\./g,".");for(const w of d)w!=="__proto__"&&((!Es.call(n,w)||typeof n[w]!="object")&&(n[w]=Object.create(null)),n=n[w]);n===s&&v===b||(n[v]=s[u],m.push(u))}for(const u of m)delete s[u];return s},_n=e=>e.startsWith('"')&&e.endsWith('"')||e.startsWith("'")&&e.endsWith("'"),mt=e=>typeof e!="string"||e.match(/[=\r\n]/)||e.match(/^\[/)||e.length>1&&_n(e)||e!==e.trim()?JSON.stringify(e):e.split(";").join("\\;").split("#").join("\\#"),Mr=e=>{if(e=(e||"").trim(),_n(e)){e.charAt(0)==="'"&&(e=e.slice(1,-1));try{e=JSON.parse(e)}catch{}}else{let t=!1,s="";for(let n=0,o=e.length;n<o;n++){const i=e.charAt(n);if(t)"\\;#".indexOf(i)!==-1?s+=i:s+="\\"+i,t=!1;else{if(";#".indexOf(i)!==-1)break;i==="\\"?t=!0:s+=i}}return t&&(s+="\\"),s.trim()}return e};var Fi={parse:ji,decode:ji,stringify:Qs,encode:Qs,safe:mt,unsafe:Mr};async function ep(e,t){const s=Fi.parse(await e.readFileAsText(Ri));for(const[n,o]of Object.entries(t))o==null?delete s[n]:s[n]=o;await e.writeFile(Ri,Fi.stringify(s))}ReadableStream.prototype[Symbol.asyncIterator]||(ReadableStream.prototype[Symbol.asyncIterator]=async function*(){const e=this.getReader();try{for(;;){const{done:t,value:s}=await e.read();if(t)return;yield s}}finally{e.releaseLock()}},ReadableStream.prototype.iterate=ReadableStream.prototype[Symbol.asyncIterator]);const fs=["8.3","8.2","8.1","8.0","7.4","7.3","7.2","7.1","7.0"],$n=fs[0],tp=fs;async function ls(e,t,s,{rmRoot:n=!1}={}){n&&await e.isDir(t)&&await e.rmdir(t,{recursive:!0});for(const[o,i]of Object.entries(s)){const r=de(t,o);await e.fileExists(wr(r))||await e.mkdir(wr(r)),i instanceof Uint8Array||typeof i=="string"?await e.writeFile(r,i):await ls(e,r,i)}}const ea=async(e,{writeToPath:t,filesTree:s})=>{await ls(e,t,s.files)},gi=async(e,{siteUrl:t})=>{await ps(e,{consts:{WP_HOME:t,WP_SITEURL:t}})},ta=async(e,{file:t,importer:s="default"},n)=>{s==="data-liberation"?await sp(e,t,n):await rp(e,t,n)};async function rp(e,t,s){var o;(o=s==null?void 0:s.tracker)==null||o.setCaption("Importing content"),await Cr(e,{path:"/tmp/import.wxr",data:t});const n=await e.documentRoot;await e.run({code:`<?php
	require ${Le(n)} . '/wp-load.php';
	require ${Le(n)} . '/wp-admin/includes/admin.php';

	kses_remove_filters();
	$admin_id = get_users(array('role' => 'Administrator') )[0]->ID;
	wp_set_current_user( $admin_id );
	$importer = new WXR_Importer( array(
		'fetch_attachments' => true,
		'default_author' => $admin_id
	) );
	$logger = new WP_Importer_Logger_CLI();
	$importer->set_logger( $logger );
	// Slashes from the imported content are lost if we don't call wp_slash here.
	add_action( 'wp_insert_post_data', function( $data ) {
		return wp_slash($data);
	});
  
  // Ensure that Site Editor templates are associated with the correct taxonomy.
  add_filter( 'wp_import_post_terms', function ( $terms, $post_id ) {
    foreach ( $terms as $post_term ) {
      if ( 'wp_theme' !== $term['taxonomy'] ) continue;
      $post_term = get_term_by('slug', $term['slug'], $term['taxonomy'] );
      if ( ! $post_term ) {
        $post_term = wp_insert_term(
          $term['slug'],
          $term['taxonomy']
        );
        $term_id = $post_term['term_id'];
      } else {
        $term_id = $post_term->term_id;
      }
      wp_set_object_terms( $post_id, $term_id, $term['taxonomy']) ;
    }
    return $terms;
  }, 10, 2 );
	$result = $importer->import( '/tmp/import.wxr' );
	`})}async function sp(e,t,s){var i;(i=s==null?void 0:s.tracker)==null||i.setCaption("Preparing content import"),await Cr(e,{path:"/tmp/import.wxr",data:t});const n=await e.documentRoot,o=await e.onMessage(r=>{var m;const p=JSON.parse(r);(p==null?void 0:p.type)==="import-wxr-progress"&&((m=s==null?void 0:s.tracker)==null||m.setCaption(p.progress))});try{await e.run({code:`<?php
	require ${Le(n)} . '/wp-load.php';
	require ${Le(n)} . '/wp-admin/includes/admin.php';

	// Defines the constants expected by the Box .phar stub when "cli" is used
	// as the SAPI name.
	// @TODO: Don't use the "cli" SAPI string and don't allow composer to run platform checks.
	if(!defined('STDERR')) define('STDERR', fopen('php://stderr', 'w'));
	if(!defined('STDIN'))  define('STDIN', fopen('php://stdin', 'r'));
	if(!defined('STDOUT')) define('STDOUT', fopen('php://stdout', 'w'));
	
	// Preloaded by the Blueprint compile() function
	require '/internal/shared/data-liberation-core.phar';

	$admin_id = get_users(array('role' => 'Administrator') )[0]->ID;
	wp_set_current_user( $admin_id );

	$new_site_url = get_site_url();
	$importer = WP_Stream_Importer::create_for_wxr_file(
		'/tmp/import.wxr',
		array(
			'new_site_url' => $new_site_url,
		)
	);
	$session = WP_Import_Session::create(
		array(
			'data_source' => 'wxr_file',
			'file_name' => '/tmp/import.wxr',
		)
	);
	while ( true ) {
		if ( true === $importer->next_step() ) {
			/**
			 * We're ignoring any importing errors.
			 * This script is a part of Blueprints and is expected to finish
			 * without stopping. We won't be gathering additional user input
			 * along the way. Instead, we'll just decide not to ignore the
			 * errors.
			 *
			 * @TODO: Consider extracting this code into a CLI script and
			 *        using it here instead of this custom script. Note it's
			 *        about a simple CLI script, not a WP-CLI command, as the
			 *        latter would require downloading 5MB of WP-CLI code.
			 */
			switch ( $importer->get_stage() ) {
				case WP_Stream_Importer::STAGE_INITIAL:
					$message = 'Preparing content import';
					break;
		
				case WP_Stream_Importer::STAGE_INDEX_ENTITIES:
					// Bump the total number of entities to import.
					$indexed = $session->count_all_total_entities();
					$message = 'Content import 1/4: Indexing records (' . $indexed . ' so far)';
					$session->create_frontloading_placeholders( $importer->get_indexed_assets_urls() );
					$session->bump_total_number_of_entities(
						$importer->get_indexed_entities_counts()
					);
					break;

				case WP_Stream_Importer::STAGE_TOPOLOGICAL_SORT:
					$message = 'Content import 2/4: Indexing data';
					break;

				case WP_Stream_Importer::STAGE_FRONTLOAD_ASSETS:
					$session->bump_frontloading_progress(
						$importer->get_frontloading_progress(),
						$importer->get_frontloading_events()
					);
					$nb_media = $session->count_awaiting_frontloading_placeholders();
					$message = 'Content import 3/4: Downloading media (' . $nb_media . ' remaining)';
					break;

				case WP_Stream_Importer::STAGE_IMPORT_ENTITIES:
					$session->bump_imported_entities_counts(
						$importer->get_imported_entities_counts()
					);
					$nb_remaining_entities = $session->count_remaining_entities();
					$message = 'Content import 4/4: Inserting data (' . $nb_remaining_entities . ' remaining)';
					break;

				default:
					$message = 'Importing content';
					break;
			}

			// Report progress to the UI
			post_message_to_js(json_encode([
				'type' => 'import-wxr-progress',
				'progress' => $message,
			]));
			continue;
		}
		if ( $importer->advance_to_next_stage() ) {
			continue;
		}
		// Import finished
		break;
	}
	`})}finally{await o()}}const wi=async(e,{themeSlug:t=""},s)=>{var o;(o=s==null?void 0:s.tracker)==null||o.setCaption("Importing theme starter content");const n=await e.documentRoot;await e.run({code:`<?php

		/**
		 * Ensure that the customizer loads as an admin user.
		 *
		 * For compatibility with themes, this MUST be run prior to theme inclusion, which is why this is a plugins_loaded filter instead
		 * of running _wp_customize_include() manually after load.
		 */
		function importThemeStarterContent_plugins_loaded() {
			// Set as the admin user, this ensures we can customize the site.
			wp_set_current_user(
				get_users( [ 'role' => 'Administrator' ] )[0]
			);

			// Force the site to be fresh, although it should already be.
			add_filter( 'pre_option_fresh_site', '__return_true' );

			/*
			 * Simulate this request as the customizer loading with the current theme in preview mode.
			 *
			 * See _wp_customize_include()
			 */
			$_REQUEST['wp_customize']    = 'on';
			$_REQUEST['customize_theme'] = ${Le(t)} ?: get_stylesheet();

			/*
			 * Claim this is a ajax request saving settings, to avoid the preview filters being applied.
			 */
			$_REQUEST['action'] = 'customize_save';
			add_filter( 'wp_doing_ajax', '__return_true' );

			$_GET = $_REQUEST;
		}
		playground_add_filter( 'plugins_loaded', 'importThemeStarterContent_plugins_loaded', 0 );

		require ${Le(n)} . '/wp-load.php';

		// Return early if there's no starter content.
		if ( ! get_theme_starter_content() ) {
			return;
		}

		// Import the Starter Content.
		$wp_customize->import_theme_starter_content();

		// Publish the changeset, which publishes the starter content.
		wp_publish_post( $wp_customize->changeset_post_id() );
		`})};function ip(e=fetch){const t={};return async function(n,o){t[n]||(t[n]=e(n,o).then(u=>({body:u.body,responseInit:{status:u.status,statusText:u.statusText,headers:u.headers}})));const{body:i,responseInit:r}=await t[n],[p,m]=i.tee();return t[n]={body:p,responseInit:r},new Response(m,r)}}const Ts="/tmp/file.zip",ra=async(e,t,s,n=!0)=>{if(t instanceof File){const i=t;t=Ts,await e.writeFile(t,new Uint8Array(await i.arrayBuffer()))}const o=Or({zipPath:t,extractToPath:s,overwriteFiles:n});await e.run({code:`<?php
        function unzip($zipPath, $extractTo, $overwriteFiles = true)
        {
            if (!is_dir($extractTo)) {
                mkdir($extractTo, 0777, true);
            }
            $zip = new ZipArchive;
            $res = $zip->open($zipPath);
            if ($res === TRUE) {
				for ($i = 0; $i < $zip->numFiles; $i++) {
					$filename = $zip->getNameIndex($i);
					$fileinfo = pathinfo($filename);
					$extractFilePath = rtrim($extractTo, '/') . '/' . $filename;
					// Check if file exists and $overwriteFiles is false
					if (!file_exists($extractFilePath) || $overwriteFiles) {
						// Extract file
						$zip->extractTo($extractTo, $filename);
					}
				}
				$zip->close();
				chmod($extractTo, 0777);
            } else {
                throw new Exception("Could not unzip file: " . $zip->getStatusString());
            }
        }
        unzip(${o.zipPath}, ${o.extractToPath}, ${o.overwriteFiles});
        `}),await e.fileExists(Ts)&&await e.unlink(Ts)},us=async(e,{zipFile:t,zipPath:s,extractToPath:n})=>{if(s)xe.warn('The "zipPath" option of the unzip() Blueprint step is deprecated and will be removed. Use "zipFile" instead.');else if(!t)throw new Error("Either zipPath or zipFile must be provided");await ra(e,t||s,n)},sa=async(e,{wordPressFilesZip:t,pathInZip:s=""})=>{const n=await e.documentRoot;let o=de("/tmp","import");await e.mkdir(o),await us(e,{zipFile:t,extractToPath:o}),o=de(o,s);const i=de(o,"wp-content"),r=de(n,"wp-content");for(const d of pi){const b=de(i,d);await qi(e,b);const v=de(r,d);await e.fileExists(v)&&(await e.mkdir(wr(b)),await e.mv(v,b))}const p=de(o,"wp-content","database");await e.fileExists(p)||await e.mv(de(n,"wp-content","database"),p);const m=await e.listFiles(o);for(const d of m)await qi(e,de(n,d)),await e.mv(de(o,d),de(n,d));await e.rmdir(o),await gi(e,{siteUrl:await e.absoluteUrl});const u=Le(de(n,"wp-admin","upgrade.php"));await e.run({code:`<?php
            $_GET['step'] = 'upgrade_db';
            require ${u};
            `})};async function qi(e,t){await e.fileExists(t)&&(await e.isDir(t)?await e.rmdir(t):await e.unlink(t))}async function ia(e){const t=await e.request({url:"/wp-admin/export.php?download=true&content=all"});return new File([t.bytes],"export.xml")}async function na(e,{targetPath:t,zipFile:s,ifAlreadyInstalled:n="overwrite",targetFolderName:o=""}){const r=s.name.replace(/\.zip$/,""),p=de(await e.documentRoot,"wp-content"),m=de(p,Wn()),u=de(m,"assets",r);await e.fileExists(u)&&await e.rmdir(m,{recursive:!0}),await e.mkdir(m);try{await us(e,{zipFile:s,extractToPath:u});let d=await e.listFiles(u,{prependPath:!0});d=d.filter(E=>!E.endsWith("/__MACOSX"));const b=d.length===1&&await e.isDir(d[0]);let v,w="";b?(w=d[0],v=d[0].split("/").pop()):(w=u,v=r),o&&o.length&&(v=o);const L=`${t}/${v}`;if(await e.fileExists(L)){if(!await e.isDir(L))throw new Error(`Cannot install asset ${v} to ${L} because a file with the same name already exists. Note it's a file, not a directory! Is this by mistake?`);if(n==="overwrite")await e.rmdir(L,{recursive:!0});else{if(n==="skip")return{assetFolderPath:L,assetFolderName:v};throw new Error(`Cannot install asset ${v} to ${t} because it already exists and the ifAlreadyInstalled option was set to ${n}`)}}return await e.mv(w,L),{assetFolderPath:L,assetFolderName:v}}finally{await e.rmdir(m,{recursive:!0})}}function cs(e){const t=e.split(".").shift().replace(/-/g," ");return t.charAt(0).toUpperCase()+t.slice(1).toLowerCase()}const aa=async(e,{pluginData:t,pluginZipFile:s,ifAlreadyInstalled:n,options:o={}},i)=>{s&&(t=s,xe.warn('The "pluginZipFile" option is deprecated. Use "pluginData" instead.'));const r=de(await e.documentRoot,"wp-content","plugins"),p="targetFolderName"in o?o.targetFolderName:"";let m="",u="";if(t instanceof File)if(t.name.endsWith(".php")){const b=de(r,t.name);await Cr(e,{path:b,data:t}),m=r,u=t.name}else{const b=t.name.split("/").pop()||"plugin.zip";u=cs(b),i==null||i.tracker.setCaption(`Installing the ${u} plugin`);const v=await na(e,{ifAlreadyInstalled:n,zipFile:t,targetPath:`${await e.documentRoot}/wp-content/plugins`,targetFolderName:p});m=v.assetFolderPath,u=v.assetFolderName}else if(t){u=t.name,i==null||i.tracker.setCaption(`Installing the ${u} plugin`);const b=de(r,p||t.name);await ls(e,b,t.files,{rmRoot:!0}),m=b}("activate"in o?o.activate:!0)&&await fi(e,{pluginPath:m,pluginName:u},i)},oa=async(e,{themeData:t,themeZipFile:s,ifAlreadyInstalled:n,options:o={}},i)=>{s&&(t=s,xe.warn('The "themeZipFile" option is deprecated. Use "themeData" instead.'));const r="targetFolderName"in o?o.targetFolderName:"";let p="",m="";if(t instanceof File){const b=t.name.split("/").pop()||"theme.zip";m=cs(b),i==null||i.tracker.setCaption(`Installing the ${m} theme`),p=(await na(e,{ifAlreadyInstalled:n,zipFile:t,targetPath:`${await e.documentRoot}/wp-content/themes`,targetFolderName:r})).assetFolderName}else{m=t.name,p=r||m,i==null||i.tracker.setCaption(`Installing the ${m} theme`);const b=de(await e.documentRoot,"wp-content","themes",p);await ls(e,b,t.files,{rmRoot:!0})}("activate"in o?o.activate:!0)&&await li(e,{themeFolderName:p},i),("importStarterContent"in o?o.importStarterContent:!1)&&await wi(e,{themeSlug:p},i)},pa=async(e,{username:t="admin"}={},s)=>{s==null||s.tracker.setCaption((s==null?void 0:s.initialCaption)||"Logging in"),e.defineConstant("PLAYGROUND_AUTO_LOGIN_AS_USER",t)},fa=async(e,t,s)=>{var o;(o=s==null?void 0:s.tracker)==null||o.setCaption("Resetting WordPress data");const n=await e.documentRoot;await e.run({env:{DOCROOT:n},code:`<?php
		require getenv('DOCROOT') . '/wp-load.php';

		$GLOBALS['@pdo']->query('DELETE FROM wp_posts WHERE id > 0');
		$GLOBALS['@pdo']->query("UPDATE SQLITE_SEQUENCE SET SEQ=0 WHERE NAME='wp_posts'");
		
		$GLOBALS['@pdo']->query('DELETE FROM wp_postmeta WHERE post_id > 1');
		$GLOBALS['@pdo']->query("UPDATE SQLITE_SEQUENCE SET SEQ=20 WHERE NAME='wp_postmeta'");

		$GLOBALS['@pdo']->query('DELETE FROM wp_comments');
		$GLOBALS['@pdo']->query("UPDATE SQLITE_SEQUENCE SET SEQ=0 WHERE NAME='wp_comments'");

		$GLOBALS['@pdo']->query('DELETE FROM wp_commentmeta');
		$GLOBALS['@pdo']->query("UPDATE SQLITE_SEQUENCE SET SEQ=0 WHERE NAME='wp_commentmeta'");
		`})},la=async(e,{options:t})=>{await e.request({url:"/wp-admin/install.php?step=2",method:"POST",body:{language:"en",prefix:"wp_",weblog_title:"My WordPress Website",user_name:t.adminPassword||"admin",admin_password:t.adminPassword||"password",admin_password2:t.adminPassword||"password",Submit:"Install WordPress",pw_weak:"1",admin_email:"admin@localhost.com"}})},ua=async(e,{selfContained:t=!1}={})=>{const s="/tmp/wordpress-playground.zip",n=await e.documentRoot,o=de(n,"wp-content");let i=pi;t&&(i=i.filter(m=>!m.startsWith("themes/twenty")).filter(m=>m!=="mu-plugins/sqlite-database-integration"));const r=Or({zipPath:s,wpContentPath:o,documentRoot:n,exceptPaths:i.map(m=>de(n,"wp-content",m)),additionalPaths:t?{[de(n,"wp-config.php")]:"wp-config.php"}:{}});await ap(e,`zipDir(${r.wpContentPath}, ${r.zipPath}, array(
			'exclude_paths' => ${r.exceptPaths},
			'zip_root'      => ${r.documentRoot},
			'additional_paths' => ${r.additionalPaths}
		));`);const p=await e.readFileAsBuffer(s);return e.unlink(s),p},np=`<?php

function zipDir($root, $output, $options = array())
{
    $root = rtrim($root, '/');
    $additionalPaths = array_key_exists('additional_paths', $options) ? $options['additional_paths'] : array();
    $excludePaths = array_key_exists('exclude_paths', $options) ? $options['exclude_paths'] : array();
    $zip_root = array_key_exists('zip_root', $options) ? $options['zip_root'] : $root;

    $zip = new ZipArchive;
    $res = $zip->open($output, ZipArchive::CREATE);
    if ($res === TRUE) {
        $directories = array(
            $root . '/'
        );
        while (sizeof($directories)) {
            $current_dir = array_pop($directories);

            if ($handle = opendir($current_dir)) {
                while (false !== ($entry = readdir($handle))) {
                    if ($entry == '.' || $entry == '..') {
                        continue;
                    }

                    $entry = join_paths($current_dir, $entry);
                    if (in_array($entry, $excludePaths)) {
                        continue;
                    }

                    if (is_dir($entry)) {
                        $directory_path = $entry . '/';
                        array_push($directories, $directory_path);
                    } else if (is_file($entry)) {
                        $zip->addFile($entry, substr($entry, strlen($zip_root)));
                    }
                }
                closedir($handle);
            }
        }
        foreach ($additionalPaths as $disk_path => $zip_path) {
            $zip->addFile($disk_path, $zip_path);
        }
        $zip->close();
        chmod($output, 0777);
    }
}

function join_paths()
{
    $paths = array();

    foreach (func_get_args() as $arg) {
        if ($arg !== '') {
            $paths[] = $arg;
        }
    }

    return preg_replace('#/+#', '/', join('/', $paths));
}
`;async function ap(e,t){return await e.run({code:np+t})}const op=ip(fetch);async function Ss(e="latest"){if(e.startsWith("https://")||e.startsWith("http://")){const n=await crypto.subtle.digest("SHA-1",new TextEncoder().encode(e)),o=Array.from(new Uint8Array(n)).map(i=>i.toString(16).padStart(2,"0")).join("");return{releaseUrl:e,version:"custom-"+o.substring(0,8),source:"inferred"}}else if(e==="trunk"||e==="nightly")return{releaseUrl:"https://wordpress.org/nightly-builds/wordpress-latest.zip",version:"nightly-"+new Date().toISOString().split("T")[0],source:"inferred"};let s=await(await op("https://api.wordpress.org/core/version-check/1.7/?channel=beta")).json();s=s.offers.filter(n=>n.response==="autoupdate");for(const n of s){if(e==="beta"&&n.version.includes("beta"))return{releaseUrl:n.download,version:n.version,source:"api"};if(e==="latest"&&!n.version.includes("beta"))return{releaseUrl:n.download,version:n.version,source:"api"};if(n.version.substring(0,e.length)===e)return{releaseUrl:n.download,version:n.version,source:"api"}}return{releaseUrl:`https://wordpress.org/wordpress-${e}.zip`,version:e,source:"inferred"}}const pp=async(e,t,s,n)=>{let o=null;if(e.match(/^(\d+\.\d+)(?:\.\d+)?$/))o=e;else if(e.match(/^(\d.\d(.\d)?)-(beta|rc|alpha|nightly).*$/i)){if(s)o=s;else{let i=await Ss("beta");i.source!=="api"&&(i=await Ss("latest")),o=i.version}o=o.replace(/^(\d.\d)(.\d+)/i,"$1").replace(/(rc|beta).*$/i,"RC")}else n?o=n:o=(await Ss("latest")).version;if(!o)throw new Error(`WordPress version ${e} is not supported by the setSiteLanguage step`);return`https://downloads.wordpress.org/translation/core/${o}/${t}.zip`},ca=async(e,{language:t},s)=>{s==null||s.tracker.setCaption((s==null?void 0:s.initialCaption)||"Translating"),await e.defineConstant("WPLANG",t);const n=await e.documentRoot,o=(await e.run({code:`<?php
			require '${n}/wp-includes/version.php';
			echo $wp_version;
		`})).text,i=[{url:await pp(o,t),type:"core"}],p=(await e.run({code:`<?php
		require_once('${n}/wp-load.php');
		require_once('${n}/wp-admin/includes/plugin.php');
		echo json_encode(
			array_values(
				array_map(
					function($plugin) {
						return [
							'slug'    => $plugin['TextDomain'],
							'version' => $plugin['Version']
						];
					},
					array_filter(
						get_plugins(),
						function($plugin) {
							return !empty($plugin['TextDomain']);
						}
					)
				)
			)
		);`})).json;for(const{slug:v,version:w}of p)i.push({url:`https://downloads.wordpress.org/translation/plugin/${v}/${w}/${t}.zip`,type:"plugin"});const u=(await e.run({code:`<?php
		require_once('${n}/wp-load.php');
		require_once('${n}/wp-admin/includes/theme.php');
		echo json_encode(
			array_values(
				array_map(
					function($theme) {
						return [
							'slug'    => $theme->get('TextDomain'),
							'version' => $theme->get('Version')
						];
					},
					wp_get_themes()
				)
			)
		);`})).json;for(const{slug:v,version:w}of u)i.push({url:`https://downloads.wordpress.org/translation/theme/${v}/${w}/${t}.zip`,type:"theme"});await e.isDir(`${n}/wp-content/languages/plugins`)||await e.mkdir(`${n}/wp-content/languages/plugins`),await e.isDir(`${n}/wp-content/languages/themes`)||await e.mkdir(`${n}/wp-content/languages/themes`);const d=new zn({concurrency:5}),b=i.map(({url:v,type:w})=>d.run(async()=>{try{const L=await fetch(v);if(!L.ok)throw new Error(`Failed to download translations for ${w}: ${L.statusText}`);let E=`${n}/wp-content/languages`;w==="plugin"?E+="/plugins":w==="theme"&&(E+="/themes"),await ra(e,new File([await L.blob()],`${t}-${w}.zip`),E)}catch(L){if(w==="core")throw new Error(`Failed to download translations for WordPress. Please check if the language code ${t} is correct. You can find all available languages and translations on https://translate.wordpress.org/.`);xe.warn(`Error downloading translations for ${w}: ${L}`)}}));await Promise.all(b)},fp=Object.freeze(Object.defineProperty({__proto__:null,activatePlugin:fi,activateTheme:li,cp:Gn,defineSiteUrl:gi,defineWpConfigConsts:ps,enableMultisite:Zn,exportWXR:ia,importThemeStarterContent:wi,importWordPressFiles:sa,importWxr:ta,installPlugin:aa,installTheme:oa,login:pa,mkdir:Xn,mv:Qn,request:Un,resetData:fa,rm:ui,rmdir:Yn,runPHP:qn,runPHPWithOptions:In,runSql:Vn,runWpInstallationWizard:la,setSiteLanguage:ca,setSiteOptions:di,unzip:us,updateUserMeta:Kn,wpCLI:mi,writeFile:Cr,writeFiles:ea,zipWpContent:ua},Symbol.toStringTag,{value:"Module"})),lp=5*1024*1024;function up(e,t){const s=e.headers.get("content-length")||"",n=parseInt(s,10)||lp;function o(i,r){t(new CustomEvent("progress",{detail:{loaded:i,total:r}}))}return new Response(new ReadableStream({async start(i){if(!e.body){i.close();return}const r=e.body.getReader();let p=0;for(;;)try{const{done:m,value:u}=await r.read();if(u&&(p+=u.byteLength),m){o(p,p),i.close();break}else o(p,n),i.enqueue(u)}catch(m){xe.error({e:m}),i.error(m);break}}}),{status:e.status,statusText:e.statusText,headers:e.headers})}const ks=1e-5;class ds extends EventTarget{constructor({weight:t=1,caption:s="",fillTime:n=4}={}){super(),this._selfWeight=1,this._selfDone=!1,this._selfProgress=0,this._selfCaption="",this._isFilling=!1,this._subTrackers=[],this._weight=t,this._selfCaption=s,this._fillTime=n}stage(t,s=""){if(t||(t=this._selfWeight),this._selfWeight-t<-ks)throw new Error(`Cannot add a stage with weight ${t} as the total weight of registered stages would exceed 1.`);this._selfWeight-=t;const n=new ds({caption:s,weight:t,fillTime:this._fillTime});return this._subTrackers.push(n),n.addEventListener("progress",()=>this.notifyProgress()),n.addEventListener("done",()=>{this.done&&this.notifyDone()}),n}fillSlowly({stopBeforeFinishing:t=!0}={}){if(this._isFilling)return;this._isFilling=!0;const s=100,n=this._fillTime/s;this._fillInterval=setInterval(()=>{this.set(this._selfProgress+1),t&&this._selfProgress>=99&&clearInterval(this._fillInterval)},n)}set(t){this._selfProgress=Math.min(t,100),this.notifyProgress(),this._selfProgress+ks>=100&&this.finish()}finish(){this._fillInterval&&clearInterval(this._fillInterval),this._selfDone=!0,this._selfProgress=100,this._isFilling=!1,this._fillInterval=void 0,this.notifyProgress(),this.notifyDone()}get caption(){for(let t=this._subTrackers.length-1;t>=0;t--)if(!this._subTrackers[t].done){const s=this._subTrackers[t].caption;if(s)return s}return this._selfCaption}setCaption(t){this._selfCaption=t,this.notifyProgress()}get done(){return this.progress+ks>=100}get progress(){if(this._selfDone)return 100;const t=this._subTrackers.reduce((s,n)=>s+n.progress*n.weight,this._selfProgress*this._selfWeight);return Math.round(t*1e4)/1e4}get weight(){return this._weight}get observer(){return this._progressObserver||(this._progressObserver=t=>{this.set(t)}),this._progressObserver}get loadingListener(){return this._loadingListener||(this._loadingListener=t=>{this.set(t.detail.loaded/t.detail.total*100)}),this._loadingListener}pipe(t){t.setProgress({progress:this.progress,caption:this.caption}),this.addEventListener("progress",s=>{t.setProgress({progress:s.detail.progress,caption:s.detail.caption})}),this.addEventListener("done",()=>{t.setLoaded()})}addEventListener(t,s){super.addEventListener(t,s)}removeEventListener(t,s){super.removeEventListener(t,s)}notifyProgress(){const t=this;this.dispatchEvent(new CustomEvent("progress",{detail:{get progress(){return t.progress},get caption(){return t.caption}}}))}notifyDone(){this.dispatchEvent(new CustomEvent("done"))}}function cp(e){let t=[e];return{next(){return Promise.resolve({done:t.length===0,value:t.pop()})},return(){return t=[],{}},[Symbol.asyncIterator](){return this}}}function da(e){return e[Symbol.asyncIterator]?e[Symbol.asyncIterator]():e[Symbol.iterator]?e[Symbol.iterator]():e.next?e:cp(e)}class ha{constructor(t){if(typeof Buffer>"u")throw new Error("Missing Buffer dependency");this.stream=da(t),this.buffer=null,this.cursor=0,this.undoCursor=0,this.started=!1,this._ended=!1,this._discardedBytes=0}eof(){return this._ended&&this.cursor===this.buffer.length}tell(){return this._discardedBytes+this.cursor}async byte(){if(!this.eof()&&(this.started||await this._init(),!(this.cursor===this.buffer.length&&(await this._loadnext(),this._ended))))return this._moveCursor(1),this.buffer[this.undoCursor]}async chunk(){if(!this.eof()&&(this.started||await this._init(),!(this.cursor===this.buffer.length&&(await this._loadnext(),this._ended))))return this._moveCursor(this.buffer.length),this.buffer.slice(this.undoCursor,this.cursor)}async read(t){if(!this.eof())return this.started||await this._init(),this.cursor+t>this.buffer.length&&(this._trim(),await this._accumulate(t)),this._moveCursor(t),this.buffer.slice(this.undoCursor,this.cursor)}async skip(t){this.eof()||(this.started||await this._init(),this.cursor+t>this.buffer.length&&(this._trim(),await this._accumulate(t)),this._moveCursor(t))}async undo(){this.cursor=this.undoCursor}async _next(){this.started=!0;let{done:t,value:s}=await this.stream.next();return t&&(this._ended=!0,!s)?Buffer.alloc(0):(s&&(s=Buffer.from(s)),s)}_trim(){this.buffer=this.buffer.slice(this.undoCursor),this.cursor-=this.undoCursor,this._discardedBytes+=this.undoCursor,this.undoCursor=0}_moveCursor(t){this.undoCursor=this.cursor,this.cursor+=t,this.cursor>this.buffer.length&&(this.cursor=this.buffer.length)}async _accumulate(t){if(this._ended)return;const s=[this.buffer];for(;this.cursor+t>dp(s);){const n=await this._next();if(this._ended)break;s.push(n)}this.buffer=Buffer.concat(s)}async _loadnext(){this._discardedBytes+=this.buffer.length,this.undoCursor=0,this.cursor=0,this.buffer=await this._next()}async _init(){this.buffer=await this._next()}}function dp(e){return e.reduce((t,s)=>t+s.length,0)}function hp(e,t){const s=t.toString(16);return"0".repeat(e-s.length)+s}class Ce{static flush(){return Buffer.from("0000","utf8")}static delim(){return Buffer.from("0001","utf8")}static encode(t){typeof t=="string"&&(t=Buffer.from(t));const s=t.length+4,n=hp(4,s);return Buffer.concat([Buffer.from(n,"utf8"),t])}static streamReader(t){const s=new ha(t);return async function(){try{let o=await s.read(4);if(o==null)return!0;if(o=parseInt(o.toString("utf8"),16),o===0||o===1)return null;const i=await s.read(o-4);return i??!0}catch(o){return t.error=o,!0}}}}class ir extends Error{constructor(t){super(t),this.caller=""}toJSON(){return{code:this.code,data:this.data,caller:this.caller,message:this.message,stack:this.stack}}fromJSON(t){const s=new ir(t.message);return s.code=t.code,s.data=t.data,s.caller=t.caller,s.stack=t.stack,s}get isIsomorphicGitError(){return!0}}class ve extends ir{constructor(t){super(`An internal error caused this command to fail. Please file a bug report at https://github.com/isomorphic-git/isomorphic-git/issues with this error message: ${t}`),this.code=this.name=ve.code,this.data={message:t}}}ve.code="InternalError";class hs extends ir{constructor(t){super(`The filepath "${t}" contains unsafe character sequences`),this.code=this.name=hs.code,this.data={filepath:t}}}hs.code="UnsafeFilepathError";function ma(e,t){return-(e<t)||+(e>t)}function mp(e,t){return ma(e.path,t.path)}function yp(e,t){return ma(Ii(e),Ii(t))}function Ii(e){return e.mode==="040000"?e.path+"/":e.path}function ya(e){switch(e){case"040000":return"tree";case"100644":return"blob";case"100755":return"blob";case"120000":return"blob";case"160000":return"commit"}throw new ve(`Unexpected GitTree entry mode: ${e}`)}function gp(e){const t=[];let s=0;for(;s<e.length;){const n=e.indexOf(32,s);if(n===-1)throw new ve(`GitTree: Error parsing buffer at byte location ${s}: Could not find the next space character.`);const o=e.indexOf(0,s);if(o===-1)throw new ve(`GitTree: Error parsing buffer at byte location ${s}: Could not find the next null character.`);let i=e.slice(s,n).toString("utf8");i==="40000"&&(i="040000");const r=ya(i),p=e.slice(n+1,o).toString("utf8");if(p.includes("\\")||p.includes("/"))throw new hs(p);const m=e.slice(o+1,o+21).toString("hex");s=o+21,t.push({mode:i,path:p,oid:m,type:r})}return t}function wp(e){if(typeof e=="number"&&(e=e.toString(8)),e.match(/^0?4.*/))return"040000";if(e.match(/^1006.*/))return"100644";if(e.match(/^1007.*/))return"100755";if(e.match(/^120.*/))return"120000";if(e.match(/^160.*/))return"160000";throw new ve(`Could not understand file mode: ${e}`)}function bp(e){return!e.oid&&e.sha&&(e.oid=e.sha),e.mode=wp(e.mode),e.type||(e.type=ya(e.mode)),e}class bi{constructor(t){if(Buffer.isBuffer(t))this._entries=gp(t);else if(Array.isArray(t))this._entries=t.map(bp);else throw new ve("invalid type passed to GitTree constructor");this._entries.sort(mp)}static from(t){return new bi(t)}render(){return this._entries.map(t=>`${t.mode} ${t.type} ${t.oid}    ${t.path}`).join(`
`)}toObject(){const t=[...this._entries];return t.sort(yp),Buffer.concat(t.map(s=>{const n=Buffer.from(s.mode.replace(/^0/,"")),o=Buffer.from(" "),i=Buffer.from(s.path,"utf8"),r=Buffer.from([0]),p=Buffer.from(s.oid,"hex");return Buffer.concat([n,o,i,r,p])}))}entries(){return this._entries}*[Symbol.iterator](){for(const t of this._entries)yield t}}function Xs({name:e,email:t,timestamp:s,timezoneOffset:n}){return n=vp(n),`${e} <${t}> ${s} ${n}`}function vp(e){const t=Pp(Ap(e));e=Math.abs(e);const s=Math.floor(e/60);e-=s*60;let n=String(s),o=String(e);return n.length<2&&(n="0"+n),o.length<2&&(o="0"+o),(t===-1?"-":"+")+n+o}function Pp(e){return Math.sign(e)||(Object.is(e,-0)?-1:1)}function Ap(e){return e===0?e:-e}function yt(e){return e=e.replace(/\r/g,""),e=e.replace(/^\n+/,""),e=e.replace(/\n+$/,"")+`
`,e}function rs(e){const[,t,s,n,o]=e.match(/^(.*) <(.*)> (.*) (.*)$/);return{name:t,email:s,timestamp:Number(n),timezoneOffset:Ep(o)}}function Ep(e){let[,t,s,n]=e.match(/(\+|-)(\d\d)(\d\d)/);return n=(t==="+"?1:-1)*(Number(s)*60+Number(n)),Tp(n)}function Tp(e){return e===0?e:-e}class cr{constructor(t){if(typeof t=="string")this._tag=t;else if(Buffer.isBuffer(t))this._tag=t.toString("utf8");else if(typeof t=="object")this._tag=cr.render(t);else throw new ve("invalid type passed to GitAnnotatedTag constructor")}static from(t){return new cr(t)}static render(t){return`object ${t.object}
type ${t.type}
tag ${t.tag}
tagger ${Xs(t.tagger)}

${t.message}
${t.gpgsig?t.gpgsig:""}`}justHeaders(){return this._tag.slice(0,this._tag.indexOf(`

`))}message(){const t=this.withoutSignature();return t.slice(t.indexOf(`

`)+2)}parse(){return Object.assign(this.headers(),{message:this.message(),gpgsig:this.gpgsig()})}render(){return this._tag}headers(){const t=this.justHeaders().split(`
`),s=[];for(const o of t)o[0]===" "?s[s.length-1]+=`
`+o.slice(1):s.push(o);const n={};for(const o of s){const i=o.slice(0,o.indexOf(" ")),r=o.slice(o.indexOf(" ")+1);Array.isArray(n[i])?n[i].push(r):n[i]=r}return n.tagger&&(n.tagger=rs(n.tagger)),n.committer&&(n.committer=rs(n.committer)),n}withoutSignature(){const t=yt(this._tag);return t.indexOf(`
-----BEGIN PGP SIGNATURE-----`)===-1?t:t.slice(0,t.lastIndexOf(`
-----BEGIN PGP SIGNATURE-----`))}gpgsig(){if(this._tag.indexOf(`
-----BEGIN PGP SIGNATURE-----`)===-1)return;const t=this._tag.slice(this._tag.indexOf("-----BEGIN PGP SIGNATURE-----"),this._tag.indexOf("-----END PGP SIGNATURE-----")+27);return yt(t)}payload(){return this.withoutSignature()+`
`}toObject(){return Buffer.from(this._tag,"utf8")}static async sign(t,s,n){const o=t.payload();let{signature:i}=await s({payload:o,secretKey:n});i=yt(i);const r=o+i;return cr.from(r)}}function Os(e){return e.trim().split(`
`).map(t=>" "+t).join(`
`)+`
`}function Sp(e){return e.split(`
`).map(t=>t.replace(/^ /,"")).join(`
`)}class ze{constructor(t){if(typeof t=="string")this._commit=t;else if(Buffer.isBuffer(t))this._commit=t.toString("utf8");else if(typeof t=="object")this._commit=ze.render(t);else throw new ve("invalid type passed to GitCommit constructor")}static fromPayloadSignature({payload:t,signature:s}){const n=ze.justHeaders(t),o=ze.justMessage(t),i=yt(n+`
gpgsig`+Os(s)+`
`+o);return new ze(i)}static from(t){return new ze(t)}toObject(){return Buffer.from(this._commit,"utf8")}headers(){return this.parseHeaders()}message(){return ze.justMessage(this._commit)}parse(){return Object.assign({message:this.message()},this.headers())}static justMessage(t){return yt(t.slice(t.indexOf(`

`)+2))}static justHeaders(t){return t.slice(0,t.indexOf(`

`))}parseHeaders(){const t=ze.justHeaders(this._commit).split(`
`),s=[];for(const o of t)o[0]===" "?s[s.length-1]+=`
`+o.slice(1):s.push(o);const n={parent:[]};for(const o of s){const i=o.slice(0,o.indexOf(" ")),r=o.slice(o.indexOf(" ")+1);Array.isArray(n[i])?n[i].push(r):n[i]=r}return n.author&&(n.author=rs(n.author)),n.committer&&(n.committer=rs(n.committer)),n}static renderHeaders(t){let s="";if(t.tree?s+=`tree ${t.tree}
`:s+=`tree 4b825dc642cb6eb9a060e54bf8d69288fbee4904
`,t.parent){if(t.parent.length===void 0)throw new ve("commit 'parent' property should be an array");for(const i of t.parent)s+=`parent ${i}
`}const n=t.author;s+=`author ${Xs(n)}
`;const o=t.committer||t.author;return s+=`committer ${Xs(o)}
`,t.gpgsig&&(s+="gpgsig"+Os(t.gpgsig)),s}static render(t){return ze.renderHeaders(t)+`
`+yt(t.message)}render(){return this._commit}withoutSignature(){const t=yt(this._commit);if(t.indexOf(`
gpgsig`)===-1)return t;const s=t.slice(0,t.indexOf(`
gpgsig`)),n=t.slice(t.indexOf(`-----END PGP SIGNATURE-----
`)+28);return yt(s+`
`+n)}isolateSignature(){const t=this._commit.slice(this._commit.indexOf("-----BEGIN PGP SIGNATURE-----"),this._commit.indexOf("-----END PGP SIGNATURE-----")+27);return Sp(t)}static async sign(t,s,n){const o=t.withoutSignature(),i=ze.justMessage(t._commit);let{signature:r}=await s({payload:o,secretKey:n});r=yt(r);const m=ze.justHeaders(t._commit)+`
gpgsig`+Os(r)+`
`+i;return ze.from(m)}}var ga={};/*! crc32.js (C) 2014-present SheetJS -- http://sheetjs.com */(function(e){(function(t){t(typeof DO_NOT_EXPORT_CRC>"u"?e:{})})(function(t){t.version="1.2.2";function s(){for(var O=0,x=new Array(256),T=0;T!=256;++T)O=T,O=O&1?-306674912^O>>>1:O>>>1,O=O&1?-306674912^O>>>1:O>>>1,O=O&1?-306674912^O>>>1:O>>>1,O=O&1?-306674912^O>>>1:O>>>1,O=O&1?-306674912^O>>>1:O>>>1,O=O&1?-306674912^O>>>1:O>>>1,O=O&1?-306674912^O>>>1:O>>>1,O=O&1?-306674912^O>>>1:O>>>1,x[T]=O;return typeof Int32Array<"u"?new Int32Array(x):x}var n=s();function o(O){var x=0,T=0,k=0,I=typeof Int32Array<"u"?new Int32Array(4096):new Array(4096);for(k=0;k!=256;++k)I[k]=O[k];for(k=0;k!=256;++k)for(T=O[k],x=256+k;x<4096;x+=256)T=I[x]=T>>>8^O[T&255];var j=[];for(k=1;k!=16;++k)j[k-1]=typeof Int32Array<"u"?I.subarray(k*256,k*256+256):I.slice(k*256,k*256+256);return j}var i=o(n),r=i[0],p=i[1],m=i[2],u=i[3],d=i[4],b=i[5],v=i[6],w=i[7],L=i[8],E=i[9],z=i[10],N=i[11],U=i[12],B=i[13],W=i[14];function q(O,x){for(var T=x^-1,k=0,I=O.length;k<I;)T=T>>>8^n[(T^O.charCodeAt(k++))&255];return~T}function P(O,x){for(var T=x^-1,k=O.length-15,I=0;I<k;)T=W[O[I++]^T&255]^B[O[I++]^T>>8&255]^U[O[I++]^T>>16&255]^N[O[I++]^T>>>24]^z[O[I++]]^E[O[I++]]^L[O[I++]]^w[O[I++]]^v[O[I++]]^b[O[I++]]^d[O[I++]]^u[O[I++]]^m[O[I++]]^p[O[I++]]^r[O[I++]]^n[O[I++]];for(k+=15;I<k;)T=T>>>8^n[(T^O[I++])&255];return~T}function F(O,x){for(var T=x^-1,k=0,I=O.length,j=0,D=0;k<I;)j=O.charCodeAt(k++),j<128?T=T>>>8^n[(T^j)&255]:j<2048?(T=T>>>8^n[(T^(192|j>>6&31))&255],T=T>>>8^n[(T^(128|j&63))&255]):j>=55296&&j<57344?(j=(j&1023)+64,D=O.charCodeAt(k++)&1023,T=T>>>8^n[(T^(240|j>>8&7))&255],T=T>>>8^n[(T^(128|j>>2&63))&255],T=T>>>8^n[(T^(128|D>>6&15|(j&3)<<4))&255],T=T>>>8^n[(T^(128|D&63))&255]):(T=T>>>8^n[(T^(224|j>>12&15))&255],T=T>>>8^n[(T^(128|j>>6&63))&255],T=T>>>8^n[(T^(128|j&63))&255]);return~T}t.table=n,t.bstr=q,t.buf=P,t.str=F})})(ga);const kp=yi(ga);class Op{static wrap({type:t,object:s}){return Buffer.concat([Buffer.from(`${t} ${s.byteLength.toString()}\0`),Buffer.from(s)])}static unwrap(t){const s=t.indexOf(32),n=t.indexOf(0),o=t.slice(0,s).toString("utf8"),i=t.slice(s+1,n).toString("utf8"),r=t.length-(n+1);if(parseInt(i)!==r)throw new ve(`Length mismatch: expected ${i} bytes but got ${r} instead.`);return{type:o,object:Buffer.from(t.slice(n+1))}}}class Dt{constructor(t){this.buffer=t,this._start=0}eof(){return this._start>=this.buffer.length}tell(){return this._start}seek(t){this._start=t}slice(t){const s=this.buffer.slice(this._start,this._start+t);return this._start+=t,s}toString(t,s){const n=this.buffer.toString(t,this._start,this._start+s);return this._start+=s,n}write(t,s,n){const o=this.buffer.write(t,this._start,s,n);return this._start+=s,o}copy(t,s,n){const o=t.copy(this.buffer,this._start,s,n);return this._start+=o,o}readUInt8(){const t=this.buffer.readUInt8(this._start);return this._start+=1,t}writeUInt8(t){const s=this.buffer.writeUInt8(t,this._start);return this._start+=1,s}readUInt16BE(){const t=this.buffer.readUInt16BE(this._start);return this._start+=2,t}writeUInt16BE(t){const s=this.buffer.writeUInt16BE(t,this._start);return this._start+=2,s}readUInt32BE(){const t=this.buffer.readUInt32BE(this._start);return this._start+=4,t}writeUInt32BE(t){const s=this.buffer.writeUInt32BE(t,this._start);return this._start+=4,s}}function Cp(e,t){const s=new Dt(e),n=Ni(s);if(n!==t.byteLength)throw new ve(`applyDelta expected source buffer to be ${n} bytes but the provided buffer was ${t.length} bytes`);const o=Ni(s);let i;const r=Wi(s,t);if(r.byteLength===o)i=r;else{i=Buffer.alloc(o);const p=new Dt(i);for(p.copy(r);!s.eof();)p.copy(Wi(s,t));const m=p.tell();if(o!==m)throw new ve(`applyDelta expected target buffer to be ${o} bytes but the resulting buffer was ${m} bytes`)}return i}function Ni(e){let t=0,s=0,n=null;do n=e.readUInt8(),t|=(n&127)<<s,s+=7;while(n&128);return t}function zi(e,t,s){let n=0,o=0;for(;s--;)t&1&&(n|=e.readUInt8()<<o),t>>=1,o+=8;return n}function Wi(e,t){const s=e.readUInt8(),n=128,o=15,i=112;if(s&n){const r=zi(e,s&o,4);let p=zi(e,(s&i)>>4,3);return p===0&&(p=65536),t.slice(r,r+p)}else return e.slice(s)}var bt={};(function(e){var t=typeof Uint8Array<"u"&&typeof Uint16Array<"u"&&typeof Int32Array<"u";function s(i,r){return Object.prototype.hasOwnProperty.call(i,r)}e.assign=function(i){for(var r=Array.prototype.slice.call(arguments,1);r.length;){var p=r.shift();if(p){if(typeof p!="object")throw new TypeError(p+"must be non-object");for(var m in p)s(p,m)&&(i[m]=p[m])}}return i},e.shrinkBuf=function(i,r){return i.length===r?i:i.subarray?i.subarray(0,r):(i.length=r,i)};var n={arraySet:function(i,r,p,m,u){if(r.subarray&&i.subarray){i.set(r.subarray(p,p+m),u);return}for(var d=0;d<m;d++)i[u+d]=r[p+d]},flattenChunks:function(i){var r,p,m,u,d,b;for(m=0,r=0,p=i.length;r<p;r++)m+=i[r].length;for(b=new Uint8Array(m),u=0,r=0,p=i.length;r<p;r++)d=i[r],b.set(d,u),u+=d.length;return b}},o={arraySet:function(i,r,p,m,u){for(var d=0;d<m;d++)i[u+d]=r[p+d]},flattenChunks:function(i){return[].concat.apply([],i)}};e.setTyped=function(i){i?(e.Buf8=Uint8Array,e.Buf16=Uint16Array,e.Buf32=Int32Array,e.assign(e,n)):(e.Buf8=Array,e.Buf16=Array,e.Buf32=Array,e.assign(e,o))},e.setTyped(t)})(bt);var xr={},ut={},nr={},xp=bt,Hp=4,Vi=0,Ui=1,Dp=2;function ar(e){for(var t=e.length;--t>=0;)e[t]=0}var Lp=0,wa=1,Bp=2,Rp=3,jp=258,vi=29,Hr=256,br=Hr+1+vi,tr=30,Pi=19,ba=2*br+1,Bt=15,Cs=16,Fp=7,Ai=256,va=16,Pa=17,Aa=18,Ys=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],Zr=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],qp=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],Ea=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],Ip=512,gt=new Array((br+2)*2);ar(gt);var dr=new Array(tr*2);ar(dr);var vr=new Array(Ip);ar(vr);var Pr=new Array(jp-Rp+1);ar(Pr);var Ei=new Array(vi);ar(Ei);var ss=new Array(tr);ar(ss);function xs(e,t,s,n,o){this.static_tree=e,this.extra_bits=t,this.extra_base=s,this.elems=n,this.max_length=o,this.has_stree=e&&e.length}var Ta,Sa,ka;function Hs(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function Oa(e){return e<256?vr[e]:vr[256+(e>>>7)]}function Ar(e,t){e.pending_buf[e.pending++]=t&255,e.pending_buf[e.pending++]=t>>>8&255}function qe(e,t,s){e.bi_valid>Cs-s?(e.bi_buf|=t<<e.bi_valid&65535,Ar(e,e.bi_buf),e.bi_buf=t>>Cs-e.bi_valid,e.bi_valid+=s-Cs):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=s)}function pt(e,t,s){qe(e,s[t*2],s[t*2+1])}function Ca(e,t){var s=0;do s|=e&1,e>>>=1,s<<=1;while(--t>0);return s>>>1}function Np(e){e.bi_valid===16?(Ar(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=e.bi_buf&255,e.bi_buf>>=8,e.bi_valid-=8)}function zp(e,t){var s=t.dyn_tree,n=t.max_code,o=t.stat_desc.static_tree,i=t.stat_desc.has_stree,r=t.stat_desc.extra_bits,p=t.stat_desc.extra_base,m=t.stat_desc.max_length,u,d,b,v,w,L,E=0;for(v=0;v<=Bt;v++)e.bl_count[v]=0;for(s[e.heap[e.heap_max]*2+1]=0,u=e.heap_max+1;u<ba;u++)d=e.heap[u],v=s[s[d*2+1]*2+1]+1,v>m&&(v=m,E++),s[d*2+1]=v,!(d>n)&&(e.bl_count[v]++,w=0,d>=p&&(w=r[d-p]),L=s[d*2],e.opt_len+=L*(v+w),i&&(e.static_len+=L*(o[d*2+1]+w)));if(E!==0){do{for(v=m-1;e.bl_count[v]===0;)v--;e.bl_count[v]--,e.bl_count[v+1]+=2,e.bl_count[m]--,E-=2}while(E>0);for(v=m;v!==0;v--)for(d=e.bl_count[v];d!==0;)b=e.heap[--u],!(b>n)&&(s[b*2+1]!==v&&(e.opt_len+=(v-s[b*2+1])*s[b*2],s[b*2+1]=v),d--)}}function xa(e,t,s){var n=new Array(Bt+1),o=0,i,r;for(i=1;i<=Bt;i++)n[i]=o=o+s[i-1]<<1;for(r=0;r<=t;r++){var p=e[r*2+1];p!==0&&(e[r*2]=Ca(n[p]++,p))}}function Wp(){var e,t,s,n,o,i=new Array(Bt+1);for(s=0,n=0;n<vi-1;n++)for(Ei[n]=s,e=0;e<1<<Ys[n];e++)Pr[s++]=n;for(Pr[s-1]=n,o=0,n=0;n<16;n++)for(ss[n]=o,e=0;e<1<<Zr[n];e++)vr[o++]=n;for(o>>=7;n<tr;n++)for(ss[n]=o<<7,e=0;e<1<<Zr[n]-7;e++)vr[256+o++]=n;for(t=0;t<=Bt;t++)i[t]=0;for(e=0;e<=143;)gt[e*2+1]=8,e++,i[8]++;for(;e<=255;)gt[e*2+1]=9,e++,i[9]++;for(;e<=279;)gt[e*2+1]=7,e++,i[7]++;for(;e<=287;)gt[e*2+1]=8,e++,i[8]++;for(xa(gt,br+1,i),e=0;e<tr;e++)dr[e*2+1]=5,dr[e*2]=Ca(e,5);Ta=new xs(gt,Ys,Hr+1,br,Bt),Sa=new xs(dr,Zr,0,tr,Bt),ka=new xs(new Array(0),qp,0,Pi,Fp)}function Ha(e){var t;for(t=0;t<br;t++)e.dyn_ltree[t*2]=0;for(t=0;t<tr;t++)e.dyn_dtree[t*2]=0;for(t=0;t<Pi;t++)e.bl_tree[t*2]=0;e.dyn_ltree[Ai*2]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function Da(e){e.bi_valid>8?Ar(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function Vp(e,t,s,n){Da(e),n&&(Ar(e,s),Ar(e,~s)),xp.arraySet(e.pending_buf,e.window,t,s,e.pending),e.pending+=s}function Ki(e,t,s,n){var o=t*2,i=s*2;return e[o]<e[i]||e[o]===e[i]&&n[t]<=n[s]}function Ds(e,t,s){for(var n=e.heap[s],o=s<<1;o<=e.heap_len&&(o<e.heap_len&&Ki(t,e.heap[o+1],e.heap[o],e.depth)&&o++,!Ki(t,n,e.heap[o],e.depth));)e.heap[s]=e.heap[o],s=o,o<<=1;e.heap[s]=n}function Mi(e,t,s){var n,o,i=0,r,p;if(e.last_lit!==0)do n=e.pending_buf[e.d_buf+i*2]<<8|e.pending_buf[e.d_buf+i*2+1],o=e.pending_buf[e.l_buf+i],i++,n===0?pt(e,o,t):(r=Pr[o],pt(e,r+Hr+1,t),p=Ys[r],p!==0&&(o-=Ei[r],qe(e,o,p)),n--,r=Oa(n),pt(e,r,s),p=Zr[r],p!==0&&(n-=ss[r],qe(e,n,p)));while(i<e.last_lit);pt(e,Ai,t)}function Js(e,t){var s=t.dyn_tree,n=t.stat_desc.static_tree,o=t.stat_desc.has_stree,i=t.stat_desc.elems,r,p,m=-1,u;for(e.heap_len=0,e.heap_max=ba,r=0;r<i;r++)s[r*2]!==0?(e.heap[++e.heap_len]=m=r,e.depth[r]=0):s[r*2+1]=0;for(;e.heap_len<2;)u=e.heap[++e.heap_len]=m<2?++m:0,s[u*2]=1,e.depth[u]=0,e.opt_len--,o&&(e.static_len-=n[u*2+1]);for(t.max_code=m,r=e.heap_len>>1;r>=1;r--)Ds(e,s,r);u=i;do r=e.heap[1],e.heap[1]=e.heap[e.heap_len--],Ds(e,s,1),p=e.heap[1],e.heap[--e.heap_max]=r,e.heap[--e.heap_max]=p,s[u*2]=s[r*2]+s[p*2],e.depth[u]=(e.depth[r]>=e.depth[p]?e.depth[r]:e.depth[p])+1,s[r*2+1]=s[p*2+1]=u,e.heap[1]=u++,Ds(e,s,1);while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],zp(e,t),xa(s,m,e.bl_count)}function Zi(e,t,s){var n,o=-1,i,r=t[0*2+1],p=0,m=7,u=4;for(r===0&&(m=138,u=3),t[(s+1)*2+1]=65535,n=0;n<=s;n++)i=r,r=t[(n+1)*2+1],!(++p<m&&i===r)&&(p<u?e.bl_tree[i*2]+=p:i!==0?(i!==o&&e.bl_tree[i*2]++,e.bl_tree[va*2]++):p<=10?e.bl_tree[Pa*2]++:e.bl_tree[Aa*2]++,p=0,o=i,r===0?(m=138,u=3):i===r?(m=6,u=3):(m=7,u=4))}function Gi(e,t,s){var n,o=-1,i,r=t[0*2+1],p=0,m=7,u=4;for(r===0&&(m=138,u=3),n=0;n<=s;n++)if(i=r,r=t[(n+1)*2+1],!(++p<m&&i===r)){if(p<u)do pt(e,i,e.bl_tree);while(--p!==0);else i!==0?(i!==o&&(pt(e,i,e.bl_tree),p--),pt(e,va,e.bl_tree),qe(e,p-3,2)):p<=10?(pt(e,Pa,e.bl_tree),qe(e,p-3,3)):(pt(e,Aa,e.bl_tree),qe(e,p-11,7));p=0,o=i,r===0?(m=138,u=3):i===r?(m=6,u=3):(m=7,u=4)}}function Up(e){var t;for(Zi(e,e.dyn_ltree,e.l_desc.max_code),Zi(e,e.dyn_dtree,e.d_desc.max_code),Js(e,e.bl_desc),t=Pi-1;t>=3&&e.bl_tree[Ea[t]*2+1]===0;t--);return e.opt_len+=3*(t+1)+5+5+4,t}function Kp(e,t,s,n){var o;for(qe(e,t-257,5),qe(e,s-1,5),qe(e,n-4,4),o=0;o<n;o++)qe(e,e.bl_tree[Ea[o]*2+1],3);Gi(e,e.dyn_ltree,t-1),Gi(e,e.dyn_dtree,s-1)}function Mp(e){var t=4093624447,s;for(s=0;s<=31;s++,t>>>=1)if(t&1&&e.dyn_ltree[s*2]!==0)return Vi;if(e.dyn_ltree[9*2]!==0||e.dyn_ltree[10*2]!==0||e.dyn_ltree[13*2]!==0)return Ui;for(s=32;s<Hr;s++)if(e.dyn_ltree[s*2]!==0)return Ui;return Vi}var Qi=!1;function Zp(e){Qi||(Wp(),Qi=!0),e.l_desc=new Hs(e.dyn_ltree,Ta),e.d_desc=new Hs(e.dyn_dtree,Sa),e.bl_desc=new Hs(e.bl_tree,ka),e.bi_buf=0,e.bi_valid=0,Ha(e)}function La(e,t,s,n){qe(e,(Lp<<1)+(n?1:0),3),Vp(e,t,s,!0)}function Gp(e){qe(e,wa<<1,3),pt(e,Ai,gt),Np(e)}function Qp(e,t,s,n){var o,i,r=0;e.level>0?(e.strm.data_type===Dp&&(e.strm.data_type=Mp(e)),Js(e,e.l_desc),Js(e,e.d_desc),r=Up(e),o=e.opt_len+3+7>>>3,i=e.static_len+3+7>>>3,i<=o&&(o=i)):o=i=s+5,s+4<=o&&t!==-1?La(e,t,s,n):e.strategy===Hp||i===o?(qe(e,(wa<<1)+(n?1:0),3),Mi(e,gt,dr)):(qe(e,(Bp<<1)+(n?1:0),3),Kp(e,e.l_desc.max_code+1,e.d_desc.max_code+1,r+1),Mi(e,e.dyn_ltree,e.dyn_dtree)),Ha(e),n&&Da(e)}function Xp(e,t,s){return e.pending_buf[e.d_buf+e.last_lit*2]=t>>>8&255,e.pending_buf[e.d_buf+e.last_lit*2+1]=t&255,e.pending_buf[e.l_buf+e.last_lit]=s&255,e.last_lit++,t===0?e.dyn_ltree[s*2]++:(e.matches++,t--,e.dyn_ltree[(Pr[s]+Hr+1)*2]++,e.dyn_dtree[Oa(t)*2]++),e.last_lit===e.lit_bufsize-1}nr._tr_init=Zp;nr._tr_stored_block=La;nr._tr_flush_block=Qp;nr._tr_tally=Xp;nr._tr_align=Gp;function Yp(e,t,s,n){for(var o=e&65535|0,i=e>>>16&65535|0,r=0;s!==0;){r=s>2e3?2e3:s,s-=r;do o=o+t[n++]|0,i=i+o|0;while(--r);o%=65521,i%=65521}return o|i<<16|0}var Ba=Yp;function Jp(){for(var e,t=[],s=0;s<256;s++){e=s;for(var n=0;n<8;n++)e=e&1?3988292384^e>>>1:e>>>1;t[s]=e}return t}var _p=Jp();function $p(e,t,s,n){var o=_p,i=n+s;e^=-1;for(var r=n;r<i;r++)e=e>>>8^o[(e^t[r])&255];return e^-1}var Ra=$p,Ti={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},je=bt,Ze=nr,ja=Ba,Tt=Ra,ef=Ti,Vt=0,tf=1,rf=3,xt=4,Xi=5,ft=0,Yi=1,Ge=-2,sf=-3,Ls=-5,nf=-1,af=1,Ir=2,of=3,pf=4,ff=0,lf=2,ms=8,uf=9,cf=15,df=8,hf=29,mf=256,_s=mf+1+hf,yf=30,gf=19,wf=2*_s+1,bf=15,oe=3,Ot=258,et=Ot+oe+1,vf=32,ys=42,$s=69,Gr=73,Qr=91,Xr=103,Rt=113,ur=666,ke=1,Dr=2,qt=3,or=4,Pf=3;function Ct(e,t){return e.msg=ef[t],t}function Ji(e){return(e<<1)-(e>4?9:0)}function kt(e){for(var t=e.length;--t>=0;)e[t]=0}function St(e){var t=e.state,s=t.pending;s>e.avail_out&&(s=e.avail_out),s!==0&&(je.arraySet(e.output,t.pending_buf,t.pending_out,s,e.next_out),e.next_out+=s,t.pending_out+=s,e.total_out+=s,e.avail_out-=s,t.pending-=s,t.pending===0&&(t.pending_out=0))}function De(e,t){Ze._tr_flush_block(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,St(e.strm)}function fe(e,t){e.pending_buf[e.pending++]=t}function lr(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=t&255}function Af(e,t,s,n){var o=e.avail_in;return o>n&&(o=n),o===0?0:(e.avail_in-=o,je.arraySet(t,e.input,e.next_in,o,s),e.state.wrap===1?e.adler=ja(e.adler,t,o,s):e.state.wrap===2&&(e.adler=Tt(e.adler,t,o,s)),e.next_in+=o,e.total_in+=o,o)}function Fa(e,t){var s=e.max_chain_length,n=e.strstart,o,i,r=e.prev_length,p=e.nice_match,m=e.strstart>e.w_size-et?e.strstart-(e.w_size-et):0,u=e.window,d=e.w_mask,b=e.prev,v=e.strstart+Ot,w=u[n+r-1],L=u[n+r];e.prev_length>=e.good_match&&(s>>=2),p>e.lookahead&&(p=e.lookahead);do if(o=t,!(u[o+r]!==L||u[o+r-1]!==w||u[o]!==u[n]||u[++o]!==u[n+1])){n+=2,o++;do;while(u[++n]===u[++o]&&u[++n]===u[++o]&&u[++n]===u[++o]&&u[++n]===u[++o]&&u[++n]===u[++o]&&u[++n]===u[++o]&&u[++n]===u[++o]&&u[++n]===u[++o]&&n<v);if(i=Ot-(v-n),n=v-Ot,i>r){if(e.match_start=t,r=i,i>=p)break;w=u[n+r-1],L=u[n+r]}}while((t=b[t&d])>m&&--s!==0);return r<=e.lookahead?r:e.lookahead}function It(e){var t=e.w_size,s,n,o,i,r;do{if(i=e.window_size-e.lookahead-e.strstart,e.strstart>=t+(t-et)){je.arraySet(e.window,e.window,t,t,0),e.match_start-=t,e.strstart-=t,e.block_start-=t,n=e.hash_size,s=n;do o=e.head[--s],e.head[s]=o>=t?o-t:0;while(--n);n=t,s=n;do o=e.prev[--s],e.prev[s]=o>=t?o-t:0;while(--n);i+=t}if(e.strm.avail_in===0)break;if(n=Af(e.strm,e.window,e.strstart+e.lookahead,i),e.lookahead+=n,e.lookahead+e.insert>=oe)for(r=e.strstart-e.insert,e.ins_h=e.window[r],e.ins_h=(e.ins_h<<e.hash_shift^e.window[r+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[r+oe-1])&e.hash_mask,e.prev[r&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=r,r++,e.insert--,!(e.lookahead+e.insert<oe)););}while(e.lookahead<et&&e.strm.avail_in!==0)}function Ef(e,t){var s=65535;for(s>e.pending_buf_size-5&&(s=e.pending_buf_size-5);;){if(e.lookahead<=1){if(It(e),e.lookahead===0&&t===Vt)return ke;if(e.lookahead===0)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+s;if((e.strstart===0||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,De(e,!1),e.strm.avail_out===0)||e.strstart-e.block_start>=e.w_size-et&&(De(e,!1),e.strm.avail_out===0))return ke}return e.insert=0,t===xt?(De(e,!0),e.strm.avail_out===0?qt:or):(e.strstart>e.block_start&&(De(e,!1),e.strm.avail_out===0),ke)}function Bs(e,t){for(var s,n;;){if(e.lookahead<et){if(It(e),e.lookahead<et&&t===Vt)return ke;if(e.lookahead===0)break}if(s=0,e.lookahead>=oe&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+oe-1])&e.hash_mask,s=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),s!==0&&e.strstart-s<=e.w_size-et&&(e.match_length=Fa(e,s)),e.match_length>=oe)if(n=Ze._tr_tally(e,e.strstart-e.match_start,e.match_length-oe),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=oe){e.match_length--;do e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+oe-1])&e.hash_mask,s=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart;while(--e.match_length!==0);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else n=Ze._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(De(e,!1),e.strm.avail_out===0))return ke}return e.insert=e.strstart<oe-1?e.strstart:oe-1,t===xt?(De(e,!0),e.strm.avail_out===0?qt:or):e.last_lit&&(De(e,!1),e.strm.avail_out===0)?ke:Dr}function Xt(e,t){for(var s,n,o;;){if(e.lookahead<et){if(It(e),e.lookahead<et&&t===Vt)return ke;if(e.lookahead===0)break}if(s=0,e.lookahead>=oe&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+oe-1])&e.hash_mask,s=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=oe-1,s!==0&&e.prev_length<e.max_lazy_match&&e.strstart-s<=e.w_size-et&&(e.match_length=Fa(e,s),e.match_length<=5&&(e.strategy===af||e.match_length===oe&&e.strstart-e.match_start>4096)&&(e.match_length=oe-1)),e.prev_length>=oe&&e.match_length<=e.prev_length){o=e.strstart+e.lookahead-oe,n=Ze._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-oe),e.lookahead-=e.prev_length-1,e.prev_length-=2;do++e.strstart<=o&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+oe-1])&e.hash_mask,s=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart);while(--e.prev_length!==0);if(e.match_available=0,e.match_length=oe-1,e.strstart++,n&&(De(e,!1),e.strm.avail_out===0))return ke}else if(e.match_available){if(n=Ze._tr_tally(e,0,e.window[e.strstart-1]),n&&De(e,!1),e.strstart++,e.lookahead--,e.strm.avail_out===0)return ke}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(n=Ze._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<oe-1?e.strstart:oe-1,t===xt?(De(e,!0),e.strm.avail_out===0?qt:or):e.last_lit&&(De(e,!1),e.strm.avail_out===0)?ke:Dr}function Tf(e,t){for(var s,n,o,i,r=e.window;;){if(e.lookahead<=Ot){if(It(e),e.lookahead<=Ot&&t===Vt)return ke;if(e.lookahead===0)break}if(e.match_length=0,e.lookahead>=oe&&e.strstart>0&&(o=e.strstart-1,n=r[o],n===r[++o]&&n===r[++o]&&n===r[++o])){i=e.strstart+Ot;do;while(n===r[++o]&&n===r[++o]&&n===r[++o]&&n===r[++o]&&n===r[++o]&&n===r[++o]&&n===r[++o]&&n===r[++o]&&o<i);e.match_length=Ot-(i-o),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=oe?(s=Ze._tr_tally(e,1,e.match_length-oe),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(s=Ze._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),s&&(De(e,!1),e.strm.avail_out===0))return ke}return e.insert=0,t===xt?(De(e,!0),e.strm.avail_out===0?qt:or):e.last_lit&&(De(e,!1),e.strm.avail_out===0)?ke:Dr}function Sf(e,t){for(var s;;){if(e.lookahead===0&&(It(e),e.lookahead===0)){if(t===Vt)return ke;break}if(e.match_length=0,s=Ze._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,s&&(De(e,!1),e.strm.avail_out===0))return ke}return e.insert=0,t===xt?(De(e,!0),e.strm.avail_out===0?qt:or):e.last_lit&&(De(e,!1),e.strm.avail_out===0)?ke:Dr}function nt(e,t,s,n,o){this.good_length=e,this.max_lazy=t,this.nice_length=s,this.max_chain=n,this.func=o}var $t;$t=[new nt(0,0,0,0,Ef),new nt(4,4,8,4,Bs),new nt(4,5,16,8,Bs),new nt(4,6,32,32,Bs),new nt(4,4,16,16,Xt),new nt(8,16,32,32,Xt),new nt(8,16,128,128,Xt),new nt(8,32,128,256,Xt),new nt(32,128,258,1024,Xt),new nt(32,258,258,4096,Xt)];function kf(e){e.window_size=2*e.w_size,kt(e.head),e.max_lazy_match=$t[e.level].max_lazy,e.good_match=$t[e.level].good_length,e.nice_match=$t[e.level].nice_length,e.max_chain_length=$t[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=oe-1,e.match_available=0,e.ins_h=0}function Of(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=ms,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new je.Buf16(wf*2),this.dyn_dtree=new je.Buf16((2*yf+1)*2),this.bl_tree=new je.Buf16((2*gf+1)*2),kt(this.dyn_ltree),kt(this.dyn_dtree),kt(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new je.Buf16(bf+1),this.heap=new je.Buf16(2*_s+1),kt(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new je.Buf16(2*_s+1),kt(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function qa(e){var t;return!e||!e.state?Ct(e,Ge):(e.total_in=e.total_out=0,e.data_type=lf,t=e.state,t.pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?ys:Rt,e.adler=t.wrap===2?0:1,t.last_flush=Vt,Ze._tr_init(t),ft)}function Ia(e){var t=qa(e);return t===ft&&kf(e.state),t}function Cf(e,t){return!e||!e.state||e.state.wrap!==2?Ge:(e.state.gzhead=t,ft)}function Na(e,t,s,n,o,i){if(!e)return Ge;var r=1;if(t===nf&&(t=6),n<0?(r=0,n=-n):n>15&&(r=2,n-=16),o<1||o>uf||s!==ms||n<8||n>15||t<0||t>9||i<0||i>pf)return Ct(e,Ge);n===8&&(n=9);var p=new Of;return e.state=p,p.strm=e,p.wrap=r,p.gzhead=null,p.w_bits=n,p.w_size=1<<p.w_bits,p.w_mask=p.w_size-1,p.hash_bits=o+7,p.hash_size=1<<p.hash_bits,p.hash_mask=p.hash_size-1,p.hash_shift=~~((p.hash_bits+oe-1)/oe),p.window=new je.Buf8(p.w_size*2),p.head=new je.Buf16(p.hash_size),p.prev=new je.Buf16(p.w_size),p.lit_bufsize=1<<o+6,p.pending_buf_size=p.lit_bufsize*4,p.pending_buf=new je.Buf8(p.pending_buf_size),p.d_buf=1*p.lit_bufsize,p.l_buf=(1+2)*p.lit_bufsize,p.level=t,p.strategy=i,p.method=s,Ia(e)}function xf(e,t){return Na(e,t,ms,cf,df,ff)}function Hf(e,t){var s,n,o,i;if(!e||!e.state||t>Xi||t<0)return e?Ct(e,Ge):Ge;if(n=e.state,!e.output||!e.input&&e.avail_in!==0||n.status===ur&&t!==xt)return Ct(e,e.avail_out===0?Ls:Ge);if(n.strm=e,s=n.last_flush,n.last_flush=t,n.status===ys)if(n.wrap===2)e.adler=0,fe(n,31),fe(n,139),fe(n,8),n.gzhead?(fe(n,(n.gzhead.text?1:0)+(n.gzhead.hcrc?2:0)+(n.gzhead.extra?4:0)+(n.gzhead.name?8:0)+(n.gzhead.comment?16:0)),fe(n,n.gzhead.time&255),fe(n,n.gzhead.time>>8&255),fe(n,n.gzhead.time>>16&255),fe(n,n.gzhead.time>>24&255),fe(n,n.level===9?2:n.strategy>=Ir||n.level<2?4:0),fe(n,n.gzhead.os&255),n.gzhead.extra&&n.gzhead.extra.length&&(fe(n,n.gzhead.extra.length&255),fe(n,n.gzhead.extra.length>>8&255)),n.gzhead.hcrc&&(e.adler=Tt(e.adler,n.pending_buf,n.pending,0)),n.gzindex=0,n.status=$s):(fe(n,0),fe(n,0),fe(n,0),fe(n,0),fe(n,0),fe(n,n.level===9?2:n.strategy>=Ir||n.level<2?4:0),fe(n,Pf),n.status=Rt);else{var r=ms+(n.w_bits-8<<4)<<8,p=-1;n.strategy>=Ir||n.level<2?p=0:n.level<6?p=1:n.level===6?p=2:p=3,r|=p<<6,n.strstart!==0&&(r|=vf),r+=31-r%31,n.status=Rt,lr(n,r),n.strstart!==0&&(lr(n,e.adler>>>16),lr(n,e.adler&65535)),e.adler=1}if(n.status===$s)if(n.gzhead.extra){for(o=n.pending;n.gzindex<(n.gzhead.extra.length&65535)&&!(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>o&&(e.adler=Tt(e.adler,n.pending_buf,n.pending-o,o)),St(e),o=n.pending,n.pending===n.pending_buf_size));)fe(n,n.gzhead.extra[n.gzindex]&255),n.gzindex++;n.gzhead.hcrc&&n.pending>o&&(e.adler=Tt(e.adler,n.pending_buf,n.pending-o,o)),n.gzindex===n.gzhead.extra.length&&(n.gzindex=0,n.status=Gr)}else n.status=Gr;if(n.status===Gr)if(n.gzhead.name){o=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>o&&(e.adler=Tt(e.adler,n.pending_buf,n.pending-o,o)),St(e),o=n.pending,n.pending===n.pending_buf_size)){i=1;break}n.gzindex<n.gzhead.name.length?i=n.gzhead.name.charCodeAt(n.gzindex++)&255:i=0,fe(n,i)}while(i!==0);n.gzhead.hcrc&&n.pending>o&&(e.adler=Tt(e.adler,n.pending_buf,n.pending-o,o)),i===0&&(n.gzindex=0,n.status=Qr)}else n.status=Qr;if(n.status===Qr)if(n.gzhead.comment){o=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>o&&(e.adler=Tt(e.adler,n.pending_buf,n.pending-o,o)),St(e),o=n.pending,n.pending===n.pending_buf_size)){i=1;break}n.gzindex<n.gzhead.comment.length?i=n.gzhead.comment.charCodeAt(n.gzindex++)&255:i=0,fe(n,i)}while(i!==0);n.gzhead.hcrc&&n.pending>o&&(e.adler=Tt(e.adler,n.pending_buf,n.pending-o,o)),i===0&&(n.status=Xr)}else n.status=Xr;if(n.status===Xr&&(n.gzhead.hcrc?(n.pending+2>n.pending_buf_size&&St(e),n.pending+2<=n.pending_buf_size&&(fe(n,e.adler&255),fe(n,e.adler>>8&255),e.adler=0,n.status=Rt)):n.status=Rt),n.pending!==0){if(St(e),e.avail_out===0)return n.last_flush=-1,ft}else if(e.avail_in===0&&Ji(t)<=Ji(s)&&t!==xt)return Ct(e,Ls);if(n.status===ur&&e.avail_in!==0)return Ct(e,Ls);if(e.avail_in!==0||n.lookahead!==0||t!==Vt&&n.status!==ur){var m=n.strategy===Ir?Sf(n,t):n.strategy===of?Tf(n,t):$t[n.level].func(n,t);if((m===qt||m===or)&&(n.status=ur),m===ke||m===qt)return e.avail_out===0&&(n.last_flush=-1),ft;if(m===Dr&&(t===tf?Ze._tr_align(n):t!==Xi&&(Ze._tr_stored_block(n,0,0,!1),t===rf&&(kt(n.head),n.lookahead===0&&(n.strstart=0,n.block_start=0,n.insert=0))),St(e),e.avail_out===0))return n.last_flush=-1,ft}return t!==xt?ft:n.wrap<=0?Yi:(n.wrap===2?(fe(n,e.adler&255),fe(n,e.adler>>8&255),fe(n,e.adler>>16&255),fe(n,e.adler>>24&255),fe(n,e.total_in&255),fe(n,e.total_in>>8&255),fe(n,e.total_in>>16&255),fe(n,e.total_in>>24&255)):(lr(n,e.adler>>>16),lr(n,e.adler&65535)),St(e),n.wrap>0&&(n.wrap=-n.wrap),n.pending!==0?ft:Yi)}function Df(e){var t;return!e||!e.state?Ge:(t=e.state.status,t!==ys&&t!==$s&&t!==Gr&&t!==Qr&&t!==Xr&&t!==Rt&&t!==ur?Ct(e,Ge):(e.state=null,t===Rt?Ct(e,sf):ft))}function Lf(e,t){var s=t.length,n,o,i,r,p,m,u,d;if(!e||!e.state||(n=e.state,r=n.wrap,r===2||r===1&&n.status!==ys||n.lookahead))return Ge;for(r===1&&(e.adler=ja(e.adler,t,s,0)),n.wrap=0,s>=n.w_size&&(r===0&&(kt(n.head),n.strstart=0,n.block_start=0,n.insert=0),d=new je.Buf8(n.w_size),je.arraySet(d,t,s-n.w_size,n.w_size,0),t=d,s=n.w_size),p=e.avail_in,m=e.next_in,u=e.input,e.avail_in=s,e.next_in=0,e.input=t,It(n);n.lookahead>=oe;){o=n.strstart,i=n.lookahead-(oe-1);do n.ins_h=(n.ins_h<<n.hash_shift^n.window[o+oe-1])&n.hash_mask,n.prev[o&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=o,o++;while(--i);n.strstart=o,n.lookahead=oe-1,It(n)}return n.strstart+=n.lookahead,n.block_start=n.strstart,n.insert=n.lookahead,n.lookahead=0,n.match_length=n.prev_length=oe-1,n.match_available=0,e.next_in=m,e.input=u,e.avail_in=p,n.wrap=r,ft}ut.deflateInit=xf;ut.deflateInit2=Na;ut.deflateReset=Ia;ut.deflateResetKeep=qa;ut.deflateSetHeader=Cf;ut.deflate=Hf;ut.deflateEnd=Df;ut.deflateSetDictionary=Lf;ut.deflateInfo="pako deflate (from Nodeca project)";var Ut={},gs=bt,za=!0,Wa=!0;try{String.fromCharCode.apply(null,[0])}catch{za=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch{Wa=!1}var Er=new gs.Buf8(256);for(var Et=0;Et<256;Et++)Er[Et]=Et>=252?6:Et>=248?5:Et>=240?4:Et>=224?3:Et>=192?2:1;Er[254]=Er[254]=1;Ut.string2buf=function(e){var t,s,n,o,i,r=e.length,p=0;for(o=0;o<r;o++)s=e.charCodeAt(o),(s&64512)===55296&&o+1<r&&(n=e.charCodeAt(o+1),(n&64512)===56320&&(s=65536+(s-55296<<10)+(n-56320),o++)),p+=s<128?1:s<2048?2:s<65536?3:4;for(t=new gs.Buf8(p),i=0,o=0;i<p;o++)s=e.charCodeAt(o),(s&64512)===55296&&o+1<r&&(n=e.charCodeAt(o+1),(n&64512)===56320&&(s=65536+(s-55296<<10)+(n-56320),o++)),s<128?t[i++]=s:s<2048?(t[i++]=192|s>>>6,t[i++]=128|s&63):s<65536?(t[i++]=224|s>>>12,t[i++]=128|s>>>6&63,t[i++]=128|s&63):(t[i++]=240|s>>>18,t[i++]=128|s>>>12&63,t[i++]=128|s>>>6&63,t[i++]=128|s&63);return t};function Va(e,t){if(t<65534&&(e.subarray&&Wa||!e.subarray&&za))return String.fromCharCode.apply(null,gs.shrinkBuf(e,t));for(var s="",n=0;n<t;n++)s+=String.fromCharCode(e[n]);return s}Ut.buf2binstring=function(e){return Va(e,e.length)};Ut.binstring2buf=function(e){for(var t=new gs.Buf8(e.length),s=0,n=t.length;s<n;s++)t[s]=e.charCodeAt(s);return t};Ut.buf2string=function(e,t){var s,n,o,i,r=t||e.length,p=new Array(r*2);for(n=0,s=0;s<r;){if(o=e[s++],o<128){p[n++]=o;continue}if(i=Er[o],i>4){p[n++]=65533,s+=i-1;continue}for(o&=i===2?31:i===3?15:7;i>1&&s<r;)o=o<<6|e[s++]&63,i--;if(i>1){p[n++]=65533;continue}o<65536?p[n++]=o:(o-=65536,p[n++]=55296|o>>10&1023,p[n++]=56320|o&1023)}return Va(p,n)};Ut.utf8border=function(e,t){var s;for(t=t||e.length,t>e.length&&(t=e.length),s=t-1;s>=0&&(e[s]&192)===128;)s--;return s<0||s===0?t:s+Er[e[s]]>t?s:t};function Bf(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}var Ua=Bf,hr=ut,mr=bt,ei=Ut,ti=Ti,Rf=Ua,Ka=Object.prototype.toString,jf=0,Rs=4,rr=0,_i=1,$i=2,Ff=-1,qf=0,If=8;function Nt(e){if(!(this instanceof Nt))return new Nt(e);this.options=mr.assign({level:Ff,method:If,chunkSize:16384,windowBits:15,memLevel:8,strategy:qf,to:""},e||{});var t=this.options;t.raw&&t.windowBits>0?t.windowBits=-t.windowBits:t.gzip&&t.windowBits>0&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Rf,this.strm.avail_out=0;var s=hr.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(s!==rr)throw new Error(ti[s]);if(t.header&&hr.deflateSetHeader(this.strm,t.header),t.dictionary){var n;if(typeof t.dictionary=="string"?n=ei.string2buf(t.dictionary):Ka.call(t.dictionary)==="[object ArrayBuffer]"?n=new Uint8Array(t.dictionary):n=t.dictionary,s=hr.deflateSetDictionary(this.strm,n),s!==rr)throw new Error(ti[s]);this._dict_set=!0}}Nt.prototype.push=function(e,t){var s=this.strm,n=this.options.chunkSize,o,i;if(this.ended)return!1;i=t===~~t?t:t===!0?Rs:jf,typeof e=="string"?s.input=ei.string2buf(e):Ka.call(e)==="[object ArrayBuffer]"?s.input=new Uint8Array(e):s.input=e,s.next_in=0,s.avail_in=s.input.length;do{if(s.avail_out===0&&(s.output=new mr.Buf8(n),s.next_out=0,s.avail_out=n),o=hr.deflate(s,i),o!==_i&&o!==rr)return this.onEnd(o),this.ended=!0,!1;(s.avail_out===0||s.avail_in===0&&(i===Rs||i===$i))&&(this.options.to==="string"?this.onData(ei.buf2binstring(mr.shrinkBuf(s.output,s.next_out))):this.onData(mr.shrinkBuf(s.output,s.next_out)))}while((s.avail_in>0||s.avail_out===0)&&o!==_i);return i===Rs?(o=hr.deflateEnd(this.strm),this.onEnd(o),this.ended=!0,o===rr):(i===$i&&(this.onEnd(rr),s.avail_out=0),!0)};Nt.prototype.onData=function(e){this.chunks.push(e)};Nt.prototype.onEnd=function(e){e===rr&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=mr.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};function Si(e,t){var s=new Nt(t);if(s.push(e,!0),s.err)throw s.msg||ti[s.err];return s.result}function Nf(e,t){return t=t||{},t.raw=!0,Si(e,t)}function zf(e,t){return t=t||{},t.gzip=!0,Si(e,t)}xr.Deflate=Nt;xr.deflate=Si;xr.deflateRaw=Nf;xr.gzip=zf;var Lr={},tt={},Nr=30,Wf=12,Vf=function(t,s){var n,o,i,r,p,m,u,d,b,v,w,L,E,z,N,U,B,W,q,P,F,O,x,T,k;n=t.state,o=t.next_in,T=t.input,i=o+(t.avail_in-5),r=t.next_out,k=t.output,p=r-(s-t.avail_out),m=r+(t.avail_out-257),u=n.dmax,d=n.wsize,b=n.whave,v=n.wnext,w=n.window,L=n.hold,E=n.bits,z=n.lencode,N=n.distcode,U=(1<<n.lenbits)-1,B=(1<<n.distbits)-1;e:do{E<15&&(L+=T[o++]<<E,E+=8,L+=T[o++]<<E,E+=8),W=z[L&U];t:for(;;){if(q=W>>>24,L>>>=q,E-=q,q=W>>>16&255,q===0)k[r++]=W&65535;else if(q&16){P=W&65535,q&=15,q&&(E<q&&(L+=T[o++]<<E,E+=8),P+=L&(1<<q)-1,L>>>=q,E-=q),E<15&&(L+=T[o++]<<E,E+=8,L+=T[o++]<<E,E+=8),W=N[L&B];r:for(;;){if(q=W>>>24,L>>>=q,E-=q,q=W>>>16&255,q&16){if(F=W&65535,q&=15,E<q&&(L+=T[o++]<<E,E+=8,E<q&&(L+=T[o++]<<E,E+=8)),F+=L&(1<<q)-1,F>u){t.msg="invalid distance too far back",n.mode=Nr;break e}if(L>>>=q,E-=q,q=r-p,F>q){if(q=F-q,q>b&&n.sane){t.msg="invalid distance too far back",n.mode=Nr;break e}if(O=0,x=w,v===0){if(O+=d-q,q<P){P-=q;do k[r++]=w[O++];while(--q);O=r-F,x=k}}else if(v<q){if(O+=d+v-q,q-=v,q<P){P-=q;do k[r++]=w[O++];while(--q);if(O=0,v<P){q=v,P-=q;do k[r++]=w[O++];while(--q);O=r-F,x=k}}}else if(O+=v-q,q<P){P-=q;do k[r++]=w[O++];while(--q);O=r-F,x=k}for(;P>2;)k[r++]=x[O++],k[r++]=x[O++],k[r++]=x[O++],P-=3;P&&(k[r++]=x[O++],P>1&&(k[r++]=x[O++]))}else{O=r-F;do k[r++]=k[O++],k[r++]=k[O++],k[r++]=k[O++],P-=3;while(P>2);P&&(k[r++]=k[O++],P>1&&(k[r++]=k[O++]))}}else if(q&64){t.msg="invalid distance code",n.mode=Nr;break e}else{W=N[(W&65535)+(L&(1<<q)-1)];continue r}break}}else if(q&64)if(q&32){n.mode=Wf;break e}else{t.msg="invalid literal/length code",n.mode=Nr;break e}else{W=z[(W&65535)+(L&(1<<q)-1)];continue t}break}}while(o<i&&r<m);P=E>>3,o-=P,E-=P<<3,L&=(1<<E)-1,t.next_in=o,t.next_out=r,t.avail_in=o<i?5+(i-o):5-(o-i),t.avail_out=r<m?257+(m-r):257-(r-m),n.hold=L,n.bits=E},en=bt,Yt=15,tn=852,rn=592,sn=0,js=1,nn=2,Uf=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],Kf=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],Mf=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],Zf=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64],Gf=function(t,s,n,o,i,r,p,m){var u=m.bits,d=0,b=0,v=0,w=0,L=0,E=0,z=0,N=0,U=0,B=0,W,q,P,F,O,x=null,T=0,k,I=new en.Buf16(Yt+1),j=new en.Buf16(Yt+1),D=null,X=0,Z,M,Y;for(d=0;d<=Yt;d++)I[d]=0;for(b=0;b<o;b++)I[s[n+b]]++;for(L=u,w=Yt;w>=1&&I[w]===0;w--);if(L>w&&(L=w),w===0)return i[r++]=1<<24|64<<16|0,i[r++]=1<<24|64<<16|0,m.bits=1,0;for(v=1;v<w&&I[v]===0;v++);for(L<v&&(L=v),N=1,d=1;d<=Yt;d++)if(N<<=1,N-=I[d],N<0)return-1;if(N>0&&(t===sn||w!==1))return-1;for(j[1]=0,d=1;d<Yt;d++)j[d+1]=j[d]+I[d];for(b=0;b<o;b++)s[n+b]!==0&&(p[j[s[n+b]]++]=b);if(t===sn?(x=D=p,k=19):t===js?(x=Uf,T-=257,D=Kf,X-=257,k=256):(x=Mf,D=Zf,k=-1),B=0,b=0,d=v,O=r,E=L,z=0,P=-1,U=1<<L,F=U-1,t===js&&U>tn||t===nn&&U>rn)return 1;for(;;){Z=d-z,p[b]<k?(M=0,Y=p[b]):p[b]>k?(M=D[X+p[b]],Y=x[T+p[b]]):(M=32+64,Y=0),W=1<<d-z,q=1<<E,v=q;do q-=W,i[O+(B>>z)+q]=Z<<24|M<<16|Y|0;while(q!==0);for(W=1<<d-1;B&W;)W>>=1;if(W!==0?(B&=W-1,B+=W):B=0,b++,--I[d]===0){if(d===w)break;d=s[n+p[b]]}if(d>L&&(B&F)!==P){for(z===0&&(z=L),O+=v,E=d-z,N=1<<E;E+z<w&&(N-=I[E+z],!(N<=0));)E++,N<<=1;if(U+=1<<E,t===js&&U>tn||t===nn&&U>rn)return 1;P=B&F,i[P]=L<<24|E<<16|O-r|0}}return B!==0&&(i[O+B]=d-z<<24|64<<16|0),m.bits=L,0},Ve=bt,ri=Ba,at=Ra,Qf=Vf,yr=Gf,Xf=0,Ma=1,Za=2,an=4,Yf=5,zr=6,zt=0,Jf=1,_f=2,Qe=-2,Ga=-3,Qa=-4,$f=-5,on=8,Xa=1,pn=2,fn=3,ln=4,un=5,cn=6,dn=7,hn=8,mn=9,yn=10,is=11,ht=12,Fs=13,gn=14,qs=15,wn=16,bn=17,vn=18,Pn=19,Wr=20,Vr=21,An=22,En=23,Tn=24,Sn=25,kn=26,Is=27,On=28,Cn=29,be=30,Ya=31,el=32,tl=852,rl=592,sl=15,il=sl;function xn(e){return(e>>>24&255)+(e>>>8&65280)+((e&65280)<<8)+((e&255)<<24)}function nl(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Ve.Buf16(320),this.work=new Ve.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function Ja(e){var t;return!e||!e.state?Qe:(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=t.wrap&1),t.mode=Xa,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new Ve.Buf32(tl),t.distcode=t.distdyn=new Ve.Buf32(rl),t.sane=1,t.back=-1,zt)}function _a(e){var t;return!e||!e.state?Qe:(t=e.state,t.wsize=0,t.whave=0,t.wnext=0,Ja(e))}function $a(e,t){var s,n;return!e||!e.state||(n=e.state,t<0?(s=0,t=-t):(s=(t>>4)+1,t<48&&(t&=15)),t&&(t<8||t>15))?Qe:(n.window!==null&&n.wbits!==t&&(n.window=null),n.wrap=s,n.wbits=t,_a(e))}function eo(e,t){var s,n;return e?(n=new nl,e.state=n,n.window=null,s=$a(e,t),s!==zt&&(e.state=null),s):Qe}function al(e){return eo(e,il)}var Hn=!0,Ns,zs;function ol(e){if(Hn){var t;for(Ns=new Ve.Buf32(512),zs=new Ve.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(yr(Ma,e.lens,0,288,Ns,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;yr(Za,e.lens,0,32,zs,0,e.work,{bits:5}),Hn=!1}e.lencode=Ns,e.lenbits=9,e.distcode=zs,e.distbits=5}function to(e,t,s,n){var o,i=e.state;return i.window===null&&(i.wsize=1<<i.wbits,i.wnext=0,i.whave=0,i.window=new Ve.Buf8(i.wsize)),n>=i.wsize?(Ve.arraySet(i.window,t,s-i.wsize,i.wsize,0),i.wnext=0,i.whave=i.wsize):(o=i.wsize-i.wnext,o>n&&(o=n),Ve.arraySet(i.window,t,s-n,o,i.wnext),n-=o,n?(Ve.arraySet(i.window,t,s-n,n,0),i.wnext=n,i.whave=i.wsize):(i.wnext+=o,i.wnext===i.wsize&&(i.wnext=0),i.whave<i.wsize&&(i.whave+=o))),0}function pl(e,t){var s,n,o,i,r,p,m,u,d,b,v,w,L,E,z=0,N,U,B,W,q,P,F,O,x=new Ve.Buf8(4),T,k,I=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&e.avail_in!==0)return Qe;s=e.state,s.mode===ht&&(s.mode=Fs),r=e.next_out,o=e.output,m=e.avail_out,i=e.next_in,n=e.input,p=e.avail_in,u=s.hold,d=s.bits,b=p,v=m,O=zt;e:for(;;)switch(s.mode){case Xa:if(s.wrap===0){s.mode=Fs;break}for(;d<16;){if(p===0)break e;p--,u+=n[i++]<<d,d+=8}if(s.wrap&2&&u===35615){s.check=0,x[0]=u&255,x[1]=u>>>8&255,s.check=at(s.check,x,2,0),u=0,d=0,s.mode=pn;break}if(s.flags=0,s.head&&(s.head.done=!1),!(s.wrap&1)||(((u&255)<<8)+(u>>8))%31){e.msg="incorrect header check",s.mode=be;break}if((u&15)!==on){e.msg="unknown compression method",s.mode=be;break}if(u>>>=4,d-=4,F=(u&15)+8,s.wbits===0)s.wbits=F;else if(F>s.wbits){e.msg="invalid window size",s.mode=be;break}s.dmax=1<<F,e.adler=s.check=1,s.mode=u&512?yn:ht,u=0,d=0;break;case pn:for(;d<16;){if(p===0)break e;p--,u+=n[i++]<<d,d+=8}if(s.flags=u,(s.flags&255)!==on){e.msg="unknown compression method",s.mode=be;break}if(s.flags&57344){e.msg="unknown header flags set",s.mode=be;break}s.head&&(s.head.text=u>>8&1),s.flags&512&&(x[0]=u&255,x[1]=u>>>8&255,s.check=at(s.check,x,2,0)),u=0,d=0,s.mode=fn;case fn:for(;d<32;){if(p===0)break e;p--,u+=n[i++]<<d,d+=8}s.head&&(s.head.time=u),s.flags&512&&(x[0]=u&255,x[1]=u>>>8&255,x[2]=u>>>16&255,x[3]=u>>>24&255,s.check=at(s.check,x,4,0)),u=0,d=0,s.mode=ln;case ln:for(;d<16;){if(p===0)break e;p--,u+=n[i++]<<d,d+=8}s.head&&(s.head.xflags=u&255,s.head.os=u>>8),s.flags&512&&(x[0]=u&255,x[1]=u>>>8&255,s.check=at(s.check,x,2,0)),u=0,d=0,s.mode=un;case un:if(s.flags&1024){for(;d<16;){if(p===0)break e;p--,u+=n[i++]<<d,d+=8}s.length=u,s.head&&(s.head.extra_len=u),s.flags&512&&(x[0]=u&255,x[1]=u>>>8&255,s.check=at(s.check,x,2,0)),u=0,d=0}else s.head&&(s.head.extra=null);s.mode=cn;case cn:if(s.flags&1024&&(w=s.length,w>p&&(w=p),w&&(s.head&&(F=s.head.extra_len-s.length,s.head.extra||(s.head.extra=new Array(s.head.extra_len)),Ve.arraySet(s.head.extra,n,i,w,F)),s.flags&512&&(s.check=at(s.check,n,w,i)),p-=w,i+=w,s.length-=w),s.length))break e;s.length=0,s.mode=dn;case dn:if(s.flags&2048){if(p===0)break e;w=0;do F=n[i+w++],s.head&&F&&s.length<65536&&(s.head.name+=String.fromCharCode(F));while(F&&w<p);if(s.flags&512&&(s.check=at(s.check,n,w,i)),p-=w,i+=w,F)break e}else s.head&&(s.head.name=null);s.length=0,s.mode=hn;case hn:if(s.flags&4096){if(p===0)break e;w=0;do F=n[i+w++],s.head&&F&&s.length<65536&&(s.head.comment+=String.fromCharCode(F));while(F&&w<p);if(s.flags&512&&(s.check=at(s.check,n,w,i)),p-=w,i+=w,F)break e}else s.head&&(s.head.comment=null);s.mode=mn;case mn:if(s.flags&512){for(;d<16;){if(p===0)break e;p--,u+=n[i++]<<d,d+=8}if(u!==(s.check&65535)){e.msg="header crc mismatch",s.mode=be;break}u=0,d=0}s.head&&(s.head.hcrc=s.flags>>9&1,s.head.done=!0),e.adler=s.check=0,s.mode=ht;break;case yn:for(;d<32;){if(p===0)break e;p--,u+=n[i++]<<d,d+=8}e.adler=s.check=xn(u),u=0,d=0,s.mode=is;case is:if(s.havedict===0)return e.next_out=r,e.avail_out=m,e.next_in=i,e.avail_in=p,s.hold=u,s.bits=d,_f;e.adler=s.check=1,s.mode=ht;case ht:if(t===Yf||t===zr)break e;case Fs:if(s.last){u>>>=d&7,d-=d&7,s.mode=Is;break}for(;d<3;){if(p===0)break e;p--,u+=n[i++]<<d,d+=8}switch(s.last=u&1,u>>>=1,d-=1,u&3){case 0:s.mode=gn;break;case 1:if(ol(s),s.mode=Wr,t===zr){u>>>=2,d-=2;break e}break;case 2:s.mode=bn;break;case 3:e.msg="invalid block type",s.mode=be}u>>>=2,d-=2;break;case gn:for(u>>>=d&7,d-=d&7;d<32;){if(p===0)break e;p--,u+=n[i++]<<d,d+=8}if((u&65535)!==(u>>>16^65535)){e.msg="invalid stored block lengths",s.mode=be;break}if(s.length=u&65535,u=0,d=0,s.mode=qs,t===zr)break e;case qs:s.mode=wn;case wn:if(w=s.length,w){if(w>p&&(w=p),w>m&&(w=m),w===0)break e;Ve.arraySet(o,n,i,w,r),p-=w,i+=w,m-=w,r+=w,s.length-=w;break}s.mode=ht;break;case bn:for(;d<14;){if(p===0)break e;p--,u+=n[i++]<<d,d+=8}if(s.nlen=(u&31)+257,u>>>=5,d-=5,s.ndist=(u&31)+1,u>>>=5,d-=5,s.ncode=(u&15)+4,u>>>=4,d-=4,s.nlen>286||s.ndist>30){e.msg="too many length or distance symbols",s.mode=be;break}s.have=0,s.mode=vn;case vn:for(;s.have<s.ncode;){for(;d<3;){if(p===0)break e;p--,u+=n[i++]<<d,d+=8}s.lens[I[s.have++]]=u&7,u>>>=3,d-=3}for(;s.have<19;)s.lens[I[s.have++]]=0;if(s.lencode=s.lendyn,s.lenbits=7,T={bits:s.lenbits},O=yr(Xf,s.lens,0,19,s.lencode,0,s.work,T),s.lenbits=T.bits,O){e.msg="invalid code lengths set",s.mode=be;break}s.have=0,s.mode=Pn;case Pn:for(;s.have<s.nlen+s.ndist;){for(;z=s.lencode[u&(1<<s.lenbits)-1],N=z>>>24,U=z>>>16&255,B=z&65535,!(N<=d);){if(p===0)break e;p--,u+=n[i++]<<d,d+=8}if(B<16)u>>>=N,d-=N,s.lens[s.have++]=B;else{if(B===16){for(k=N+2;d<k;){if(p===0)break e;p--,u+=n[i++]<<d,d+=8}if(u>>>=N,d-=N,s.have===0){e.msg="invalid bit length repeat",s.mode=be;break}F=s.lens[s.have-1],w=3+(u&3),u>>>=2,d-=2}else if(B===17){for(k=N+3;d<k;){if(p===0)break e;p--,u+=n[i++]<<d,d+=8}u>>>=N,d-=N,F=0,w=3+(u&7),u>>>=3,d-=3}else{for(k=N+7;d<k;){if(p===0)break e;p--,u+=n[i++]<<d,d+=8}u>>>=N,d-=N,F=0,w=11+(u&127),u>>>=7,d-=7}if(s.have+w>s.nlen+s.ndist){e.msg="invalid bit length repeat",s.mode=be;break}for(;w--;)s.lens[s.have++]=F}}if(s.mode===be)break;if(s.lens[256]===0){e.msg="invalid code -- missing end-of-block",s.mode=be;break}if(s.lenbits=9,T={bits:s.lenbits},O=yr(Ma,s.lens,0,s.nlen,s.lencode,0,s.work,T),s.lenbits=T.bits,O){e.msg="invalid literal/lengths set",s.mode=be;break}if(s.distbits=6,s.distcode=s.distdyn,T={bits:s.distbits},O=yr(Za,s.lens,s.nlen,s.ndist,s.distcode,0,s.work,T),s.distbits=T.bits,O){e.msg="invalid distances set",s.mode=be;break}if(s.mode=Wr,t===zr)break e;case Wr:s.mode=Vr;case Vr:if(p>=6&&m>=258){e.next_out=r,e.avail_out=m,e.next_in=i,e.avail_in=p,s.hold=u,s.bits=d,Qf(e,v),r=e.next_out,o=e.output,m=e.avail_out,i=e.next_in,n=e.input,p=e.avail_in,u=s.hold,d=s.bits,s.mode===ht&&(s.back=-1);break}for(s.back=0;z=s.lencode[u&(1<<s.lenbits)-1],N=z>>>24,U=z>>>16&255,B=z&65535,!(N<=d);){if(p===0)break e;p--,u+=n[i++]<<d,d+=8}if(U&&!(U&240)){for(W=N,q=U,P=B;z=s.lencode[P+((u&(1<<W+q)-1)>>W)],N=z>>>24,U=z>>>16&255,B=z&65535,!(W+N<=d);){if(p===0)break e;p--,u+=n[i++]<<d,d+=8}u>>>=W,d-=W,s.back+=W}if(u>>>=N,d-=N,s.back+=N,s.length=B,U===0){s.mode=kn;break}if(U&32){s.back=-1,s.mode=ht;break}if(U&64){e.msg="invalid literal/length code",s.mode=be;break}s.extra=U&15,s.mode=An;case An:if(s.extra){for(k=s.extra;d<k;){if(p===0)break e;p--,u+=n[i++]<<d,d+=8}s.length+=u&(1<<s.extra)-1,u>>>=s.extra,d-=s.extra,s.back+=s.extra}s.was=s.length,s.mode=En;case En:for(;z=s.distcode[u&(1<<s.distbits)-1],N=z>>>24,U=z>>>16&255,B=z&65535,!(N<=d);){if(p===0)break e;p--,u+=n[i++]<<d,d+=8}if(!(U&240)){for(W=N,q=U,P=B;z=s.distcode[P+((u&(1<<W+q)-1)>>W)],N=z>>>24,U=z>>>16&255,B=z&65535,!(W+N<=d);){if(p===0)break e;p--,u+=n[i++]<<d,d+=8}u>>>=W,d-=W,s.back+=W}if(u>>>=N,d-=N,s.back+=N,U&64){e.msg="invalid distance code",s.mode=be;break}s.offset=B,s.extra=U&15,s.mode=Tn;case Tn:if(s.extra){for(k=s.extra;d<k;){if(p===0)break e;p--,u+=n[i++]<<d,d+=8}s.offset+=u&(1<<s.extra)-1,u>>>=s.extra,d-=s.extra,s.back+=s.extra}if(s.offset>s.dmax){e.msg="invalid distance too far back",s.mode=be;break}s.mode=Sn;case Sn:if(m===0)break e;if(w=v-m,s.offset>w){if(w=s.offset-w,w>s.whave&&s.sane){e.msg="invalid distance too far back",s.mode=be;break}w>s.wnext?(w-=s.wnext,L=s.wsize-w):L=s.wnext-w,w>s.length&&(w=s.length),E=s.window}else E=o,L=r-s.offset,w=s.length;w>m&&(w=m),m-=w,s.length-=w;do o[r++]=E[L++];while(--w);s.length===0&&(s.mode=Vr);break;case kn:if(m===0)break e;o[r++]=s.length,m--,s.mode=Vr;break;case Is:if(s.wrap){for(;d<32;){if(p===0)break e;p--,u|=n[i++]<<d,d+=8}if(v-=m,e.total_out+=v,s.total+=v,v&&(e.adler=s.check=s.flags?at(s.check,o,v,r-v):ri(s.check,o,v,r-v)),v=m,(s.flags?u:xn(u))!==s.check){e.msg="incorrect data check",s.mode=be;break}u=0,d=0}s.mode=On;case On:if(s.wrap&&s.flags){for(;d<32;){if(p===0)break e;p--,u+=n[i++]<<d,d+=8}if(u!==(s.total&4294967295)){e.msg="incorrect length check",s.mode=be;break}u=0,d=0}s.mode=Cn;case Cn:O=Jf;break e;case be:O=Ga;break e;case Ya:return Qa;case el:default:return Qe}return e.next_out=r,e.avail_out=m,e.next_in=i,e.avail_in=p,s.hold=u,s.bits=d,(s.wsize||v!==e.avail_out&&s.mode<be&&(s.mode<Is||t!==an))&&to(e,e.output,e.next_out,v-e.avail_out),b-=e.avail_in,v-=e.avail_out,e.total_in+=b,e.total_out+=v,s.total+=v,s.wrap&&v&&(e.adler=s.check=s.flags?at(s.check,o,v,e.next_out-v):ri(s.check,o,v,e.next_out-v)),e.data_type=s.bits+(s.last?64:0)+(s.mode===ht?128:0)+(s.mode===Wr||s.mode===qs?256:0),(b===0&&v===0||t===an)&&O===zt&&(O=$f),O}function fl(e){if(!e||!e.state)return Qe;var t=e.state;return t.window&&(t.window=null),e.state=null,zt}function ll(e,t){var s;return!e||!e.state||(s=e.state,!(s.wrap&2))?Qe:(s.head=t,t.done=!1,zt)}function ul(e,t){var s=t.length,n,o,i;return!e||!e.state||(n=e.state,n.wrap!==0&&n.mode!==is)?Qe:n.mode===is&&(o=1,o=ri(o,t,s,0),o!==n.check)?Ga:(i=to(e,t,s,s),i?(n.mode=Ya,Qa):(n.havedict=1,zt))}tt.inflateReset=_a;tt.inflateReset2=$a;tt.inflateResetKeep=Ja;tt.inflateInit=al;tt.inflateInit2=eo;tt.inflate=pl;tt.inflateEnd=fl;tt.inflateGetHeader=ll;tt.inflateSetDictionary=ul;tt.inflateInfo="pako inflate (from Nodeca project)";var ro={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};function cl(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}var dl=cl,sr=tt,gr=bt,Yr=Ut,Ee=ro,si=Ti,hl=Ua,ml=dl,so=Object.prototype.toString;function Wt(e){if(!(this instanceof Wt))return new Wt(e);this.options=gr.assign({chunkSize:16384,windowBits:0,to:""},e||{});var t=this.options;t.raw&&t.windowBits>=0&&t.windowBits<16&&(t.windowBits=-t.windowBits,t.windowBits===0&&(t.windowBits=-15)),t.windowBits>=0&&t.windowBits<16&&!(e&&e.windowBits)&&(t.windowBits+=32),t.windowBits>15&&t.windowBits<48&&(t.windowBits&15||(t.windowBits|=15)),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new hl,this.strm.avail_out=0;var s=sr.inflateInit2(this.strm,t.windowBits);if(s!==Ee.Z_OK)throw new Error(si[s]);if(this.header=new ml,sr.inflateGetHeader(this.strm,this.header),t.dictionary&&(typeof t.dictionary=="string"?t.dictionary=Yr.string2buf(t.dictionary):so.call(t.dictionary)==="[object ArrayBuffer]"&&(t.dictionary=new Uint8Array(t.dictionary)),t.raw&&(s=sr.inflateSetDictionary(this.strm,t.dictionary),s!==Ee.Z_OK)))throw new Error(si[s])}Wt.prototype.push=function(e,t){var s=this.strm,n=this.options.chunkSize,o=this.options.dictionary,i,r,p,m,u,d=!1;if(this.ended)return!1;r=t===~~t?t:t===!0?Ee.Z_FINISH:Ee.Z_NO_FLUSH,typeof e=="string"?s.input=Yr.binstring2buf(e):so.call(e)==="[object ArrayBuffer]"?s.input=new Uint8Array(e):s.input=e,s.next_in=0,s.avail_in=s.input.length;do{if(s.avail_out===0&&(s.output=new gr.Buf8(n),s.next_out=0,s.avail_out=n),i=sr.inflate(s,Ee.Z_NO_FLUSH),i===Ee.Z_NEED_DICT&&o&&(i=sr.inflateSetDictionary(this.strm,o)),i===Ee.Z_BUF_ERROR&&d===!0&&(i=Ee.Z_OK,d=!1),i!==Ee.Z_STREAM_END&&i!==Ee.Z_OK)return this.onEnd(i),this.ended=!0,!1;s.next_out&&(s.avail_out===0||i===Ee.Z_STREAM_END||s.avail_in===0&&(r===Ee.Z_FINISH||r===Ee.Z_SYNC_FLUSH))&&(this.options.to==="string"?(p=Yr.utf8border(s.output,s.next_out),m=s.next_out-p,u=Yr.buf2string(s.output,p),s.next_out=m,s.avail_out=n-m,m&&gr.arraySet(s.output,s.output,p,m,0),this.onData(u)):this.onData(gr.shrinkBuf(s.output,s.next_out))),s.avail_in===0&&s.avail_out===0&&(d=!0)}while((s.avail_in>0||s.avail_out===0)&&i!==Ee.Z_STREAM_END);return i===Ee.Z_STREAM_END&&(r=Ee.Z_FINISH),r===Ee.Z_FINISH?(i=sr.inflateEnd(this.strm),this.onEnd(i),this.ended=!0,i===Ee.Z_OK):(r===Ee.Z_SYNC_FLUSH&&(this.onEnd(Ee.Z_OK),s.avail_out=0),!0)};Wt.prototype.onData=function(e){this.chunks.push(e)};Wt.prototype.onEnd=function(e){e===Ee.Z_OK&&(this.options.to==="string"?this.result=this.chunks.join(""):this.result=gr.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg};function ki(e,t){var s=new Wt(t);if(s.push(e,!0),s.err)throw s.msg||si[s.err];return s.result}function yl(e,t){return t=t||{},t.raw=!0,ki(e,t)}Lr.Inflate=Wt;Lr.inflate=ki;Lr.inflateRaw=yl;Lr.ungzip=ki;var gl=bt.assign,wl=xr,bl=Lr,vl=ro,io={};gl(io,wl,bl,vl);var Pl=io;const no=yi(Pl);async function Al(e,t){const s=new ha(e);let n=await s.read(4);if(n=n.toString("utf8"),n!=="PACK")throw new ve(`Invalid PACK header '${n}'`);let o=await s.read(4);if(o=o.readUInt32BE(0),o!==2)throw new ve(`Invalid packfile version: ${o}`);let i=await s.read(4);if(i=i.readUInt32BE(0),!(i<1))for(;!s.eof()&&i--;){const r=s.tell(),{type:p,length:m,ofs:u,reference:d}=await El(s),b=new no.Inflate;for(;!b.result;){const v=await s.chunk();if(!v)break;if(b.push(v,!1),b.err)throw new ve(`Pako error: ${b.msg}`);if(b.result){if(b.result.length!==m)throw new ve("Inflated object size is different from that stated in packfile.");await s.undo(),await s.read(v.length-b.strm.avail_in);const w=s.tell();await t({data:b.result,type:p,num:i,offset:r,end:w,reference:d,ofs:u})}}}}async function El(e){let t=await e.byte();const s=t>>4&7;let n=t&15;if(t&128){let r=4;do t=await e.byte(),n|=(t&127)<<r,r+=7;while(t&128)}let o,i;if(s===6){let r=0;o=0;const p=[];do t=await e.byte(),o|=(t&127)<<r,r+=7,p.push(t);while(t&128);i=Buffer.from(p)}return s===7&&(i=await e.read(20)),{type:s,length:n,ofs:o,reference:i}}let Tl=!1;async function Sl(e){return Tl?kl(e):no.inflate(e)}async function kl(e){const t=new DecompressionStream("deflate"),s=new Blob([e]).stream().pipeThrough(t);return new Uint8Array(await new Response(s).arrayBuffer())}var ii={exports:{}};typeof Object.create=="function"?ii.exports=function(t,s){s&&(t.super_=s,t.prototype=Object.create(s.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:ii.exports=function(t,s){if(s){t.super_=s;var n=function(){};n.prototype=s.prototype,t.prototype=new n,t.prototype.constructor=t}};var Ol=ii.exports,ni={exports:{}},wt={},ws={};ws.byteLength=Hl;ws.toByteArray=Ll;ws.fromByteArray=jl;var lt=[],Me=[],Cl=typeof Uint8Array<"u"?Uint8Array:Array,Ws="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";for(var Jt=0,xl=Ws.length;Jt<xl;++Jt)lt[Jt]=Ws[Jt],Me[Ws.charCodeAt(Jt)]=Jt;Me["-".charCodeAt(0)]=62;Me["_".charCodeAt(0)]=63;function ao(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var s=e.indexOf("=");s===-1&&(s=t);var n=s===t?0:4-s%4;return[s,n]}function Hl(e){var t=ao(e),s=t[0],n=t[1];return(s+n)*3/4-n}function Dl(e,t,s){return(t+s)*3/4-s}function Ll(e){var t,s=ao(e),n=s[0],o=s[1],i=new Cl(Dl(e,n,o)),r=0,p=o>0?n-4:n,m;for(m=0;m<p;m+=4)t=Me[e.charCodeAt(m)]<<18|Me[e.charCodeAt(m+1)]<<12|Me[e.charCodeAt(m+2)]<<6|Me[e.charCodeAt(m+3)],i[r++]=t>>16&255,i[r++]=t>>8&255,i[r++]=t&255;return o===2&&(t=Me[e.charCodeAt(m)]<<2|Me[e.charCodeAt(m+1)]>>4,i[r++]=t&255),o===1&&(t=Me[e.charCodeAt(m)]<<10|Me[e.charCodeAt(m+1)]<<4|Me[e.charCodeAt(m+2)]>>2,i[r++]=t>>8&255,i[r++]=t&255),i}function Bl(e){return lt[e>>18&63]+lt[e>>12&63]+lt[e>>6&63]+lt[e&63]}function Rl(e,t,s){for(var n,o=[],i=t;i<s;i+=3)n=(e[i]<<16&16711680)+(e[i+1]<<8&65280)+(e[i+2]&255),o.push(Bl(n));return o.join("")}function jl(e){for(var t,s=e.length,n=s%3,o=[],i=16383,r=0,p=s-n;r<p;r+=i)o.push(Rl(e,r,r+i>p?p:r+i));return n===1?(t=e[s-1],o.push(lt[t>>2]+lt[t<<4&63]+"==")):n===2&&(t=(e[s-2]<<8)+e[s-1],o.push(lt[t>>10]+lt[t>>4&63]+lt[t<<2&63]+"=")),o.join("")}var Oi={};/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */Oi.read=function(e,t,s,n,o){var i,r,p=o*8-n-1,m=(1<<p)-1,u=m>>1,d=-7,b=s?o-1:0,v=s?-1:1,w=e[t+b];for(b+=v,i=w&(1<<-d)-1,w>>=-d,d+=p;d>0;i=i*256+e[t+b],b+=v,d-=8);for(r=i&(1<<-d)-1,i>>=-d,d+=n;d>0;r=r*256+e[t+b],b+=v,d-=8);if(i===0)i=1-u;else{if(i===m)return r?NaN:(w?-1:1)*(1/0);r=r+Math.pow(2,n),i=i-u}return(w?-1:1)*r*Math.pow(2,i-n)};Oi.write=function(e,t,s,n,o,i){var r,p,m,u=i*8-o-1,d=(1<<u)-1,b=d>>1,v=o===23?Math.pow(2,-24)-Math.pow(2,-77):0,w=n?0:i-1,L=n?1:-1,E=t<0||t===0&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(p=isNaN(t)?1:0,r=d):(r=Math.floor(Math.log(t)/Math.LN2),t*(m=Math.pow(2,-r))<1&&(r--,m*=2),r+b>=1?t+=v/m:t+=v*Math.pow(2,1-b),t*m>=2&&(r++,m/=2),r+b>=d?(p=0,r=d):r+b>=1?(p=(t*m-1)*Math.pow(2,o),r=r+b):(p=t*Math.pow(2,b-1)*Math.pow(2,o),r=0));o>=8;e[s+w]=p&255,w+=L,p/=256,o-=8);for(r=r<<o|p,u+=o;u>0;e[s+w]=r&255,w+=L,r/=256,u-=8);e[s+w-L]|=E*128};/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */(function(e){const t=ws,s=Oi,n=typeof Symbol=="function"&&typeof Symbol.for=="function"?Symbol.for("nodejs.util.inspect.custom"):null;e.Buffer=p,e.SlowBuffer=U,e.INSPECT_MAX_BYTES=50;const o=2147483647;e.kMaxLength=o,p.TYPED_ARRAY_SUPPORT=i(),!p.TYPED_ARRAY_SUPPORT&&typeof console<"u"&&typeof console.error=="function"&&console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");function i(){try{const c=new Uint8Array(1),f={foo:function(){return 42}};return Object.setPrototypeOf(f,Uint8Array.prototype),Object.setPrototypeOf(c,f),c.foo()===42}catch{return!1}}Object.defineProperty(p.prototype,"parent",{enumerable:!0,get:function(){if(p.isBuffer(this))return this.buffer}}),Object.defineProperty(p.prototype,"offset",{enumerable:!0,get:function(){if(p.isBuffer(this))return this.byteOffset}});function r(c){if(c>o)throw new RangeError('The value "'+c+'" is invalid for option "size"');const f=new Uint8Array(c);return Object.setPrototypeOf(f,p.prototype),f}function p(c,f,l){if(typeof c=="number"){if(typeof f=="string")throw new TypeError('The "string" argument must be of type string. Received type number');return b(c)}return m(c,f,l)}p.poolSize=8192;function m(c,f,l){if(typeof c=="string")return v(c,f);if(ArrayBuffer.isView(c))return L(c);if(c==null)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof c);if(Be(c,ArrayBuffer)||c&&Be(c.buffer,ArrayBuffer)||typeof SharedArrayBuffer<"u"&&(Be(c,SharedArrayBuffer)||c&&Be(c.buffer,SharedArrayBuffer)))return E(c,f,l);if(typeof c=="number")throw new TypeError('The "value" argument must not be of type number. Received type number');const g=c.valueOf&&c.valueOf();if(g!=null&&g!==c)return p.from(g,f,l);const A=z(c);if(A)return A;if(typeof Symbol<"u"&&Symbol.toPrimitive!=null&&typeof c[Symbol.toPrimitive]=="function")return p.from(c[Symbol.toPrimitive]("string"),f,l);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof c)}p.from=function(c,f,l){return m(c,f,l)},Object.setPrototypeOf(p.prototype,Uint8Array.prototype),Object.setPrototypeOf(p,Uint8Array);function u(c){if(typeof c!="number")throw new TypeError('"size" argument must be of type number');if(c<0)throw new RangeError('The value "'+c+'" is invalid for option "size"')}function d(c,f,l){return u(c),c<=0?r(c):f!==void 0?typeof l=="string"?r(c).fill(f,l):r(c).fill(f):r(c)}p.alloc=function(c,f,l){return d(c,f,l)};function b(c){return u(c),r(c<0?0:N(c)|0)}p.allocUnsafe=function(c){return b(c)},p.allocUnsafeSlow=function(c){return b(c)};function v(c,f){if((typeof f!="string"||f==="")&&(f="utf8"),!p.isEncoding(f))throw new TypeError("Unknown encoding: "+f);const l=B(c,f)|0;let g=r(l);const A=g.write(c,f);return A!==l&&(g=g.slice(0,A)),g}function w(c){const f=c.length<0?0:N(c.length)|0,l=r(f);for(let g=0;g<f;g+=1)l[g]=c[g]&255;return l}function L(c){if(Be(c,Uint8Array)){const f=new Uint8Array(c);return E(f.buffer,f.byteOffset,f.byteLength)}return w(c)}function E(c,f,l){if(f<0||c.byteLength<f)throw new RangeError('"offset" is outside of buffer bounds');if(c.byteLength<f+(l||0))throw new RangeError('"length" is outside of buffer bounds');let g;return f===void 0&&l===void 0?g=new Uint8Array(c):l===void 0?g=new Uint8Array(c,f):g=new Uint8Array(c,f,l),Object.setPrototypeOf(g,p.prototype),g}function z(c){if(p.isBuffer(c)){const f=N(c.length)|0,l=r(f);return l.length===0||c.copy(l,0,0,f),l}if(c.length!==void 0)return typeof c.length!="number"||He(c.length)?r(0):w(c);if(c.type==="Buffer"&&Array.isArray(c.data))return w(c.data)}function N(c){if(c>=o)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o.toString(16)+" bytes");return c|0}function U(c){return+c!=c&&(c=0),p.alloc(+c)}p.isBuffer=function(f){return f!=null&&f._isBuffer===!0&&f!==p.prototype},p.compare=function(f,l){if(Be(f,Uint8Array)&&(f=p.from(f,f.offset,f.byteLength)),Be(l,Uint8Array)&&(l=p.from(l,l.offset,l.byteLength)),!p.isBuffer(f)||!p.isBuffer(l))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(f===l)return 0;let g=f.length,A=l.length;for(let C=0,R=Math.min(g,A);C<R;++C)if(f[C]!==l[C]){g=f[C],A=l[C];break}return g<A?-1:A<g?1:0},p.isEncoding=function(f){switch(String(f).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},p.concat=function(f,l){if(!Array.isArray(f))throw new TypeError('"list" argument must be an Array of Buffers');if(f.length===0)return p.alloc(0);let g;if(l===void 0)for(l=0,g=0;g<f.length;++g)l+=f[g].length;const A=p.allocUnsafe(l);let C=0;for(g=0;g<f.length;++g){let R=f[g];if(Be(R,Uint8Array))C+R.length>A.length?(p.isBuffer(R)||(R=p.from(R)),R.copy(A,C)):Uint8Array.prototype.set.call(A,R,C);else if(p.isBuffer(R))R.copy(A,C);else throw new TypeError('"list" argument must be an Array of Buffers');C+=R.length}return A};function B(c,f){if(p.isBuffer(c))return c.length;if(ArrayBuffer.isView(c)||Be(c,ArrayBuffer))return c.byteLength;if(typeof c!="string")throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof c);const l=c.length,g=arguments.length>2&&arguments[2]===!0;if(!g&&l===0)return 0;let A=!1;for(;;)switch(f){case"ascii":case"latin1":case"binary":return l;case"utf8":case"utf-8":return At(c).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return l*2;case"hex":return l>>>1;case"base64":return Ht(c).length;default:if(A)return g?-1:At(c).length;f=(""+f).toLowerCase(),A=!0}}p.byteLength=B;function W(c,f,l){let g=!1;if((f===void 0||f<0)&&(f=0),f>this.length||((l===void 0||l>this.length)&&(l=this.length),l<=0)||(l>>>=0,f>>>=0,l<=f))return"";for(c||(c="utf8");;)switch(c){case"hex":return G(this,f,l);case"utf8":case"utf-8":return D(this,f,l);case"ascii":return M(this,f,l);case"latin1":case"binary":return Y(this,f,l);case"base64":return j(this,f,l);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return se(this,f,l);default:if(g)throw new TypeError("Unknown encoding: "+c);c=(c+"").toLowerCase(),g=!0}}p.prototype._isBuffer=!0;function q(c,f,l){const g=c[f];c[f]=c[l],c[l]=g}p.prototype.swap16=function(){const f=this.length;if(f%2!==0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let l=0;l<f;l+=2)q(this,l,l+1);return this},p.prototype.swap32=function(){const f=this.length;if(f%4!==0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let l=0;l<f;l+=4)q(this,l,l+3),q(this,l+1,l+2);return this},p.prototype.swap64=function(){const f=this.length;if(f%8!==0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let l=0;l<f;l+=8)q(this,l,l+7),q(this,l+1,l+6),q(this,l+2,l+5),q(this,l+3,l+4);return this},p.prototype.toString=function(){const f=this.length;return f===0?"":arguments.length===0?D(this,0,f):W.apply(this,arguments)},p.prototype.toLocaleString=p.prototype.toString,p.prototype.equals=function(f){if(!p.isBuffer(f))throw new TypeError("Argument must be a Buffer");return this===f?!0:p.compare(this,f)===0},p.prototype.inspect=function(){let f="";const l=e.INSPECT_MAX_BYTES;return f=this.toString("hex",0,l).replace(/(.{2})/g,"$1 ").trim(),this.length>l&&(f+=" ... "),"<Buffer "+f+">"},n&&(p.prototype[n]=p.prototype.inspect),p.prototype.compare=function(f,l,g,A,C){if(Be(f,Uint8Array)&&(f=p.from(f,f.offset,f.byteLength)),!p.isBuffer(f))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof f);if(l===void 0&&(l=0),g===void 0&&(g=f?f.length:0),A===void 0&&(A=0),C===void 0&&(C=this.length),l<0||g>f.length||A<0||C>this.length)throw new RangeError("out of range index");if(A>=C&&l>=g)return 0;if(A>=C)return-1;if(l>=g)return 1;if(l>>>=0,g>>>=0,A>>>=0,C>>>=0,this===f)return 0;let R=C-A,$=g-l;const ye=Math.min(R,$),he=this.slice(A,C),me=f.slice(l,g);for(let ae=0;ae<ye;++ae)if(he[ae]!==me[ae]){R=he[ae],$=me[ae];break}return R<$?-1:$<R?1:0};function P(c,f,l,g,A){if(c.length===0)return-1;if(typeof l=="string"?(g=l,l=0):l>2147483647?l=2147483647:l<-2147483648&&(l=-2147483648),l=+l,He(l)&&(l=A?0:c.length-1),l<0&&(l=c.length+l),l>=c.length){if(A)return-1;l=c.length-1}else if(l<0)if(A)l=0;else return-1;if(typeof f=="string"&&(f=p.from(f,g)),p.isBuffer(f))return f.length===0?-1:F(c,f,l,g,A);if(typeof f=="number")return f=f&255,typeof Uint8Array.prototype.indexOf=="function"?A?Uint8Array.prototype.indexOf.call(c,f,l):Uint8Array.prototype.lastIndexOf.call(c,f,l):F(c,[f],l,g,A);throw new TypeError("val must be string, number or Buffer")}function F(c,f,l,g,A){let C=1,R=c.length,$=f.length;if(g!==void 0&&(g=String(g).toLowerCase(),g==="ucs2"||g==="ucs-2"||g==="utf16le"||g==="utf-16le")){if(c.length<2||f.length<2)return-1;C=2,R/=2,$/=2,l/=2}function ye(me,ae){return C===1?me[ae]:me.readUInt16BE(ae*C)}let he;if(A){let me=-1;for(he=l;he<R;he++)if(ye(c,he)===ye(f,me===-1?0:he-me)){if(me===-1&&(me=he),he-me+1===$)return me*C}else me!==-1&&(he-=he-me),me=-1}else for(l+$>R&&(l=R-$),he=l;he>=0;he--){let me=!0;for(let ae=0;ae<$;ae++)if(ye(c,he+ae)!==ye(f,ae)){me=!1;break}if(me)return he}return-1}p.prototype.includes=function(f,l,g){return this.indexOf(f,l,g)!==-1},p.prototype.indexOf=function(f,l,g){return P(this,f,l,g,!0)},p.prototype.lastIndexOf=function(f,l,g){return P(this,f,l,g,!1)};function O(c,f,l,g){l=Number(l)||0;const A=c.length-l;g?(g=Number(g),g>A&&(g=A)):g=A;const C=f.length;g>C/2&&(g=C/2);let R;for(R=0;R<g;++R){const $=parseInt(f.substr(R*2,2),16);if(He($))return R;c[l+R]=$}return R}function x(c,f,l,g){return Ue(At(f,c.length-l),c,l,g)}function T(c,f,l,g){return Ue(Zt(f),c,l,g)}function k(c,f,l,g){return Ue(Ht(f),c,l,g)}function I(c,f,l,g){return Ue(dt(f,c.length-l),c,l,g)}p.prototype.write=function(f,l,g,A){if(l===void 0)A="utf8",g=this.length,l=0;else if(g===void 0&&typeof l=="string")A=l,g=this.length,l=0;else if(isFinite(l))l=l>>>0,isFinite(g)?(g=g>>>0,A===void 0&&(A="utf8")):(A=g,g=void 0);else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");const C=this.length-l;if((g===void 0||g>C)&&(g=C),f.length>0&&(g<0||l<0)||l>this.length)throw new RangeError("Attempt to write outside buffer bounds");A||(A="utf8");let R=!1;for(;;)switch(A){case"hex":return O(this,f,l,g);case"utf8":case"utf-8":return x(this,f,l,g);case"ascii":case"latin1":case"binary":return T(this,f,l,g);case"base64":return k(this,f,l,g);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return I(this,f,l,g);default:if(R)throw new TypeError("Unknown encoding: "+A);A=(""+A).toLowerCase(),R=!0}},p.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function j(c,f,l){return f===0&&l===c.length?t.fromByteArray(c):t.fromByteArray(c.slice(f,l))}function D(c,f,l){l=Math.min(c.length,l);const g=[];let A=f;for(;A<l;){const C=c[A];let R=null,$=C>239?4:C>223?3:C>191?2:1;if(A+$<=l){let ye,he,me,ae;switch($){case 1:C<128&&(R=C);break;case 2:ye=c[A+1],(ye&192)===128&&(ae=(C&31)<<6|ye&63,ae>127&&(R=ae));break;case 3:ye=c[A+1],he=c[A+2],(ye&192)===128&&(he&192)===128&&(ae=(C&15)<<12|(ye&63)<<6|he&63,ae>2047&&(ae<55296||ae>57343)&&(R=ae));break;case 4:ye=c[A+1],he=c[A+2],me=c[A+3],(ye&192)===128&&(he&192)===128&&(me&192)===128&&(ae=(C&15)<<18|(ye&63)<<12|(he&63)<<6|me&63,ae>65535&&ae<1114112&&(R=ae))}}R===null?(R=65533,$=1):R>65535&&(R-=65536,g.push(R>>>10&1023|55296),R=56320|R&1023),g.push(R),A+=$}return Z(g)}const X=4096;function Z(c){const f=c.length;if(f<=X)return String.fromCharCode.apply(String,c);let l="",g=0;for(;g<f;)l+=String.fromCharCode.apply(String,c.slice(g,g+=X));return l}function M(c,f,l){let g="";l=Math.min(c.length,l);for(let A=f;A<l;++A)g+=String.fromCharCode(c[A]&127);return g}function Y(c,f,l){let g="";l=Math.min(c.length,l);for(let A=f;A<l;++A)g+=String.fromCharCode(c[A]);return g}function G(c,f,l){const g=c.length;(!f||f<0)&&(f=0),(!l||l<0||l>g)&&(l=g);let A="";for(let C=f;C<l;++C)A+=Gt[c[C]];return A}function se(c,f,l){const g=c.slice(f,l);let A="";for(let C=0;C<g.length-1;C+=2)A+=String.fromCharCode(g[C]+g[C+1]*256);return A}p.prototype.slice=function(f,l){const g=this.length;f=~~f,l=l===void 0?g:~~l,f<0?(f+=g,f<0&&(f=0)):f>g&&(f=g),l<0?(l+=g,l<0&&(l=0)):l>g&&(l=g),l<f&&(l=f);const A=this.subarray(f,l);return Object.setPrototypeOf(A,p.prototype),A};function ee(c,f,l){if(c%1!==0||c<0)throw new RangeError("offset is not uint");if(c+f>l)throw new RangeError("Trying to access beyond buffer length")}p.prototype.readUintLE=p.prototype.readUIntLE=function(f,l,g){f=f>>>0,l=l>>>0,g||ee(f,l,this.length);let A=this[f],C=1,R=0;for(;++R<l&&(C*=256);)A+=this[f+R]*C;return A},p.prototype.readUintBE=p.prototype.readUIntBE=function(f,l,g){f=f>>>0,l=l>>>0,g||ee(f,l,this.length);let A=this[f+--l],C=1;for(;l>0&&(C*=256);)A+=this[f+--l]*C;return A},p.prototype.readUint8=p.prototype.readUInt8=function(f,l){return f=f>>>0,l||ee(f,1,this.length),this[f]},p.prototype.readUint16LE=p.prototype.readUInt16LE=function(f,l){return f=f>>>0,l||ee(f,2,this.length),this[f]|this[f+1]<<8},p.prototype.readUint16BE=p.prototype.readUInt16BE=function(f,l){return f=f>>>0,l||ee(f,2,this.length),this[f]<<8|this[f+1]},p.prototype.readUint32LE=p.prototype.readUInt32LE=function(f,l){return f=f>>>0,l||ee(f,4,this.length),(this[f]|this[f+1]<<8|this[f+2]<<16)+this[f+3]*16777216},p.prototype.readUint32BE=p.prototype.readUInt32BE=function(f,l){return f=f>>>0,l||ee(f,4,this.length),this[f]*16777216+(this[f+1]<<16|this[f+2]<<8|this[f+3])},p.prototype.readBigUInt64LE=Te(function(f){f=f>>>0,_e(f,"offset");const l=this[f],g=this[f+7];(l===void 0||g===void 0)&&Ie(f,this.length-8);const A=l+this[++f]*2**8+this[++f]*2**16+this[++f]*2**24,C=this[++f]+this[++f]*2**8+this[++f]*2**16+g*2**24;return BigInt(A)+(BigInt(C)<<BigInt(32))}),p.prototype.readBigUInt64BE=Te(function(f){f=f>>>0,_e(f,"offset");const l=this[f],g=this[f+7];(l===void 0||g===void 0)&&Ie(f,this.length-8);const A=l*2**24+this[++f]*2**16+this[++f]*2**8+this[++f],C=this[++f]*2**24+this[++f]*2**16+this[++f]*2**8+g;return(BigInt(A)<<BigInt(32))+BigInt(C)}),p.prototype.readIntLE=function(f,l,g){f=f>>>0,l=l>>>0,g||ee(f,l,this.length);let A=this[f],C=1,R=0;for(;++R<l&&(C*=256);)A+=this[f+R]*C;return C*=128,A>=C&&(A-=Math.pow(2,8*l)),A},p.prototype.readIntBE=function(f,l,g){f=f>>>0,l=l>>>0,g||ee(f,l,this.length);let A=l,C=1,R=this[f+--A];for(;A>0&&(C*=256);)R+=this[f+--A]*C;return C*=128,R>=C&&(R-=Math.pow(2,8*l)),R},p.prototype.readInt8=function(f,l){return f=f>>>0,l||ee(f,1,this.length),this[f]&128?(255-this[f]+1)*-1:this[f]},p.prototype.readInt16LE=function(f,l){f=f>>>0,l||ee(f,2,this.length);const g=this[f]|this[f+1]<<8;return g&32768?g|4294901760:g},p.prototype.readInt16BE=function(f,l){f=f>>>0,l||ee(f,2,this.length);const g=this[f+1]|this[f]<<8;return g&32768?g|4294901760:g},p.prototype.readInt32LE=function(f,l){return f=f>>>0,l||ee(f,4,this.length),this[f]|this[f+1]<<8|this[f+2]<<16|this[f+3]<<24},p.prototype.readInt32BE=function(f,l){return f=f>>>0,l||ee(f,4,this.length),this[f]<<24|this[f+1]<<16|this[f+2]<<8|this[f+3]},p.prototype.readBigInt64LE=Te(function(f){f=f>>>0,_e(f,"offset");const l=this[f],g=this[f+7];(l===void 0||g===void 0)&&Ie(f,this.length-8);const A=this[f+4]+this[f+5]*2**8+this[f+6]*2**16+(g<<24);return(BigInt(A)<<BigInt(32))+BigInt(l+this[++f]*2**8+this[++f]*2**16+this[++f]*2**24)}),p.prototype.readBigInt64BE=Te(function(f){f=f>>>0,_e(f,"offset");const l=this[f],g=this[f+7];(l===void 0||g===void 0)&&Ie(f,this.length-8);const A=(l<<24)+this[++f]*2**16+this[++f]*2**8+this[++f];return(BigInt(A)<<BigInt(32))+BigInt(this[++f]*2**24+this[++f]*2**16+this[++f]*2**8+g)}),p.prototype.readFloatLE=function(f,l){return f=f>>>0,l||ee(f,4,this.length),s.read(this,f,!0,23,4)},p.prototype.readFloatBE=function(f,l){return f=f>>>0,l||ee(f,4,this.length),s.read(this,f,!1,23,4)},p.prototype.readDoubleLE=function(f,l){return f=f>>>0,l||ee(f,8,this.length),s.read(this,f,!0,52,8)},p.prototype.readDoubleBE=function(f,l){return f=f>>>0,l||ee(f,8,this.length),s.read(this,f,!1,52,8)};function J(c,f,l,g,A,C){if(!p.isBuffer(c))throw new TypeError('"buffer" argument must be a Buffer instance');if(f>A||f<C)throw new RangeError('"value" argument is out of bounds');if(l+g>c.length)throw new RangeError("Index out of range")}p.prototype.writeUintLE=p.prototype.writeUIntLE=function(f,l,g,A){if(f=+f,l=l>>>0,g=g>>>0,!A){const $=Math.pow(2,8*g)-1;J(this,f,l,g,$,0)}let C=1,R=0;for(this[l]=f&255;++R<g&&(C*=256);)this[l+R]=f/C&255;return l+g},p.prototype.writeUintBE=p.prototype.writeUIntBE=function(f,l,g,A){if(f=+f,l=l>>>0,g=g>>>0,!A){const $=Math.pow(2,8*g)-1;J(this,f,l,g,$,0)}let C=g-1,R=1;for(this[l+C]=f&255;--C>=0&&(R*=256);)this[l+C]=f/R&255;return l+g},p.prototype.writeUint8=p.prototype.writeUInt8=function(f,l,g){return f=+f,l=l>>>0,g||J(this,f,l,1,255,0),this[l]=f&255,l+1},p.prototype.writeUint16LE=p.prototype.writeUInt16LE=function(f,l,g){return f=+f,l=l>>>0,g||J(this,f,l,2,65535,0),this[l]=f&255,this[l+1]=f>>>8,l+2},p.prototype.writeUint16BE=p.prototype.writeUInt16BE=function(f,l,g){return f=+f,l=l>>>0,g||J(this,f,l,2,65535,0),this[l]=f>>>8,this[l+1]=f&255,l+2},p.prototype.writeUint32LE=p.prototype.writeUInt32LE=function(f,l,g){return f=+f,l=l>>>0,g||J(this,f,l,4,4294967295,0),this[l+3]=f>>>24,this[l+2]=f>>>16,this[l+1]=f>>>8,this[l]=f&255,l+4},p.prototype.writeUint32BE=p.prototype.writeUInt32BE=function(f,l,g){return f=+f,l=l>>>0,g||J(this,f,l,4,4294967295,0),this[l]=f>>>24,this[l+1]=f>>>16,this[l+2]=f>>>8,this[l+3]=f&255,l+4};function _(c,f,l,g,A){st(f,g,A,c,l,7);let C=Number(f&BigInt(4294967295));c[l++]=C,C=C>>8,c[l++]=C,C=C>>8,c[l++]=C,C=C>>8,c[l++]=C;let R=Number(f>>BigInt(32)&BigInt(4294967295));return c[l++]=R,R=R>>8,c[l++]=R,R=R>>8,c[l++]=R,R=R>>8,c[l++]=R,l}function te(c,f,l,g,A){st(f,g,A,c,l,7);let C=Number(f&BigInt(4294967295));c[l+7]=C,C=C>>8,c[l+6]=C,C=C>>8,c[l+5]=C,C=C>>8,c[l+4]=C;let R=Number(f>>BigInt(32)&BigInt(4294967295));return c[l+3]=R,R=R>>8,c[l+2]=R,R=R>>8,c[l+1]=R,R=R>>8,c[l]=R,l+8}p.prototype.writeBigUInt64LE=Te(function(f,l=0){return _(this,f,l,BigInt(0),BigInt("0xffffffffffffffff"))}),p.prototype.writeBigUInt64BE=Te(function(f,l=0){return te(this,f,l,BigInt(0),BigInt("0xffffffffffffffff"))}),p.prototype.writeIntLE=function(f,l,g,A){if(f=+f,l=l>>>0,!A){const ye=Math.pow(2,8*g-1);J(this,f,l,g,ye-1,-ye)}let C=0,R=1,$=0;for(this[l]=f&255;++C<g&&(R*=256);)f<0&&$===0&&this[l+C-1]!==0&&($=1),this[l+C]=(f/R>>0)-$&255;return l+g},p.prototype.writeIntBE=function(f,l,g,A){if(f=+f,l=l>>>0,!A){const ye=Math.pow(2,8*g-1);J(this,f,l,g,ye-1,-ye)}let C=g-1,R=1,$=0;for(this[l+C]=f&255;--C>=0&&(R*=256);)f<0&&$===0&&this[l+C+1]!==0&&($=1),this[l+C]=(f/R>>0)-$&255;return l+g},p.prototype.writeInt8=function(f,l,g){return f=+f,l=l>>>0,g||J(this,f,l,1,127,-128),f<0&&(f=255+f+1),this[l]=f&255,l+1},p.prototype.writeInt16LE=function(f,l,g){return f=+f,l=l>>>0,g||J(this,f,l,2,32767,-32768),this[l]=f&255,this[l+1]=f>>>8,l+2},p.prototype.writeInt16BE=function(f,l,g){return f=+f,l=l>>>0,g||J(this,f,l,2,32767,-32768),this[l]=f>>>8,this[l+1]=f&255,l+2},p.prototype.writeInt32LE=function(f,l,g){return f=+f,l=l>>>0,g||J(this,f,l,4,2147483647,-2147483648),this[l]=f&255,this[l+1]=f>>>8,this[l+2]=f>>>16,this[l+3]=f>>>24,l+4},p.prototype.writeInt32BE=function(f,l,g){return f=+f,l=l>>>0,g||J(this,f,l,4,2147483647,-2147483648),f<0&&(f=4294967295+f+1),this[l]=f>>>24,this[l+1]=f>>>16,this[l+2]=f>>>8,this[l+3]=f&255,l+4},p.prototype.writeBigInt64LE=Te(function(f,l=0){return _(this,f,l,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))}),p.prototype.writeBigInt64BE=Te(function(f,l=0){return te(this,f,l,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))});function ne(c,f,l,g,A,C){if(l+g>c.length)throw new RangeError("Index out of range");if(l<0)throw new RangeError("Index out of range")}function re(c,f,l,g,A){return f=+f,l=l>>>0,A||ne(c,f,l,4),s.write(c,f,l,g,23,4),l+4}p.prototype.writeFloatLE=function(f,l,g){return re(this,f,l,!0,g)},p.prototype.writeFloatBE=function(f,l,g){return re(this,f,l,!1,g)};function we(c,f,l,g,A){return f=+f,l=l>>>0,A||ne(c,f,l,8),s.write(c,f,l,g,52,8),l+8}p.prototype.writeDoubleLE=function(f,l,g){return we(this,f,l,!0,g)},p.prototype.writeDoubleBE=function(f,l,g){return we(this,f,l,!1,g)},p.prototype.copy=function(f,l,g,A){if(!p.isBuffer(f))throw new TypeError("argument should be a Buffer");if(g||(g=0),!A&&A!==0&&(A=this.length),l>=f.length&&(l=f.length),l||(l=0),A>0&&A<g&&(A=g),A===g||f.length===0||this.length===0)return 0;if(l<0)throw new RangeError("targetStart out of bounds");if(g<0||g>=this.length)throw new RangeError("Index out of range");if(A<0)throw new RangeError("sourceEnd out of bounds");A>this.length&&(A=this.length),f.length-l<A-g&&(A=f.length-l+g);const C=A-g;return this===f&&typeof Uint8Array.prototype.copyWithin=="function"?this.copyWithin(l,g,A):Uint8Array.prototype.set.call(f,this.subarray(g,A),l),C},p.prototype.fill=function(f,l,g,A){if(typeof f=="string"){if(typeof l=="string"?(A=l,l=0,g=this.length):typeof g=="string"&&(A=g,g=this.length),A!==void 0&&typeof A!="string")throw new TypeError("encoding must be a string");if(typeof A=="string"&&!p.isEncoding(A))throw new TypeError("Unknown encoding: "+A);if(f.length===1){const R=f.charCodeAt(0);(A==="utf8"&&R<128||A==="latin1")&&(f=R)}}else typeof f=="number"?f=f&255:typeof f=="boolean"&&(f=Number(f));if(l<0||this.length<l||this.length<g)throw new RangeError("Out of range index");if(g<=l)return this;l=l>>>0,g=g===void 0?this.length:g>>>0,f||(f=0);let C;if(typeof f=="number")for(C=l;C<g;++C)this[C]=f;else{const R=p.isBuffer(f)?f:p.from(f,A),$=R.length;if($===0)throw new TypeError('The value "'+f+'" is invalid for argument "value"');for(C=0;C<g-l;++C)this[C+l]=R[C%$]}return this};const Pe={};function Fe(c,f,l){Pe[c]=class extends l{constructor(){super(),Object.defineProperty(this,"message",{value:f.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${c}]`,this.stack,delete this.name}get code(){return c}set code(A){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:A,writable:!0})}toString(){return`${this.name} [${c}]: ${this.message}`}}}Fe("ERR_BUFFER_OUT_OF_BOUNDS",function(c){return c?`${c} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"},RangeError),Fe("ERR_INVALID_ARG_TYPE",function(c,f){return`The "${c}" argument must be of type number. Received type ${typeof f}`},TypeError),Fe("ERR_OUT_OF_RANGE",function(c,f,l){let g=`The value of "${c}" is out of range.`,A=l;return Number.isInteger(l)&&Math.abs(l)>2**32?A=rt(String(l)):typeof l=="bigint"&&(A=String(l),(l>BigInt(2)**BigInt(32)||l<-(BigInt(2)**BigInt(32)))&&(A=rt(A)),A+="n"),g+=` It must be ${f}. Received ${A}`,g},RangeError);function rt(c){let f="",l=c.length;const g=c[0]==="-"?1:0;for(;l>=g+4;l-=3)f=`_${c.slice(l-3,l)}${f}`;return`${c.slice(0,l)}${f}`}function Kt(c,f,l){_e(f,"offset"),(c[f]===void 0||c[f+l]===void 0)&&Ie(f,c.length-(l+1))}function st(c,f,l,g,A,C){if(c>l||c<f){const R=typeof f=="bigint"?"n":"";let $;throw C>3?f===0||f===BigInt(0)?$=`>= 0${R} and < 2${R} ** ${(C+1)*8}${R}`:$=`>= -(2${R} ** ${(C+1)*8-1}${R}) and < 2 ** ${(C+1)*8-1}${R}`:$=`>= ${f}${R} and <= ${l}${R}`,new Pe.ERR_OUT_OF_RANGE("value",$,c)}Kt(g,A,C)}function _e(c,f){if(typeof c!="number")throw new Pe.ERR_INVALID_ARG_TYPE(f,"number",c)}function Ie(c,f,l){throw Math.floor(c)!==c?(_e(c,l),new Pe.ERR_OUT_OF_RANGE(l||"offset","an integer",c)):f<0?new Pe.ERR_BUFFER_OUT_OF_BOUNDS:new Pe.ERR_OUT_OF_RANGE(l||"offset",`>= ${l?1:0} and <= ${f}`,c)}const Mt=/[^+/0-9A-Za-z-_]/g;function ct(c){if(c=c.split("=")[0],c=c.trim().replace(Mt,""),c.length<2)return"";for(;c.length%4!==0;)c=c+"=";return c}function At(c,f){f=f||1/0;let l;const g=c.length;let A=null;const C=[];for(let R=0;R<g;++R){if(l=c.charCodeAt(R),l>55295&&l<57344){if(!A){if(l>56319){(f-=3)>-1&&C.push(239,191,189);continue}else if(R+1===g){(f-=3)>-1&&C.push(239,191,189);continue}A=l;continue}if(l<56320){(f-=3)>-1&&C.push(239,191,189),A=l;continue}l=(A-55296<<10|l-56320)+65536}else A&&(f-=3)>-1&&C.push(239,191,189);if(A=null,l<128){if((f-=1)<0)break;C.push(l)}else if(l<2048){if((f-=2)<0)break;C.push(l>>6|192,l&63|128)}else if(l<65536){if((f-=3)<0)break;C.push(l>>12|224,l>>6&63|128,l&63|128)}else if(l<1114112){if((f-=4)<0)break;C.push(l>>18|240,l>>12&63|128,l>>6&63|128,l&63|128)}else throw new Error("Invalid code point")}return C}function Zt(c){const f=[];for(let l=0;l<c.length;++l)f.push(c.charCodeAt(l)&255);return f}function dt(c,f){let l,g,A;const C=[];for(let R=0;R<c.length&&!((f-=2)<0);++R)l=c.charCodeAt(R),g=l>>8,A=l%256,C.push(A),C.push(g);return C}function Ht(c){return t.toByteArray(ct(c))}function Ue(c,f,l,g){let A;for(A=0;A<g&&!(A+l>=f.length||A>=c.length);++A)f[A+l]=c[A];return A}function Be(c,f){return c instanceof f||c!=null&&c.constructor!=null&&c.constructor.name!=null&&c.constructor.name===f.name}function He(c){return c!==c}const Gt=function(){const c="0123456789abcdef",f=new Array(256);for(let l=0;l<16;++l){const g=l*16;for(let A=0;A<16;++A)f[g+A]=c[l]+c[A]}return f}();function Te(c){return typeof BigInt>"u"?Qt:c}function Qt(){throw new Error("BigInt not supported")}})(wt);/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */(function(e,t){var s=wt,n=s.Buffer;function o(r,p){for(var m in r)p[m]=r[m]}n.from&&n.alloc&&n.allocUnsafe&&n.allocUnsafeSlow?e.exports=s:(o(s,t),t.Buffer=i);function i(r,p,m){return n(r,p,m)}i.prototype=Object.create(n.prototype),o(n,i),i.from=function(r,p,m){if(typeof r=="number")throw new TypeError("Argument must not be a number");return n(r,p,m)},i.alloc=function(r,p,m){if(typeof r!="number")throw new TypeError("Argument must be a number");var u=n(r);return p!==void 0?typeof m=="string"?u.fill(p,m):u.fill(p):u.fill(0),u},i.allocUnsafe=function(r){if(typeof r!="number")throw new TypeError("Argument must be a number");return n(r)},i.allocUnsafeSlow=function(r){if(typeof r!="number")throw new TypeError("Argument must be a number");return s.SlowBuffer(r)}})(ni,ni.exports);var oo=ni.exports,po=oo.Buffer;function bs(e,t){this._block=po.alloc(e),this._finalSize=t,this._blockSize=e,this._len=0}bs.prototype.update=function(e,t){typeof e=="string"&&(t=t||"utf8",e=po.from(e,t));for(var s=this._block,n=this._blockSize,o=e.length,i=this._len,r=0;r<o;){for(var p=i%n,m=Math.min(o-r,n-p),u=0;u<m;u++)s[p+u]=e[r+u];i+=m,r+=m,i%n===0&&this._update(s)}return this._len+=o,this};bs.prototype.digest=function(e){var t=this._len%this._blockSize;this._block[t]=128,this._block.fill(0,t+1),t>=this._finalSize&&(this._update(this._block),this._block.fill(0));var s=this._len*8;if(s<=4294967295)this._block.writeUInt32BE(s,this._blockSize-4);else{var n=(s&4294967295)>>>0,o=(s-n)/4294967296;this._block.writeUInt32BE(o,this._blockSize-8),this._block.writeUInt32BE(n,this._blockSize-4)}this._update(this._block);var i=this._hash();return e?i.toString(e):i};bs.prototype._update=function(){throw new Error("_update must be implemented by subclass")};var Fl=bs,ql=Ol,fo=Fl,Il=oo.Buffer,Nl=[1518500249,1859775393,-1894007588,-899497514],zl=new Array(80);function Br(){this.init(),this._w=zl,fo.call(this,64,56)}ql(Br,fo);Br.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this};function Wl(e){return e<<1|e>>>31}function Vl(e){return e<<5|e>>>27}function Ul(e){return e<<30|e>>>2}function Kl(e,t,s,n){return e===0?t&s|~t&n:e===2?t&s|t&n|s&n:t^s^n}Br.prototype._update=function(e){for(var t=this._w,s=this._a|0,n=this._b|0,o=this._c|0,i=this._d|0,r=this._e|0,p=0;p<16;++p)t[p]=e.readInt32BE(p*4);for(;p<80;++p)t[p]=Wl(t[p-3]^t[p-8]^t[p-14]^t[p-16]);for(var m=0;m<80;++m){var u=~~(m/20),d=Vl(s)+Kl(u,n,o,i)+r+t[m]+Nl[u]|0;r=i,i=o,o=Ul(n),n=s,s=d}this._a=s+this._a|0,this._b=n+this._b|0,this._c=o+this._c|0,this._d=i+this._d|0,this._e=r+this._e|0};Br.prototype._hash=function(){var e=Il.allocUnsafe(20);return e.writeInt32BE(this._a|0,0),e.writeInt32BE(this._b|0,4),e.writeInt32BE(this._c|0,8),e.writeInt32BE(this._d|0,12),e.writeInt32BE(this._e|0,16),e};var Ml=Br;const Zl=yi(Ml);function Gl(e){let t="";for(const s of new Uint8Array(e))s<16&&(t+="0"),t+=s.toString(16);return t}let Vs=null;async function Dn(e){return Vs===null&&(Vs=await Xl()),Vs?lo(e):Ql(e)}function Ql(e){return new Zl().update(e).digest("hex")}async function lo(e){const t=await crypto.subtle.digest("SHA-1",e);return Gl(t)}async function Xl(){try{if(await lo(new Uint8Array([]))==="da39a3ee5e6b4b0d3255bfef95601890afd80709")return!0}catch{}return!1}function Yl(e){const t=[];let s=0,n=0;do{s=e.readUInt8();const o=s&127;t.push(o),n=s&128}while(n);return t.reduce((o,i)=>o+1<<7|i,-1)}function Jl(e,t){let s=t,n=4,o=null;do o=e.readUInt8(),s|=(o&127)<<n,n+=7;while(o&128);return s}class Tr{constructor(t){Object.assign(this,t),this.offsetCache={}}static async fromIdx({idx:t,getExternalRefDelta:s}){const n=new Dt(t);if(n.slice(4).toString("hex")!=="ff744f63")return;const i=n.readUInt32BE();if(i!==2)throw new ve(`Unable to read version ${i} packfile IDX. (Only version 2 supported)`);if(t.byteLength>2048*1024*1024)throw new ve("To keep implementation simple, I haven't implemented the layer 5 feature needed to support packfiles > 2GB in size.");n.seek(n.tell()+4*255);const r=n.readUInt32BE(),p=[];for(let d=0;d<r;d++){const b=n.slice(20).toString("hex");p[d]=b}n.seek(n.tell()+4*r);const m=new Map;for(let d=0;d<r;d++)m.set(p[d],n.readUInt32BE());const u=n.slice(20).toString("hex");return new Tr({hashes:p,crcs:{},offsets:m,packfileSha:u,getExternalRefDelta:s})}static async fromPack({pack:t,getExternalRefDelta:s,onProgress:n}){const o={1:"commit",2:"tree",3:"blob",4:"tag",6:"ofs-delta",7:"ref-delta"},i={},r=t.slice(-20).toString("hex"),p=[],m={},u=new Map;let d=null,b=null;await Al([t],async({data:z,type:N,reference:U,offset:B,num:W})=>{d===null&&(d=W);const q=Math.floor((d-W)*100/d);q!==b&&n&&await n({phase:"Receiving objects",loaded:d-W,total:d}),b=q,N=o[N],["commit","tree","blob","tag"].includes(N)?i[B]={type:N,offset:B}:N==="ofs-delta"?i[B]={type:N,offset:B}:N==="ref-delta"&&(i[B]={type:N,offset:B})});const v=Object.keys(i).map(Number);for(const[z,N]of v.entries()){const U=z+1===v.length?t.byteLength-20:v[z+1],B=i[N],W=kp.buf(t.slice(N,U))>>>0;B.end=U,B.crc=W}const w=new Tr({pack:Promise.resolve(t),packfileSha:r,crcs:m,hashes:p,offsets:u,getExternalRefDelta:s});b=null;let L=0;const E=[0,0,0,0,0,0,0,0,0,0,0,0];for(let z in i){z=Number(z);const N=Math.floor(L*100/d);N!==b&&n&&await n({phase:"Resolving deltas",loaded:L,total:d}),L++,b=N;const U=i[z];if(!U.oid)try{w.readDepth=0,w.externalReadDepth=0;const{type:B,object:W}=await w.readSlice({start:z});E[w.readDepth]+=1;const q=await Dn(Op.wrap({type:B,object:W}));U.oid=q,p.push(q),u.set(q,z),m[q]=U.crc}catch{continue}}return p.sort(),w}async toBuffer(){const t=[],s=(u,d)=>{t.push(Buffer.from(u,d))};s("ff744f63","hex"),s("00000002","hex");const n=new Dt(Buffer.alloc(256*4));for(let u=0;u<256;u++){let d=0;for(const b of this.hashes)parseInt(b.slice(0,2),16)<=u&&d++;n.writeUInt32BE(d)}t.push(n.buffer);for(const u of this.hashes)s(u,"hex");const o=new Dt(Buffer.alloc(this.hashes.length*4));for(const u of this.hashes)o.writeUInt32BE(this.crcs[u]);t.push(o.buffer);const i=new Dt(Buffer.alloc(this.hashes.length*4));for(const u of this.hashes)i.writeUInt32BE(this.offsets.get(u));t.push(i.buffer),s(this.packfileSha,"hex");const r=Buffer.concat(t),p=await Dn(r),m=Buffer.alloc(20);return m.write(p,"hex"),Buffer.concat([r,m])}async load({pack:t}){this.pack=t}async unload(){this.pack=null}async read({oid:t}){if(!this.offsets.get(t)){if(this.getExternalRefDelta)return this.externalReadDepth++,this.getExternalRefDelta(t);throw new ve(`Could not read object ${t} from packfile`)}const s=this.offsets.get(t);return this.readSlice({start:s})}async readSlice({start:t}){if(this.offsetCache[t])return Object.assign({},this.offsetCache[t]);this.readDepth++;const s={16:"commit",32:"tree",48:"blob",64:"tag",96:"ofs_delta",112:"ref_delta"};if(!this.pack)throw new ve("Tried to read from a GitPackIndex with no packfile loaded into memory");const n=(await this.pack).slice(t),o=new Dt(n),i=o.readUInt8(),r=i&112;let p=s[r];if(p===void 0)throw new ve("Unrecognized type: 0b"+r.toString(2));const m=i&15;let u=m;i&128&&(u=Jl(o,m));let b=null,v=null;if(p==="ofs_delta"){const L=Yl(o),E=t-L;({object:b,type:p}=await this.readSlice({start:E}))}if(p==="ref_delta"){const L=o.slice(20).toString("hex");({object:b,type:p}=await this.read({oid:L}))}const w=n.slice(o.tell());if(v=Buffer.from(await Sl(w)),v.byteLength!==u)throw new ve(`Packfile told us object would have length ${u} but it had length ${v.byteLength}`);return b&&(v=Buffer.from(Cp(v,b))),this.readDepth>3&&(this.offsetCache[t]={type:p,object:v}),{type:p,format:"content",object:v}}}class Sr extends ir{constructor(t){super(`Expected a 40-char hex object id but saw "${t}".`),this.code=this.name=Sr.code,this.data={value:t}}}Sr.code="InvalidOidError";class vs extends ir{constructor(t,s,n,o){super(`Object ${t} ${o?`at ${o}`:""}was anticipated to be a ${n} but it is a ${s}.`),this.code=this.name=vs.code,this.data={oid:t,actual:s,expected:n,filepath:o}}}vs.code="ObjectTypeError";async function uo(e,t){const s=da(e);for(;;){const{value:n,done:o}=await s.next();if(n&&await t(n),o)break}s.return&&s.return()}async function kr(e){let t=0;const s=[];await uo(e,i=>{s.push(i),t+=i.byteLength});const n=new Uint8Array(t);let o=0;for(const i of s)n.set(i,o),o+=i.byteLength;return n}class Us{constructor(){this._queue=[]}write(t){if(this._ended)throw Error("You cannot write to a FIFO that has already been ended!");if(this._waiting){const s=this._waiting;this._waiting=null,s({value:t})}else this._queue.push(t)}end(){if(this._ended=!0,this._waiting){const t=this._waiting;this._waiting=null,t({done:!0})}}destroy(t){this.error=t,this.end()}async next(){if(this._queue.length>0)return{value:this._queue.shift()};if(this._ended)return{done:!0};if(this._waiting)throw Error("You cannot call read until the previous call to read has returned!");return new Promise(t=>{this._waiting=t})}}class _l{static demux(t){const s=Ce.streamReader(t),n=new Us,o=new Us,i=new Us,r=async function(){const p=await s();if(p===null)return r();if(p===!0){n.end(),i.end(),t.error?o.destroy(t.error):o.end();return}switch(p[0]){case 1:{o.write(p.slice(1));break}case 2:{i.write(p.slice(1));break}case 3:{const m=p.slice(1);i.write(m),n.end(),i.end(),o.destroy(new Error(m.toString("utf8")));return}default:n.write(p)}r()};return r(),{packetlines:n,packfile:o,progress:i}}}async function co(e){const{packetlines:t,packfile:s,progress:n}=_l.demux(e),o=[],i=[],r=[];let p=!1,m=!1;return new Promise((u,d)=>{uo(t,b=>{const v=b.toString("utf8").trim();if(v.startsWith("shallow")){const w=v.slice(-41).trim();w.length!==40&&d(new Sr(w)),o.push(w)}else if(v.startsWith("unshallow")){const w=v.slice(-41).trim();w.length!==40&&d(new Sr(w)),i.push(w)}else if(v.startsWith("ACK")){const[,w,L]=v.split(" ");r.push({oid:w,status:L}),L||(m=!0)}else v.startsWith("NAK")?(p=!0,m=!0):(m=!0,p=!0);m&&(e.error?d(e.error):u({shallows:o,unshallows:i,acks:r,nak:p,packfile:s,progress:n}))}).finally(()=>{m||(e.error?d(e.error):u({shallows:o,unshallows:i,acks:r,nak:p,packfile:s,progress:n}))})})}typeof window<"u"&&(window.Buffer=wt.Buffer);async function $l(e,t,s){const n=await mo(e,t),o=await iu(n,t,s),i=await nu(e,s.map(p=>o[p].oid)),r={};return await Promise.all(s.map(async p=>{r[p]=await yo(i,o[p].oid)})),r}async function eu(e,t){const s=await mo(e,t),n=await su(s,t);return n!=null&&n.object?ho(n):[]}async function tu(e,t){switch((t.type==="infer"||t.type===void 0)&&(["","HEAD"].includes(t.value)?t={value:t.value,type:"refname"}:typeof t.value=="string"&&t.value.length===40&&(t={value:t.value,type:"commit"})),t.type==="branch"&&(t={value:`refs/heads/${t.value}`,type:"refname"}),t.type){case"commit":return t.value;case"refname":{const s=await ru(e,t.value);if(!(t.value in s))throw new Error(`Branch ${t.value} not found`);return s[t.value]}default:throw new Error(`Invalid ref type: ${t.type}`)}}function ho(e){return e.object.map(t=>{if(t.type==="blob")return{name:t.path,type:"file"};if(t.type==="tree"&&t.object)return{name:t.path,type:"folder",children:ho(t)}}).filter(t=>!!(t!=null&&t.name))}async function ru(e,t){const s=wt.Buffer.from(await kr([Ce.encode(`command=ls-refs
`),Ce.encode(`agent=git/2.37.3
`),Ce.encode(`object-format=sha1
`),Ce.delim(),Ce.encode(`peel
`),Ce.encode(`ref-prefix ${t}
`),Ce.flush()])),n=await fetch(e+"/git-upload-pack",{method:"POST",headers:{Accept:"application/x-git-upload-pack-advertisement","content-type":"application/x-git-upload-pack-request","Content-Length":`${s.length}`,"Git-Protocol":"version=2"},body:s}),o={};for await(const i of au(n)){const r=i.indexOf(" "),p=i.slice(0,r),m=i.slice(r+1,i.length-1);o[m]=p}return o}async function mo(e,t){const s=wt.Buffer.from(await kr([Ce.encode(`want ${t} multi_ack_detailed no-done side-band-64k thin-pack ofs-delta agent=git/2.37.3 filter 
`),Ce.encode(`filter blob:none
`),Ce.encode(`shallow ${t}
`),Ce.encode(`deepen 1
`),Ce.flush(),Ce.encode(`done
`),Ce.encode(`done
`)])),n=await fetch(e+"/git-upload-pack",{method:"POST",headers:{Accept:"application/x-git-upload-pack-advertisement","content-type":"application/x-git-upload-pack-request","Content-Length":`${s.length}`},body:s}),o=go(n.body),i=await co(o),r=wt.Buffer.from(await kr(i.packfile)),p=await Tr.fromPack({pack:r}),m=p.read;return p.read=async function({oid:u,...d}){const b=await m.call(this,{oid:u,...d});return b.oid=u,b},p}async function su(e,t){const s=await e.read({oid:t});jt(s);const n=await e.read({oid:s.object.tree}),o=[n];for(;o.length>0;){const i=o.pop(),r=await e.read({oid:i.oid});if(jt(r),i.object=r.object,r.type==="tree")for(const p of r.object)p.type==="tree"&&o.push(p)}return n}async function iu(e,t,s){const n=await e.read({oid:t});jt(n);const o=await e.read({oid:n.object.tree});jt(o);const i={};for(const r of s){let p=o;const m=r.split("/");for(const u of m){if(p.type!=="tree")throw new Error(`Path not found in the repo: ${r}`);let d=!1;for(const b of p.object)if(b.path===u){try{p=await e.read({oid:b.oid}),jt(p)}catch{p=b}d=!0;break}if(!d)throw new Error(`Path not found in the repo: ${r}`)}i[r]=p}return i}async function nu(e,t){const s=wt.Buffer.from(await kr([...t.map(p=>Ce.encode(`want ${p} multi_ack_detailed no-done side-band-64k thin-pack ofs-delta agent=git/2.37.3 
`)),Ce.flush(),Ce.encode(`done
`)])),n=await fetch(e+"/git-upload-pack",{method:"POST",headers:{Accept:"application/x-git-upload-pack-advertisement","content-type":"application/x-git-upload-pack-request","Content-Length":`${s.length}`},body:s}),o=go(n.body),i=await co(o),r=wt.Buffer.from(await kr(i.packfile));return await Tr.fromPack({pack:r})}async function yo(e,t){const s=await e.read({oid:t});if(jt(s),s.type==="blob")return s.object;const n={};for(const{path:o,oid:i,type:r}of s.object)if(r==="blob"){const p=await e.read({oid:i});jt(p),n[o]=p.object}else r==="tree"&&(n[o]=await yo(e,i));return n}function jt(e){if(e.object instanceof wt.Buffer)switch(e.type){case"commit":e.object=ze.from(e.object).parse();break;case"tree":e.object=bi.from(e.object).entries();break;case"blob":e.object=new Uint8Array(e.object),e.format="content";break;case"tag":e.object=cr.from(e.object).parse();break;default:throw new vs(e.oid,e.type,"blob|commit|tag|tree")}}async function*au(e){const t=await e.text();let s=0;for(;s<=t.length;){const n=parseInt(t.substring(s,s+4),16);if(n===0)break;yield t.substring(s+4,s+n),s+=n}}function go(e){if(e[Symbol.asyncIterator])return e;const t=e.getReader();return{next(){return t.read()},return(){return t.releaseLock(),{}},[Symbol.asyncIterator](){return this}}}function ou(e,t){t=ci(t);const s=["",".","/"].includes(t);let n=e;if(s)t="";else{const r=t.split("/");for(const p of r){const m=n==null?void 0:n.find(u=>u.name===p);if((m==null?void 0:m.type)==="folder")n=m.children;else return m?[m.name]:[]}}const o=[],i=[{tree:n,path:t}];for(;i.length>0;){const{tree:r,path:p}=i.pop();for(const m of r){const u=`${p}${p?"/":""}${m.name}`;m.type==="folder"?i.push({tree:m.children,path:u}):o.push(u)}}return o}/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */const wo=Symbol("Comlink.proxy"),pu=Symbol("Comlink.endpoint"),fu=Symbol("Comlink.releaseProxy"),Ks=Symbol("Comlink.finalizer"),Jr=Symbol("Comlink.thrown"),bo=e=>typeof e=="object"&&e!==null||typeof e=="function",lu={canHandle:e=>bo(e)&&e[wo],serialize(e){const{port1:t,port2:s}=new MessageChannel;return Ci(e,t),[s,[s]]},deserialize(e){return e.start(),xi(e)}},uu={canHandle:e=>bo(e)&&Jr in e,serialize({value:e}){let t;return e instanceof Error?t={isError:!0,value:{message:e.message,name:e.name,stack:e.stack}}:t={isError:!1,value:e},[t,[]]},deserialize(e){throw e.isError?Object.assign(new Error(e.value.message),e.value):e.value}},er=new Map([["proxy",lu],["throw",uu]]);function cu(e,t){for(const s of e)if(t===s||s==="*"||s instanceof RegExp&&s.test(t))return!0;return!1}function Ci(e,t=globalThis,s=["*"]){t.addEventListener("message",function n(o){if(!o||!o.data)return;if(!cu(s,o.origin)){console.warn(`Invalid origin '${o.origin}' for comlink proxy`);return}const{id:i,type:r,path:p}=Object.assign({path:[]},o.data),m=(o.data.argumentList||[]).map(Lt);let u;try{const d=p.slice(0,-1).reduce((v,w)=>v[w],e),b=p.reduce((v,w)=>v[w],e);switch(r){case"GET":u=b;break;case"SET":d[p.slice(-1)[0]]=Lt(o.data.value),u=!0;break;case"APPLY":u=b.apply(d,m);break;case"CONSTRUCT":{const v=new b(...m);u=Eo(v)}break;case"ENDPOINT":{const{port1:v,port2:w}=new MessageChannel;Ci(e,w),u=gu(v,[v])}break;case"RELEASE":u=void 0;break;default:return}}catch(d){u={value:d,[Jr]:0}}Promise.resolve(u).catch(d=>({value:d,[Jr]:0})).then(d=>{const[b,v]=os(d);t.postMessage(Object.assign(Object.assign({},b),{id:i}),v),r==="RELEASE"&&(t.removeEventListener("message",n),vo(t),Ks in e&&typeof e[Ks]=="function"&&e[Ks]())}).catch(d=>{const[b,v]=os({value:new TypeError("Unserializable return value"),[Jr]:0});t.postMessage(Object.assign(Object.assign({},b),{id:i}),v)})}),t.start&&t.start()}function du(e){return e.constructor.name==="MessagePort"}function vo(e){du(e)&&e.close()}function xi(e,t){return ai(e,[],t)}function Ur(e){if(e)throw new Error("Proxy has been released and is not useable")}function Po(e){return _t(e,{type:"RELEASE"}).then(()=>{vo(e)})}const ns=new WeakMap,as="FinalizationRegistry"in globalThis&&new FinalizationRegistry(e=>{const t=(ns.get(e)||0)-1;ns.set(e,t),t===0&&Po(e)});function hu(e,t){const s=(ns.get(t)||0)+1;ns.set(t,s),as&&as.register(e,t,e)}function mu(e){as&&as.unregister(e)}function ai(e,t=[],s=function(){}){let n=!1;const o=new Proxy(s,{get(i,r){if(Ur(n),r===fu)return()=>{mu(o),Po(e),n=!0};if(r==="then"){if(t.length===0)return{then:()=>o};const p=_t(e,{type:"GET",path:t.map(m=>m.toString())}).then(Lt);return p.then.bind(p)}return ai(e,[...t,r])},set(i,r,p){Ur(n);const[m,u]=os(p);return _t(e,{type:"SET",path:[...t,r].map(d=>d.toString()),value:m},u).then(Lt)},apply(i,r,p){Ur(n);const m=t[t.length-1];if(m===pu)return _t(e,{type:"ENDPOINT"}).then(Lt);if(m==="bind")return ai(e,t.slice(0,-1));const[u,d]=Ln(p);return _t(e,{type:"APPLY",path:t.map(b=>b.toString()),argumentList:u},d).then(Lt)},construct(i,r){Ur(n);const[p,m]=Ln(r);return _t(e,{type:"CONSTRUCT",path:t.map(u=>u.toString()),argumentList:p},m).then(Lt)}});return hu(o,e),o}function yu(e){return Array.prototype.concat.apply([],e)}function Ln(e){const t=e.map(os);return[t.map(s=>s[0]),yu(t.map(s=>s[1]))]}const Ao=new WeakMap;function gu(e,t){return Ao.set(e,t),e}function Eo(e){return Object.assign(e,{[wo]:!0})}function wu(e,t=globalThis,s="*"){return{postMessage:(n,o)=>e.postMessage(n,s,o),addEventListener:t.addEventListener.bind(t),removeEventListener:t.removeEventListener.bind(t)}}function os(e){for(const[t,s]of er)if(s.canHandle(e)){const[n,o]=s.serialize(e);return[{type:"HANDLER",name:t,value:n},o]}return[{type:"RAW",value:e},Ao.get(e)||[]]}function Lt(e){switch(e.type){case"HANDLER":return er.get(e.name).deserialize(e.value);case"RAW":return e.value}}function _t(e,t,s){return new Promise(n=>{const o=bu();e.addEventListener("message",function i(r){!r.data||!r.data.id||r.data.id!==o||(e.removeEventListener("message",i),n(r.data))}),e.start&&e.start(),e.postMessage(Object.assign({id:o},t),s)})}function bu(){return new Array(4).fill(0).map(()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16)).join("-")}function vu(e,t=void 0){Au();const s=e instanceof Worker?e:wu(e,t),n=xi(s),o=To(n);return new Proxy(o,{get:(i,r)=>r==="isConnected"?async()=>{for(;;)try{await Pu(n.isConnected(),200);break}catch{}}:n[r]})}async function Pu(e,t){return new Promise((s,n)=>{setTimeout(n,t),e.then(s)})}let Bn=!1;function Au(){if(Bn)return;Bn=!0,er.set("EVENT",{canHandle:s=>s instanceof CustomEvent,serialize:s=>[{detail:s.detail},[]],deserialize:s=>s}),er.set("FUNCTION",{canHandle:s=>typeof s=="function",serialize(s){const{port1:n,port2:o}=new MessageChannel;return Ci(s,n),[o,[o]]},deserialize(s){return s.start(),xi(s)}}),er.set("PHPResponse",{canHandle:s=>typeof s=="object"&&s!==null&&"headers"in s&&"bytes"in s&&"errors"in s&&"exitCode"in s&&"httpStatusCode"in s,serialize(s){return[s.toRawData(),[]]},deserialize(s){return ts.fromRawData(s)}});const e=er.get("throw"),t=e==null?void 0:e.serialize;e.serialize=({value:s})=>{const n=t({value:s});return s.response&&(n[0].value.response=s.response),s.source&&(n[0].value.source=s.source),n}}function To(e){return new Proxy(e,{get(t,s){switch(typeof t[s]){case"function":return(...n)=>t[s](...n);case"object":return t[s]===null?t[s]:To(t[s]);case"undefined":case"number":case"string":return t[s];default:return Eo(t[s])}}})}function vt(e){return Object.fromEntries(Object.entries(e).map(([t,s])=>[s,t]))}const Eu={server_name:0,max_fragment_length:1,client_certificate_url:2,trusted_ca_keys:3,truncated_hmac:4,status_request:5,user_mapping:6,client_authz:7,server_authz:8,cert_type:9,supported_groups:10,ec_point_formats:11,srp:12,signature_algorithms:13,use_srtp:14,heartbeat:15,application_layer_protocol_negotiation:16,status_request_v2:17,signed_certificate_timestamp:18,client_certificate_type:19,server_certificate_type:20,padding:21,encrypt_then_mac:22,extended_master_secret:23,token_binding:24,cached_info:25,tls_its:26,compress_certificate:27,record_size_limit:28,pwd_protect:29,pwo_clear:30,password_salt:31,ticket_pinning:32,tls_cert_with_extern_psk:33,delegated_credential:34,session_ticket:35,TLMSP:36,TLMSP_proxying:37,TLMSP_delegate:38,supported_ekt_ciphers:39,pre_shared_key:41,early_data:42,supported_versions:43,cookie:44,psk_key_exchange_modes:45,reserved:46,certificate_authorities:47,oid_filters:48,post_handshake_auth:49,signature_algorithms_cert:50,key_share:51,transparency_info:52,connection_id:54};vt(Eu);const Tu={host_name:0};vt(Tu);const Su={TLS1_CK_PSK_WITH_RC4_128_SHA:138,TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA:139,TLS1_CK_PSK_WITH_AES_128_CBC_SHA:140,TLS1_CK_PSK_WITH_AES_256_CBC_SHA:141,TLS1_CK_DHE_PSK_WITH_RC4_128_SHA:142,TLS1_CK_DHE_PSK_WITH_3DES_EDE_CBC_SHA:143,TLS1_CK_DHE_PSK_WITH_AES_128_CBC_SHA:144,TLS1_CK_DHE_PSK_WITH_AES_256_CBC_SHA:145,TLS1_CK_RSA_PSK_WITH_RC4_128_SHA:146,TLS1_CK_RSA_PSK_WITH_3DES_EDE_CBC_SHA:147,TLS1_CK_RSA_PSK_WITH_AES_128_CBC_SHA:148,TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA:149,TLS1_CK_PSK_WITH_AES_128_GCM_SHA256:168,TLS1_CK_PSK_WITH_AES_256_GCM_SHA384:169,TLS1_CK_DHE_PSK_WITH_AES_128_GCM_SHA256:170,TLS1_CK_DHE_PSK_WITH_AES_256_GCM_SHA384:171,TLS1_CK_RSA_PSK_WITH_AES_128_GCM_SHA256:172,TLS1_CK_RSA_PSK_WITH_AES_256_GCM_SHA384:173,TLS1_CK_PSK_WITH_AES_128_CBC_SHA256:174,TLS1_CK_PSK_WITH_AES_256_CBC_SHA384:175,TLS1_CK_PSK_WITH_NULL_SHA256:176,TLS1_CK_PSK_WITH_NULL_SHA384:177,TLS1_CK_DHE_PSK_WITH_AES_128_CBC_SHA256:178,TLS1_CK_DHE_PSK_WITH_AES_256_CBC_SHA384:179,TLS1_CK_DHE_PSK_WITH_NULL_SHA256:180,TLS1_CK_DHE_PSK_WITH_NULL_SHA384:181,TLS1_CK_RSA_PSK_WITH_AES_128_CBC_SHA256:182,TLS1_CK_RSA_PSK_WITH_AES_256_CBC_SHA384:183,TLS1_CK_RSA_PSK_WITH_NULL_SHA256:184,TLS1_CK_RSA_PSK_WITH_NULL_SHA384:185,TLS1_CK_PSK_WITH_NULL_SHA:44,TLS1_CK_DHE_PSK_WITH_NULL_SHA:45,TLS1_CK_RSA_PSK_WITH_NULL_SHA:46,TLS1_CK_RSA_WITH_AES_128_SHA:47,TLS1_CK_DH_DSS_WITH_AES_128_SHA:48,TLS1_CK_DH_RSA_WITH_AES_128_SHA:49,TLS1_CK_DHE_DSS_WITH_AES_128_SHA:50,TLS1_CK_DHE_RSA_WITH_AES_128_SHA:51,TLS1_CK_ADH_WITH_AES_128_SHA:52,TLS1_CK_RSA_WITH_AES_256_SHA:53,TLS1_CK_DH_DSS_WITH_AES_256_SHA:54,TLS1_CK_DH_RSA_WITH_AES_256_SHA:55,TLS1_CK_DHE_DSS_WITH_AES_256_SHA:56,TLS1_CK_DHE_RSA_WITH_AES_256_SHA:57,TLS1_CK_ADH_WITH_AES_256_SHA:58,TLS1_CK_RSA_WITH_NULL_SHA256:59,TLS1_CK_RSA_WITH_AES_128_SHA256:60,TLS1_CK_RSA_WITH_AES_256_SHA256:61,TLS1_CK_DH_DSS_WITH_AES_128_SHA256:62,TLS1_CK_DH_RSA_WITH_AES_128_SHA256:63,TLS1_CK_DHE_DSS_WITH_AES_128_SHA256:64,TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA:65,TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA:66,TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA:67,TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA:68,TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA:69,TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA:70,TLS1_CK_DHE_RSA_WITH_AES_128_SHA256:103,TLS1_CK_DH_DSS_WITH_AES_256_SHA256:104,TLS1_CK_DH_RSA_WITH_AES_256_SHA256:105,TLS1_CK_DHE_DSS_WITH_AES_256_SHA256:106,TLS1_CK_DHE_RSA_WITH_AES_256_SHA256:107,TLS1_CK_ADH_WITH_AES_128_SHA256:108,TLS1_CK_ADH_WITH_AES_256_SHA256:109,TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA:132,TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA:133,TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA:134,TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA:135,TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA:136,TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA:137,TLS1_CK_RSA_WITH_SEED_SHA:150,TLS1_CK_DH_DSS_WITH_SEED_SHA:151,TLS1_CK_DH_RSA_WITH_SEED_SHA:152,TLS1_CK_DHE_DSS_WITH_SEED_SHA:153,TLS1_CK_DHE_RSA_WITH_SEED_SHA:154,TLS1_CK_ADH_WITH_SEED_SHA:155,TLS1_CK_RSA_WITH_AES_128_GCM_SHA256:156,TLS1_CK_RSA_WITH_AES_256_GCM_SHA384:157,TLS1_CK_DHE_RSA_WITH_AES_128_GCM_SHA256:158,TLS1_CK_DHE_RSA_WITH_AES_256_GCM_SHA384:159,TLS1_CK_DH_RSA_WITH_AES_128_GCM_SHA256:160,TLS1_CK_DH_RSA_WITH_AES_256_GCM_SHA384:161,TLS1_CK_DHE_DSS_WITH_AES_128_GCM_SHA256:162,TLS1_CK_DHE_DSS_WITH_AES_256_GCM_SHA384:163,TLS1_CK_DH_DSS_WITH_AES_128_GCM_SHA256:164,TLS1_CK_DH_DSS_WITH_AES_256_GCM_SHA384:165,TLS1_CK_ADH_WITH_AES_128_GCM_SHA256:166,TLS1_CK_ADH_WITH_AES_256_GCM_SHA384:167,TLS1_CK_RSA_WITH_AES_128_CCM:49308,TLS1_CK_RSA_WITH_AES_256_CCM:49309,TLS1_CK_DHE_RSA_WITH_AES_128_CCM:49310,TLS1_CK_DHE_RSA_WITH_AES_256_CCM:49311,TLS1_CK_RSA_WITH_AES_128_CCM_8:49312,TLS1_CK_RSA_WITH_AES_256_CCM_8:49313,TLS1_CK_DHE_RSA_WITH_AES_128_CCM_8:49314,TLS1_CK_DHE_RSA_WITH_AES_256_CCM_8:49315,TLS1_CK_PSK_WITH_AES_128_CCM:49316,TLS1_CK_PSK_WITH_AES_256_CCM:49317,TLS1_CK_DHE_PSK_WITH_AES_128_CCM:49318,TLS1_CK_DHE_PSK_WITH_AES_256_CCM:49319,TLS1_CK_PSK_WITH_AES_128_CCM_8:49320,TLS1_CK_PSK_WITH_AES_256_CCM_8:49321,TLS1_CK_DHE_PSK_WITH_AES_128_CCM_8:49322,TLS1_CK_DHE_PSK_WITH_AES_256_CCM_8:49323,TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CCM:49324,TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CCM:49325,TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CCM_8:49326,TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CCM_8:49327,TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA256:186,TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256:187,TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256:188,TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256:189,TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256:190,TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA256:191,TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA256:192,TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256:193,TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256:194,TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256:195,TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256:196,TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA256:197,TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA:49153,TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA:49154,TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA:49155,TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA:49156,TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA:49157,TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA:49158,TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA:49159,TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA:49160,TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA:49161,TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA:49162,TLS1_CK_ECDH_RSA_WITH_NULL_SHA:49163,TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA:49164,TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA:49165,TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA:49166,TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA:49167,TLS1_CK_ECDHE_RSA_WITH_NULL_SHA:49168,TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA:49169,TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA:49170,TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA:49171,TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA:49172,TLS1_CK_ECDH_anon_WITH_NULL_SHA:49173,TLS1_CK_ECDH_anon_WITH_RC4_128_SHA:49174,TLS1_CK_ECDH_anon_WITH_DES_192_CBC3_SHA:49175,TLS1_CK_ECDH_anon_WITH_AES_128_CBC_SHA:49176,TLS1_CK_ECDH_anon_WITH_AES_256_CBC_SHA:49177,TLS1_CK_SRP_SHA_WITH_3DES_EDE_CBC_SHA:49178,TLS1_CK_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA:49179,TLS1_CK_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA:49180,TLS1_CK_SRP_SHA_WITH_AES_128_CBC_SHA:49181,TLS1_CK_SRP_SHA_RSA_WITH_AES_128_CBC_SHA:49182,TLS1_CK_SRP_SHA_DSS_WITH_AES_128_CBC_SHA:49183,TLS1_CK_SRP_SHA_WITH_AES_256_CBC_SHA:49184,TLS1_CK_SRP_SHA_RSA_WITH_AES_256_CBC_SHA:49185,TLS1_CK_SRP_SHA_DSS_WITH_AES_256_CBC_SHA:49186,TLS1_CK_ECDHE_ECDSA_WITH_AES_128_SHA256:49187,TLS1_CK_ECDHE_ECDSA_WITH_AES_256_SHA384:49188,TLS1_CK_ECDH_ECDSA_WITH_AES_128_SHA256:49189,TLS1_CK_ECDH_ECDSA_WITH_AES_256_SHA384:49190,TLS1_CK_ECDHE_RSA_WITH_AES_128_SHA256:49191,TLS1_CK_ECDHE_RSA_WITH_AES_256_SHA384:49192,TLS1_CK_ECDH_RSA_WITH_AES_128_SHA256:49193,TLS1_CK_ECDH_RSA_WITH_AES_256_SHA384:49194,TLS1_CK_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256:49195,TLS1_CK_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384:49196,TLS1_CK_ECDH_ECDSA_WITH_AES_128_GCM_SHA256:49197,TLS1_CK_ECDH_ECDSA_WITH_AES_256_GCM_SHA384:49198,TLS1_CK_ECDHE_RSA_WITH_AES_128_GCM_SHA256:49199,TLS1_CK_ECDHE_RSA_WITH_AES_256_GCM_SHA384:49200,TLS1_CK_ECDH_RSA_WITH_AES_128_GCM_SHA256:49201,TLS1_CK_ECDH_RSA_WITH_AES_256_GCM_SHA384:49202,TLS1_CK_ECDHE_PSK_WITH_RC4_128_SHA:49203,TLS1_CK_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA:49204,TLS1_CK_ECDHE_PSK_WITH_AES_128_CBC_SHA:49205,TLS1_CK_ECDHE_PSK_WITH_AES_256_CBC_SHA:49206,TLS1_CK_ECDHE_PSK_WITH_AES_128_CBC_SHA256:49207,TLS1_CK_ECDHE_PSK_WITH_AES_256_CBC_SHA384:49208,TLS1_CK_ECDHE_PSK_WITH_NULL_SHA:49209,TLS1_CK_ECDHE_PSK_WITH_NULL_SHA256:49210,TLS1_CK_ECDHE_PSK_WITH_NULL_SHA384:49211,TLS1_CK_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256:49266,TLS1_CK_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384:49267,TLS1_CK_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256:49268,TLS1_CK_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384:49269,TLS1_CK_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256:49270,TLS1_CK_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384:49271,TLS1_CK_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256:49272,TLS1_CK_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384:49273,TLS1_CK_PSK_WITH_CAMELLIA_128_CBC_SHA256:49300,TLS1_CK_PSK_WITH_CAMELLIA_256_CBC_SHA384:49301,TLS1_CK_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256:49302,TLS1_CK_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384:49303,TLS1_CK_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256:49304,TLS1_CK_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384:49305,TLS1_CK_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256:49306,TLS1_CK_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384:49307,TLS1_CK_ECDHE_RSA_WITH_CHACHA20_POLY1305:52392,TLS1_CK_ECDHE_ECDSA_WITH_CHACHA20_POLY1305:52393,TLS1_CK_DHE_RSA_WITH_CHACHA20_POLY1305:52394,TLS1_CK_PSK_WITH_CHACHA20_POLY1305:52395,TLS1_CK_ECDHE_PSK_WITH_CHACHA20_POLY1305:52396,TLS1_CK_DHE_PSK_WITH_CHACHA20_POLY1305:52397,TLS1_CK_RSA_PSK_WITH_CHACHA20_POLY1305:52398};vt(Su);const ku={secp256r1:23,secp384r1:24,secp521r1:25,x25519:29,x448:30};vt(ku);const Ou={uncompressed:0,ansiX962_compressed_prime:1,ansiX962_compressed_char2:2};vt(Ou);const Cu={anonymous:0,rsa:1,dsa:2,ecdsa:3};vt(Cu);const xu={none:0,md5:1,sha1:2,sha224:3,sha256:4,sha384:5,sha512:6};vt(xu);const Hu={Warning:1,Fatal:2};vt(Hu);const Du={CloseNotify:0,UnexpectedMessage:10,BadRecordMac:20,DecryptionFailed:21,RecordOverflow:22,DecompressionFailure:30,HandshakeFailure:40,NoCertificate:41,BadCertificate:42,UnsupportedCertificate:43,CertificateRevoked:44,CertificateExpired:45,CertificateUnknown:46,IllegalParameter:47,UnknownCa:48,AccessDenied:49,DecodeError:50,DecryptError:51,ExportRestriction:60,ProtocolVersion:70,InsufficientSecurity:71,InternalError:80,UserCanceled:90,NoRenegotiation:100,UnsupportedExtension:110};vt(Du);crypto.subtle.generateKey({name:"ECDH",namedCurve:"P-256"},!0,["deriveKey","deriveBits"]);async function Lu(e,t){const s=["GET","HEAD"].includes(e.method)||"body"in t?void 0:await e.blob();return new Request(t.url||e.url,{body:s,method:e.method,headers:e.headers,referrer:e.referrer,referrerPolicy:e.referrerPolicy,mode:e.mode==="navigate"?"same-origin":e.mode,credentials:e.credentials,cache:e.cache,redirect:e.redirect,integrity:e.integrity,...t})}async function Bu(e,t,s){const n=fetch(e,t);if(!s)return n;try{return await n}catch{let o;if(typeof e=="string"||e instanceof URL)o=`${s}${e}`;else if(e instanceof Request)o=await Lu(e,{url:`${s}${e.url}`});else throw new Error("Invalid input type for fetch");return fetch(o,t)}}const Ru=["vfs","literal","wordpress.org/themes","wordpress.org/plugins","url","git:directory"];function ju(e){return e&&typeof e=="object"&&typeof e.resource=="string"&&Ru.includes(e.resource)}class Pt{get progress(){return this._progress}set progress(t){this._progress=t}setPlayground(t){this.playground=t}get isAsync(){return!1}static create(t,{semaphore:s,progress:n,corsProxy:o}){let i;switch(t.resource){case"vfs":i=new Fu(t,n);break;case"literal":i=new qu(t,n);break;case"wordpress.org/themes":i=new Uu(t,n);break;case"wordpress.org/plugins":i=new Ku(t,n);break;case"url":i=new Nu(t,n,{corsProxy:o});break;case"git:directory":i=new zu(t,n,{corsProxy:o});break;case"literal:directory":i=new Vu(t,n);break;default:throw new Error(`Invalid resource: ${t}`)}return i=new Mu(i),s&&(i=new Zu(i,s)),i}}class So extends Pt{constructor(t){super(),this.resource=t}get progress(){return this.resource.progress}set progress(t){this.resource.progress=t}get name(){return this.resource.name}get isAsync(){return this.resource.isAsync}setPlayground(t){this.resource.setPlayground(t)}}class Fu extends Pt{constructor(t,s){super(),this.resource=t,this._progress=s}async resolve(){var s;const t=await this.playground.readFileAsBuffer(this.resource.path);return(s=this.progress)==null||s.set(100),new File([t],this.name)}get name(){return this.resource.path.split("/").pop()||""}}class qu extends Pt{constructor(t,s){super(),this.resource=t,this._progress=s}async resolve(){var t;return(t=this.progress)==null||t.set(100),new File([this.resource.contents],this.resource.name)}get name(){return this.resource.name}}class Hi extends Pt{constructor(t,s){super(),this._progress=t,this.corsProxy=s}async resolve(){var s,n;(s=this.progress)==null||s.setCaption(this.caption);const t=this.getURL();try{let o=await Bu(t,void 0,this.corsProxy);if(!o.ok)throw new Error(`Could not download "${t}"`);if(o=await up(o,((n=this.progress)==null?void 0:n.loadingListener)??Iu),o.status!==200)throw new Error(`Could not download "${t}"`);return new File([await o.blob()],this.name)}catch(o){throw new Error(`Could not download "${t}".
				Check if the URL is correct and the server is reachable.
				If it is reachable, the server might be blocking the request.
				Check the browser console and network tabs for more information.

				## Does the console show the error "No 'Access-Control-Allow-Origin' header"?

				This means the server that hosts your file does not allow requests from other sites
				(cross-origin requests, or CORS).	You need to move the asset to a server that allows
				cross-origin file downloads. Learn more about CORS at
				https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS.

				If your file is on GitHub, load it from "raw.githubusercontent.com".
				Here's how to do that:

				1. Start with the original GitHub URL of the file. For example:
				https://github.com/username/repository/blob/branch/filename.
				2. Replace "github.com" with "raw.githubusercontent.com".
				3. Remove the "/blob/" part of the URL.

				The resulting URL should look like this:
				https://raw.githubusercontent.com/username/repository/branch/filename

				Error:
				${o}`)}}get caption(){return`Downloading ${this.name}`}get name(){try{return new URL(this.getURL(),"http://example.com").pathname.split("/").pop()}catch{return this.getURL()}}get isAsync(){return!0}}const Iu=()=>{};class Nu extends Hi{constructor(t,s,n){if(super(s,n==null?void 0:n.corsProxy),this.resource=t,this.options=n,this.resource.url.startsWith("https://github.com/")){const o=this.resource.url.match(/^https:\/\/github\.com\/(?<owner>[^/]+)\/(?<repo>[^/]+)\/blob\/(?<branch>[^/]+)\/(?<path>.+[^/])$/);o!=null&&o.groups&&(this.resource={...this.resource,url:`https://raw.githubusercontent.com/${o.groups.owner}/${o.groups.repo}/${o.groups.branch}/${o.groups.path}`})}}getURL(){return this.resource.url}get caption(){return this.resource.caption??super.caption}}class zu extends Pt{constructor(t,s,n){super(),this.reference=t,this._progress=s,this.options=n}async resolve(){var p;const t=(p=this.options)!=null&&p.corsProxy?`${this.options.corsProxy}${this.reference.url}`:this.reference.url,s=await tu(t,{value:this.reference.ref,type:"infer"}),n=await eu(t,s),o=this.reference.path.replace(/^\/+/,""),i=ou(n,o);let r=await $l(t,s,i);return r=Wu(r,m=>m.substring(o.length).replace(/^\/+/,"")),{name:wr(this.reference.path)||this.reference.url.replaceAll(/[^a-zA-Z0-9-.]/g,"-").replaceAll(/-+/g,"-"),files:r}}get name(){return this.reference.path.split("/").pop()}}function Wu(e,t){return Object.fromEntries(Object.entries(e).map(([s,n])=>[t(s),n]))}class Vu extends Pt{constructor(t,s){super(),this.reference=t,this._progress=s}async resolve(){return this.reference}get name(){return this.reference.name}}class Uu extends Hi{constructor(t,s){super(s),this.resource=t}get name(){return cs(this.resource.slug)}getURL(){return`https://downloads.wordpress.org/theme/${ko(this.resource.slug)}`}}class Ku extends Hi{constructor(t,s){super(s),this.resource=t}get name(){return cs(this.resource.slug)}getURL(){return`https://downloads.wordpress.org/plugin/${ko(this.resource.slug)}`}}function ko(e){return!e||e.endsWith(".zip")?e:e+".latest-stable.zip"}class Mu extends So{async resolve(){return this.promise||(this.promise=this.resource.resolve()),this.promise}}class Zu extends So{constructor(t,s){super(t),this.semaphore=s}async resolve(){return this.isAsync?this.semaphore.run(()=>this.resource.resolve()):this.resource.resolve()}}const Gu="data:application/gzip;base64,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",Qu={type:"object",properties:{landingPage:{type:"string",description:"The URL to navigate to after the blueprint has been run."},description:{type:"string",description:"Optional description. It doesn't do anything but is exposed as a courtesy to developers who may want to document which blueprint file does what.",deprecated:"Use meta.description instead."},meta:{type:"object",properties:{title:{type:"string",description:"A clear and concise name for your Blueprint."},description:{type:"string",description:"A brief explanation of what your Blueprint offers."},author:{type:"string",description:"A GitHub username of the author of this Blueprint."},categories:{type:"array",items:{type:"string"},description:"Relevant categories to help users find your Blueprint in the future Blueprints section on WordPress.org."}},required:["title","author"],additionalProperties:!1,description:"Optional metadata. Used by the Blueprints gallery at https://github.com/WordPress/blueprints"},preferredVersions:{type:"object",properties:{php:{anyOf:[{$ref:"#/definitions/SupportedPHPVersion"},{type:"string",const:"latest"}],description:"The preferred PHP version to use. If not specified, the latest supported version will be used"},wp:{type:"string",description:"The preferred WordPress version to use. If not specified, the latest supported version will be used"}},required:["php","wp"],additionalProperties:!1,description:"The preferred PHP and WordPress versions to use."},features:{type:"object",properties:{networking:{type:"boolean",description:"Should boot with support for network request via wp_safe_remote_get?"}},additionalProperties:!1},extraLibraries:{type:"array",items:{$ref:"#/definitions/ExtraLibrary"},description:"Extra libraries to preload into the Playground instance."},constants:{$ref:"#/definitions/PHPConstants",description:"PHP Constants to define on every request"},plugins:{type:"array",items:{anyOf:[{type:"string"},{$ref:"#/definitions/FileReference"}]},description:"WordPress plugins to install and activate"},siteOptions:{type:"object",additionalProperties:{type:"string"},properties:{blogname:{type:"string",description:"The site title"}},description:"WordPress site options to define"},login:{anyOf:[{type:"boolean"},{type:"object",properties:{username:{type:"string"},password:{type:"string"}},required:["username","password"],additionalProperties:!1}],description:"User to log in as. If true, logs the user in as admin/password."},phpExtensionBundles:{deprecated:"No longer used. Feel free to remove it from your Blueprint."},steps:{type:"array",items:{anyOf:[{$ref:"#/definitions/StepDefinition"},{type:"string"},{not:{}},{type:"boolean",const:!1},{type:"null"}]},description:"The steps to run after every other operation in this Blueprint was executed."},$schema:{type:"string"}},additionalProperties:!1},Xu={type:"string",enum:["8.3","8.2","8.1","8.0","7.4","7.3","7.2","7.1","7.0"]},Yu={type:"object",additionalProperties:{type:["string","boolean","number"]}},Oo=Object.prototype.hasOwnProperty;function le(e,{instancePath:t="",parentData:s,parentDataProperty:n,rootData:o=e}={}){let i=null,r=0;const p=r;let m=!1;const u=r;if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let W;if(e.resource===void 0&&(W="resource")||e.path===void 0&&(W="path")){const q={instancePath:t,schemaPath:"#/definitions/VFSReference/required",keyword:"required",params:{missingProperty:W},message:"must have required property '"+W+"'"};i===null?i=[q]:i.push(q),r++}else{const q=r;for(const P in e)if(!(P==="resource"||P==="path")){const F={instancePath:t,schemaPath:"#/definitions/VFSReference/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:P},message:"must NOT have additional properties"};i===null?i=[F]:i.push(F),r++;break}if(q===r){if(e.resource!==void 0){let P=e.resource;const F=r;if(typeof P!="string"){const O={instancePath:t+"/resource",schemaPath:"#/definitions/VFSReference/properties/resource/type",keyword:"type",params:{type:"string"},message:"must be string"};i===null?i=[O]:i.push(O),r++}if(P!=="vfs"){const O={instancePath:t+"/resource",schemaPath:"#/definitions/VFSReference/properties/resource/const",keyword:"const",params:{allowedValue:"vfs"},message:"must be equal to constant"};i===null?i=[O]:i.push(O),r++}var b=F===r}else var b=!0;if(b)if(e.path!==void 0){const P=r;if(typeof e.path!="string"){const O={instancePath:t+"/path",schemaPath:"#/definitions/VFSReference/properties/path/type",keyword:"type",params:{type:"string"},message:"must be string"};i===null?i=[O]:i.push(O),r++}var b=P===r}else var b=!0}}}else{const W={instancePath:t,schemaPath:"#/definitions/VFSReference/type",keyword:"type",params:{type:"object"},message:"must be object"};i===null?i=[W]:i.push(W),r++}var v=u===r;if(m=m||v,!m){const W=r;if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let F;if(e.resource===void 0&&(F="resource")||e.name===void 0&&(F="name")||e.contents===void 0&&(F="contents")){const O={instancePath:t,schemaPath:"#/definitions/LiteralReference/required",keyword:"required",params:{missingProperty:F},message:"must have required property '"+F+"'"};i===null?i=[O]:i.push(O),r++}else{const O=r;for(const x in e)if(!(x==="resource"||x==="name"||x==="contents")){const T={instancePath:t,schemaPath:"#/definitions/LiteralReference/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:x},message:"must NOT have additional properties"};i===null?i=[T]:i.push(T),r++;break}if(O===r){if(e.resource!==void 0){let x=e.resource;const T=r;if(typeof x!="string"){const k={instancePath:t+"/resource",schemaPath:"#/definitions/LiteralReference/properties/resource/type",keyword:"type",params:{type:"string"},message:"must be string"};i===null?i=[k]:i.push(k),r++}if(x!=="literal"){const k={instancePath:t+"/resource",schemaPath:"#/definitions/LiteralReference/properties/resource/const",keyword:"const",params:{allowedValue:"literal"},message:"must be equal to constant"};i===null?i=[k]:i.push(k),r++}var w=T===r}else var w=!0;if(w){if(e.name!==void 0){const x=r;if(typeof e.name!="string"){const k={instancePath:t+"/name",schemaPath:"#/definitions/LiteralReference/properties/name/type",keyword:"type",params:{type:"string"},message:"must be string"};i===null?i=[k]:i.push(k),r++}var w=x===r}else var w=!0;if(w)if(e.contents!==void 0){let x=e.contents;const T=r,k=r;let I=!1;const j=r;if(typeof x!="string"){const X={instancePath:t+"/contents",schemaPath:"#/definitions/LiteralReference/properties/contents/anyOf/0/type",keyword:"type",params:{type:"string"},message:"must be string"};i===null?i=[X]:i.push(X),r++}var L=j===r;if(I=I||L,!I){const X=r;if(r===X)if(x&&typeof x=="object"&&!Array.isArray(x)){let M;if(x.BYTES_PER_ELEMENT===void 0&&(M="BYTES_PER_ELEMENT")||x.buffer===void 0&&(M="buffer")||x.byteLength===void 0&&(M="byteLength")||x.byteOffset===void 0&&(M="byteOffset")||x.length===void 0&&(M="length")){const Y={instancePath:t+"/contents",schemaPath:"#/definitions/LiteralReference/properties/contents/anyOf/1/required",keyword:"required",params:{missingProperty:M},message:"must have required property '"+M+"'"};i===null?i=[Y]:i.push(Y),r++}else{const Y=r;for(const G in x)if(!(G==="BYTES_PER_ELEMENT"||G==="buffer"||G==="byteLength"||G==="byteOffset"||G==="length")){let se=x[G];const ee=r;if(!(typeof se=="number"&&isFinite(se))){const J={instancePath:t+"/contents/"+G.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/definitions/LiteralReference/properties/contents/anyOf/1/additionalProperties/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[J]:i.push(J),r++}var E=ee===r;if(!E)break}if(Y===r){if(x.BYTES_PER_ELEMENT!==void 0){let G=x.BYTES_PER_ELEMENT;const se=r;if(!(typeof G=="number"&&isFinite(G))){const ee={instancePath:t+"/contents/BYTES_PER_ELEMENT",schemaPath:"#/definitions/LiteralReference/properties/contents/anyOf/1/properties/BYTES_PER_ELEMENT/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[ee]:i.push(ee),r++}var z=se===r}else var z=!0;if(z){if(x.buffer!==void 0){let G=x.buffer;const se=r;if(r===se)if(G&&typeof G=="object"&&!Array.isArray(G)){let J;if(G.byteLength===void 0&&(J="byteLength")){const _={instancePath:t+"/contents/buffer",schemaPath:"#/definitions/LiteralReference/properties/contents/anyOf/1/properties/buffer/required",keyword:"required",params:{missingProperty:J},message:"must have required property '"+J+"'"};i===null?i=[_]:i.push(_),r++}else{const _=r;for(const te in G)if(te!=="byteLength"){const ne={instancePath:t+"/contents/buffer",schemaPath:"#/definitions/LiteralReference/properties/contents/anyOf/1/properties/buffer/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:te},message:"must NOT have additional properties"};i===null?i=[ne]:i.push(ne),r++;break}if(_===r&&G.byteLength!==void 0){let te=G.byteLength;if(!(typeof te=="number"&&isFinite(te))){const ne={instancePath:t+"/contents/buffer/byteLength",schemaPath:"#/definitions/LiteralReference/properties/contents/anyOf/1/properties/buffer/properties/byteLength/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[ne]:i.push(ne),r++}}}}else{const J={instancePath:t+"/contents/buffer",schemaPath:"#/definitions/LiteralReference/properties/contents/anyOf/1/properties/buffer/type",keyword:"type",params:{type:"object"},message:"must be object"};i===null?i=[J]:i.push(J),r++}var z=se===r}else var z=!0;if(z){if(x.byteLength!==void 0){let G=x.byteLength;const se=r;if(!(typeof G=="number"&&isFinite(G))){const J={instancePath:t+"/contents/byteLength",schemaPath:"#/definitions/LiteralReference/properties/contents/anyOf/1/properties/byteLength/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[J]:i.push(J),r++}var z=se===r}else var z=!0;if(z){if(x.byteOffset!==void 0){let G=x.byteOffset;const se=r;if(!(typeof G=="number"&&isFinite(G))){const J={instancePath:t+"/contents/byteOffset",schemaPath:"#/definitions/LiteralReference/properties/contents/anyOf/1/properties/byteOffset/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[J]:i.push(J),r++}var z=se===r}else var z=!0;if(z)if(x.length!==void 0){let G=x.length;const se=r;if(!(typeof G=="number"&&isFinite(G))){const J={instancePath:t+"/contents/length",schemaPath:"#/definitions/LiteralReference/properties/contents/anyOf/1/properties/length/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[J]:i.push(J),r++}var z=se===r}else var z=!0}}}}}}else{const M={instancePath:t+"/contents",schemaPath:"#/definitions/LiteralReference/properties/contents/anyOf/1/type",keyword:"type",params:{type:"object"},message:"must be object"};i===null?i=[M]:i.push(M),r++}var L=X===r;I=I||L}if(I)r=k,i!==null&&(k?i.length=k:i=null);else{const X={instancePath:t+"/contents",schemaPath:"#/definitions/LiteralReference/properties/contents/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};i===null?i=[X]:i.push(X),r++}var w=T===r}else var w=!0}}}}else{const F={instancePath:t,schemaPath:"#/definitions/LiteralReference/type",keyword:"type",params:{type:"object"},message:"must be object"};i===null?i=[F]:i.push(F),r++}var v=W===r;if(m=m||v,!m){const F=r;if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let T;if(e.resource===void 0&&(T="resource")||e.slug===void 0&&(T="slug")){const k={instancePath:t,schemaPath:"#/definitions/CoreThemeReference/required",keyword:"required",params:{missingProperty:T},message:"must have required property '"+T+"'"};i===null?i=[k]:i.push(k),r++}else{const k=r;for(const I in e)if(!(I==="resource"||I==="slug")){const j={instancePath:t,schemaPath:"#/definitions/CoreThemeReference/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:I},message:"must NOT have additional properties"};i===null?i=[j]:i.push(j),r++;break}if(k===r){if(e.resource!==void 0){let I=e.resource;const j=r;if(typeof I!="string"){const D={instancePath:t+"/resource",schemaPath:"#/definitions/CoreThemeReference/properties/resource/type",keyword:"type",params:{type:"string"},message:"must be string"};i===null?i=[D]:i.push(D),r++}if(I!=="wordpress.org/themes"){const D={instancePath:t+"/resource",schemaPath:"#/definitions/CoreThemeReference/properties/resource/const",keyword:"const",params:{allowedValue:"wordpress.org/themes"},message:"must be equal to constant"};i===null?i=[D]:i.push(D),r++}var N=j===r}else var N=!0;if(N)if(e.slug!==void 0){const I=r;if(typeof e.slug!="string"){const D={instancePath:t+"/slug",schemaPath:"#/definitions/CoreThemeReference/properties/slug/type",keyword:"type",params:{type:"string"},message:"must be string"};i===null?i=[D]:i.push(D),r++}var N=I===r}else var N=!0}}}else{const T={instancePath:t,schemaPath:"#/definitions/CoreThemeReference/type",keyword:"type",params:{type:"object"},message:"must be object"};i===null?i=[T]:i.push(T),r++}var v=F===r;if(m=m||v,!m){const T=r;if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let j;if(e.resource===void 0&&(j="resource")||e.slug===void 0&&(j="slug")){const D={instancePath:t,schemaPath:"#/definitions/CorePluginReference/required",keyword:"required",params:{missingProperty:j},message:"must have required property '"+j+"'"};i===null?i=[D]:i.push(D),r++}else{const D=r;for(const X in e)if(!(X==="resource"||X==="slug")){const Z={instancePath:t,schemaPath:"#/definitions/CorePluginReference/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:X},message:"must NOT have additional properties"};i===null?i=[Z]:i.push(Z),r++;break}if(D===r){if(e.resource!==void 0){let X=e.resource;const Z=r;if(typeof X!="string"){const M={instancePath:t+"/resource",schemaPath:"#/definitions/CorePluginReference/properties/resource/type",keyword:"type",params:{type:"string"},message:"must be string"};i===null?i=[M]:i.push(M),r++}if(X!=="wordpress.org/plugins"){const M={instancePath:t+"/resource",schemaPath:"#/definitions/CorePluginReference/properties/resource/const",keyword:"const",params:{allowedValue:"wordpress.org/plugins"},message:"must be equal to constant"};i===null?i=[M]:i.push(M),r++}var U=Z===r}else var U=!0;if(U)if(e.slug!==void 0){const X=r;if(typeof e.slug!="string"){const M={instancePath:t+"/slug",schemaPath:"#/definitions/CorePluginReference/properties/slug/type",keyword:"type",params:{type:"string"},message:"must be string"};i===null?i=[M]:i.push(M),r++}var U=X===r}else var U=!0}}}else{const j={instancePath:t,schemaPath:"#/definitions/CorePluginReference/type",keyword:"type",params:{type:"object"},message:"must be object"};i===null?i=[j]:i.push(j),r++}var v=T===r;if(m=m||v,!m){const j=r;if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let Z;if(e.resource===void 0&&(Z="resource")||e.url===void 0&&(Z="url")){const M={instancePath:t,schemaPath:"#/definitions/UrlReference/required",keyword:"required",params:{missingProperty:Z},message:"must have required property '"+Z+"'"};i===null?i=[M]:i.push(M),r++}else{const M=r;for(const Y in e)if(!(Y==="resource"||Y==="url"||Y==="caption")){const G={instancePath:t,schemaPath:"#/definitions/UrlReference/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:Y},message:"must NOT have additional properties"};i===null?i=[G]:i.push(G),r++;break}if(M===r){if(e.resource!==void 0){let Y=e.resource;const G=r;if(typeof Y!="string"){const se={instancePath:t+"/resource",schemaPath:"#/definitions/UrlReference/properties/resource/type",keyword:"type",params:{type:"string"},message:"must be string"};i===null?i=[se]:i.push(se),r++}if(Y!=="url"){const se={instancePath:t+"/resource",schemaPath:"#/definitions/UrlReference/properties/resource/const",keyword:"const",params:{allowedValue:"url"},message:"must be equal to constant"};i===null?i=[se]:i.push(se),r++}var B=G===r}else var B=!0;if(B){if(e.url!==void 0){const Y=r;if(typeof e.url!="string"){const se={instancePath:t+"/url",schemaPath:"#/definitions/UrlReference/properties/url/type",keyword:"type",params:{type:"string"},message:"must be string"};i===null?i=[se]:i.push(se),r++}var B=Y===r}else var B=!0;if(B)if(e.caption!==void 0){const Y=r;if(typeof e.caption!="string"){const se={instancePath:t+"/caption",schemaPath:"#/definitions/UrlReference/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"};i===null?i=[se]:i.push(se),r++}var B=Y===r}else var B=!0}}}}else{const Z={instancePath:t,schemaPath:"#/definitions/UrlReference/type",keyword:"type",params:{type:"object"},message:"must be object"};i===null?i=[Z]:i.push(Z),r++}var v=j===r;m=m||v}}}}if(m)r=p,i!==null&&(p?i.length=p:i=null);else{const W={instancePath:t,schemaPath:"#/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};return i===null?i=[W]:i.push(W),r++,le.errors=i,!1}return le.errors=i,r===0}const Kr={type:"object",discriminator:{propertyName:"step"},required:["step"],oneOf:[{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"activatePlugin"},pluginPath:{type:"string",description:"Path to the plugin directory as absolute path (/wordpress/wp-content/plugins/plugin-name); or the plugin entry file relative to the plugins directory (plugin-name/plugin-name.php)."},pluginName:{type:"string",description:"Optional. Plugin name to display in the progress bar."}},required:["pluginPath","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"activateTheme"},themeFolderName:{type:"string",description:"The name of the theme folder inside wp-content/themes/"}},required:["step","themeFolderName"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"cp"},fromPath:{type:"string",description:"Source path"},toPath:{type:"string",description:"Target path"}},required:["fromPath","step","toPath"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"defineWpConfigConsts"},consts:{type:"object",additionalProperties:{},description:"The constants to define"},method:{type:"string",enum:["rewrite-wp-config","define-before-run"],description:`The method of defining the constants in wp-config.php. Possible values are:

- rewrite-wp-config: Default. Rewrites the wp-config.php file to                      explicitly call define() with the requested                      name and value. This method alters the file                      on the disk, but it doesn't conflict with                      existing define() calls in wp-config.php.

- define-before-run: Defines the constant before running the requested                      script. It doesn't alter any files on the disk, but                      constants defined this way may conflict with existing                      define() calls in wp-config.php.`},virtualize:{type:"boolean",deprecated:`This option is noop and will be removed in a future version.
This option is only kept in here to avoid breaking Blueprint schema validation
for existing apps using this option.`}},required:["consts","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"defineSiteUrl"},siteUrl:{type:"string",description:"The URL"}},required:["siteUrl","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"enableMultisite"},wpCliPath:{type:"string",description:"wp-cli.phar path"}},required:["step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"importWxr"},file:{$ref:"#/definitions/FileReference",description:"The file to import"},importer:{type:"string",enum:["data-liberation","default"],description:"The importer to use. Possible values:\n\n- `default`: The importer from https://github.com/humanmade/WordPress-Importer\n- `data-liberation`: The experimental Data Liberation WXR importer developed at                      https://github.com/WordPress/wordpress-playground/issues/1894\n\nThis option is deprecated. The syntax will not be removed, but once the Data Liberation importer matures, it will become the only supported importer and the `importer` option will be ignored.",deprecated:!0}},required:["file","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"importThemeStarterContent",description:"The step identifier."},themeSlug:{type:"string",description:"The name of the theme to import content from."}},required:["step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"importWordPressFiles"},wordPressFilesZip:{$ref:"#/definitions/FileReference",description:"The zip file containing the top-level WordPress files and directories."},pathInZip:{type:"string",description:"The path inside the zip file where the WordPress files are."}},required:["step","wordPressFilesZip"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},ifAlreadyInstalled:{type:"string",enum:["overwrite","skip","error"],description:"What to do if the asset already exists."},step:{type:"string",const:"installPlugin",description:"The step identifier."},pluginData:{anyOf:[{$ref:"#/definitions/FileReference"},{$ref:"#/definitions/DirectoryReference"}],description:"The plugin files to install. It can be a plugin zip file, a single PHP file, or a directory containing all the plugin files at its root."},pluginZipFile:{$ref:"#/definitions/FileReference",deprecated:". Use `pluginData` instead."},options:{$ref:"#/definitions/InstallPluginOptions",description:"Optional installation options."}},required:["pluginData","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},ifAlreadyInstalled:{type:"string",enum:["overwrite","skip","error"],description:"What to do if the asset already exists."},step:{type:"string",const:"installTheme",description:"The step identifier."},themeData:{anyOf:[{$ref:"#/definitions/FileReference"},{$ref:"#/definitions/DirectoryReference"}],description:"The theme files to install. It can be either a theme zip file, or a directory containing all the theme files at its root."},themeZipFile:{$ref:"#/definitions/FileReference",deprecated:". Use `themeData` instead."},options:{$ref:"#/definitions/InstallThemeOptions",description:"Optional installation options."}},required:["step","themeData"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"login"},username:{type:"string",description:"The user to log in as. Defaults to 'admin'."},password:{type:"string",deprecated:`The password field is deprecated and will be removed in a future version.
Only the username field is required for user authentication.`}},required:["step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"mkdir"},path:{type:"string",description:"The path of the directory you want to create"}},required:["path","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"mv"},fromPath:{type:"string",description:"Source path"},toPath:{type:"string",description:"Target path"}},required:["fromPath","step","toPath"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"resetData"}},required:["step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"request"},request:{$ref:"#/definitions/PHPRequest",description:"Request details (See /wordpress-playground/api/universal/interface/PHPRequest)"}},required:["request","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"rm"},path:{type:"string",description:"The path to remove"}},required:["path","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"rmdir"},path:{type:"string",description:"The path to remove"}},required:["path","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"runPHP",description:"The step identifier."},code:{type:"string",description:"The PHP code to run."}},required:["code","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"runPHPWithOptions"},options:{$ref:"#/definitions/PHPRunOptions",description:"Run options (See /wordpress-playground/api/universal/interface/PHPRunOptions/))"}},required:["options","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"runWpInstallationWizard"},options:{$ref:"#/definitions/WordPressInstallationOptions"}},required:["options","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"runSql",description:"The step identifier."},sql:{$ref:"#/definitions/FileReference",description:"The SQL to run. Each non-empty line must contain a valid SQL query."}},required:["sql","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"setSiteOptions",description:'The name of the step. Must be "setSiteOptions".'},options:{type:"object",additionalProperties:{},description:"The options to set on the site."}},required:["options","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"unzip"},zipFile:{$ref:"#/definitions/FileReference",description:"The zip file to extract"},zipPath:{type:"string",description:"The path of the zip file to extract",deprecated:"Use zipFile instead."},extractToPath:{type:"string",description:"The path to extract the zip file to"}},required:["extractToPath","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"updateUserMeta"},meta:{type:"object",additionalProperties:{},description:'An object of user meta values to set, e.g. { "first_name": "John" }'},userId:{type:"number",description:"User ID"}},required:["meta","step","userId"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"writeFile"},path:{type:"string",description:"The path of the file to write to"},data:{anyOf:[{$ref:"#/definitions/FileReference"},{type:"string"},{type:"object",properties:{BYTES_PER_ELEMENT:{type:"number"},buffer:{type:"object",properties:{byteLength:{type:"number"}},required:["byteLength"],additionalProperties:!1},byteLength:{type:"number"},byteOffset:{type:"number"},length:{type:"number"}},required:["BYTES_PER_ELEMENT","buffer","byteLength","byteOffset","length"],additionalProperties:{type:"number"}}],description:"The data to write"}},required:["data","path","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"writeFiles"},writeToPath:{type:"string",description:"The path of the file to write to"},filesTree:{$ref:"#/definitions/DirectoryReference",description:"The data to write"}},required:["filesTree","step","writeToPath"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"wp-cli",description:"The step identifier."},command:{anyOf:[{type:"string"},{type:"array",items:{type:"string"}}],description:"The WP CLI command to run."},wpCliPath:{type:"string",description:"wp-cli.phar path"}},required:["command","step"]},{type:"object",additionalProperties:!1,properties:{progress:{type:"object",properties:{weight:{type:"number"},caption:{type:"string"}},additionalProperties:!1},step:{type:"string",const:"setSiteLanguage"},language:{type:"string",description:"The language to set, e.g. 'en_US'"}},required:["language","step"]}]},Ju={type:"object",additionalProperties:{anyOf:[{$ref:"#/definitions/FileTree"},{type:["object","string"]}]},properties:{}},Ms={validate:Ft};function Ft(e,{instancePath:t="",parentData:s,parentDataProperty:n,rootData:o=e}={}){let i=null,r=0;if(r===0)if(e&&typeof e=="object"&&!Array.isArray(e))for(const u in e){let d=e[u];const b=r,v=r;let w=!1;const L=r;Ms.validate(d,{instancePath:t+"/"+u.replace(/~/g,"~0").replace(/\//g,"~1"),parentData:e,parentDataProperty:u,rootData:o})||(i=i===null?Ms.validate.errors:i.concat(Ms.validate.errors),r=i.length);var p=L===r;if(w=w||p,!w){const E=r;if(!(d&&typeof d=="object"&&!Array.isArray(d))&&typeof d!="string"){const N={instancePath:t+"/"+u.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/additionalProperties/anyOf/1/type",keyword:"type",params:{type:Ju.additionalProperties.anyOf[1].type},message:"must be object,string"};i===null?i=[N]:i.push(N),r++}var p=E===r;w=w||p}if(w)r=v,i!==null&&(v?i.length=v:i=null);else{const E={instancePath:t+"/"+u.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/additionalProperties/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};return i===null?i=[E]:i.push(E),r++,Ft.errors=i,!1}var m=b===r;if(!m)break}else return Ft.errors=[{instancePath:t,schemaPath:"#/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;return Ft.errors=i,r===0}function ot(e,{instancePath:t="",parentData:s,parentDataProperty:n,rootData:o=e}={}){let i=null,r=0;if(r===0)if(e&&typeof e=="object"&&!Array.isArray(e)){let m;if(e.files===void 0&&(m="files")||e.name===void 0&&(m="name")||e.resource===void 0&&(m="resource"))return ot.errors=[{instancePath:t,schemaPath:"#/required",keyword:"required",params:{missingProperty:m},message:"must have required property '"+m+"'"}],!1;{const u=r;for(const d in e)if(!(d==="resource"||d==="files"||d==="name"))return ot.errors=[{instancePath:t,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:d},message:"must NOT have additional properties"}],!1;if(u===r){if(e.resource!==void 0){let d=e.resource;const b=r;if(typeof d!="string")return ot.errors=[{instancePath:t+"/resource",schemaPath:"#/properties/resource/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(d!=="literal:directory")return ot.errors=[{instancePath:t+"/resource",schemaPath:"#/properties/resource/const",keyword:"const",params:{allowedValue:"literal:directory"},message:"must be equal to constant"}],!1;var p=b===r}else var p=!0;if(p){if(e.files!==void 0){const d=r;Ft(e.files,{instancePath:t+"/files",parentData:e,parentDataProperty:"files",rootData:o})||(i=i===null?Ft.errors:i.concat(Ft.errors),r=i.length);var p=d===r}else var p=!0;if(p)if(e.name!==void 0){const d=r;if(typeof e.name!="string")return ot.errors=[{instancePath:t+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var p=d===r}else var p=!0}}}}else return ot.errors=[{instancePath:t,schemaPath:"#/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;return ot.errors=i,r===0}function $e(e,{instancePath:t="",parentData:s,parentDataProperty:n,rootData:o=e}={}){let i=null,r=0;const p=r;let m=!1;const u=r;if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let w;if(e.resource===void 0&&(w="resource")||e.url===void 0&&(w="url")||e.ref===void 0&&(w="ref")||e.path===void 0&&(w="path")){const L={instancePath:t,schemaPath:"#/definitions/GitDirectoryReference/required",keyword:"required",params:{missingProperty:w},message:"must have required property '"+w+"'"};i===null?i=[L]:i.push(L),r++}else{const L=r;for(const E in e)if(!(E==="resource"||E==="url"||E==="ref"||E==="path")){const z={instancePath:t,schemaPath:"#/definitions/GitDirectoryReference/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:E},message:"must NOT have additional properties"};i===null?i=[z]:i.push(z),r++;break}if(L===r){if(e.resource!==void 0){let E=e.resource;const z=r;if(typeof E!="string"){const N={instancePath:t+"/resource",schemaPath:"#/definitions/GitDirectoryReference/properties/resource/type",keyword:"type",params:{type:"string"},message:"must be string"};i===null?i=[N]:i.push(N),r++}if(E!=="git:directory"){const N={instancePath:t+"/resource",schemaPath:"#/definitions/GitDirectoryReference/properties/resource/const",keyword:"const",params:{allowedValue:"git:directory"},message:"must be equal to constant"};i===null?i=[N]:i.push(N),r++}var b=z===r}else var b=!0;if(b){if(e.url!==void 0){const E=r;if(typeof e.url!="string"){const N={instancePath:t+"/url",schemaPath:"#/definitions/GitDirectoryReference/properties/url/type",keyword:"type",params:{type:"string"},message:"must be string"};i===null?i=[N]:i.push(N),r++}var b=E===r}else var b=!0;if(b){if(e.ref!==void 0){const E=r;if(typeof e.ref!="string"){const N={instancePath:t+"/ref",schemaPath:"#/definitions/GitDirectoryReference/properties/ref/type",keyword:"type",params:{type:"string"},message:"must be string"};i===null?i=[N]:i.push(N),r++}var b=E===r}else var b=!0;if(b)if(e.path!==void 0){const E=r;if(typeof e.path!="string"){const N={instancePath:t+"/path",schemaPath:"#/definitions/GitDirectoryReference/properties/path/type",keyword:"type",params:{type:"string"},message:"must be string"};i===null?i=[N]:i.push(N),r++}var b=E===r}else var b=!0}}}}}else{const w={instancePath:t,schemaPath:"#/definitions/GitDirectoryReference/type",keyword:"type",params:{type:"object"},message:"must be object"};i===null?i=[w]:i.push(w),r++}var v=u===r;if(m=m||v,!m){const w=r;ot(e,{instancePath:t,parentData:s,parentDataProperty:n,rootData:o})||(i=i===null?ot.errors:i.concat(ot.errors),r=i.length);var v=w===r;m=m||v}if(m)r=p,i!==null&&(p?i.length=p:i=null);else{const w={instancePath:t,schemaPath:"#/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};return i===null?i=[w]:i.push(w),r++,$e.errors=i,!1}return $e.errors=i,r===0}const Co={type:"string",enum:["GET","POST","HEAD","OPTIONS","PATCH","PUT","DELETE"]};function We(e,{instancePath:t="",parentData:s,parentDataProperty:n,rootData:o=e}={}){let i=null,r=0;if(r===0)if(e&&typeof e=="object"&&!Array.isArray(e)){let N;if(e.url===void 0&&(N="url"))return We.errors=[{instancePath:t,schemaPath:"#/required",keyword:"required",params:{missingProperty:N},message:"must have required property '"+N+"'"}],!1;{const U=r;for(const B in e)if(!(B==="method"||B==="url"||B==="headers"||B==="body"))return We.errors=[{instancePath:t,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:B},message:"must NOT have additional properties"}],!1;if(U===r){if(e.method!==void 0){let B=e.method;const W=r;if(typeof B!="string")return We.errors=[{instancePath:t+"/method",schemaPath:"#/definitions/HTTPMethod/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(!(B==="GET"||B==="POST"||B==="HEAD"||B==="OPTIONS"||B==="PATCH"||B==="PUT"||B==="DELETE"))return We.errors=[{instancePath:t+"/method",schemaPath:"#/definitions/HTTPMethod/enum",keyword:"enum",params:{allowedValues:Co.enum},message:"must be equal to one of the allowed values"}],!1;var p=W===r}else var p=!0;if(p){if(e.url!==void 0){const B=r;if(typeof e.url!="string")return We.errors=[{instancePath:t+"/url",schemaPath:"#/properties/url/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var p=B===r}else var p=!0;if(p){if(e.headers!==void 0){let B=e.headers;const W=r;if(r===r)if(B&&typeof B=="object"&&!Array.isArray(B))for(const F in B){const O=r;if(typeof B[F]!="string")return We.errors=[{instancePath:t+"/headers/"+F.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/definitions/PHPRequestHeaders/additionalProperties/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var m=O===r;if(!m)break}else return We.errors=[{instancePath:t+"/headers",schemaPath:"#/definitions/PHPRequestHeaders/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var p=W===r}else var p=!0;if(p)if(e.body!==void 0){let B=e.body;const W=r,q=r;let P=!1;const F=r;if(typeof B!="string"){const x={instancePath:t+"/body",schemaPath:"#/properties/body/anyOf/0/type",keyword:"type",params:{type:"string"},message:"must be string"};i===null?i=[x]:i.push(x),r++}var u=F===r;if(P=P||u,!P){const x=r;if(r===x)if(B&&typeof B=="object"&&!Array.isArray(B)){let k;if(B.BYTES_PER_ELEMENT===void 0&&(k="BYTES_PER_ELEMENT")||B.buffer===void 0&&(k="buffer")||B.byteLength===void 0&&(k="byteLength")||B.byteOffset===void 0&&(k="byteOffset")||B.length===void 0&&(k="length")){const I={instancePath:t+"/body",schemaPath:"#/properties/body/anyOf/1/required",keyword:"required",params:{missingProperty:k},message:"must have required property '"+k+"'"};i===null?i=[I]:i.push(I),r++}else{const I=r;for(const j in B)if(!(j==="BYTES_PER_ELEMENT"||j==="buffer"||j==="byteLength"||j==="byteOffset"||j==="length")){let D=B[j];const X=r;if(!(typeof D=="number"&&isFinite(D))){const Z={instancePath:t+"/body/"+j.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/properties/body/anyOf/1/additionalProperties/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[Z]:i.push(Z),r++}var d=X===r;if(!d)break}if(I===r){if(B.BYTES_PER_ELEMENT!==void 0){let j=B.BYTES_PER_ELEMENT;const D=r;if(!(typeof j=="number"&&isFinite(j))){const X={instancePath:t+"/body/BYTES_PER_ELEMENT",schemaPath:"#/properties/body/anyOf/1/properties/BYTES_PER_ELEMENT/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[X]:i.push(X),r++}var b=D===r}else var b=!0;if(b){if(B.buffer!==void 0){let j=B.buffer;const D=r;if(r===D)if(j&&typeof j=="object"&&!Array.isArray(j)){let Z;if(j.byteLength===void 0&&(Z="byteLength")){const M={instancePath:t+"/body/buffer",schemaPath:"#/properties/body/anyOf/1/properties/buffer/required",keyword:"required",params:{missingProperty:Z},message:"must have required property '"+Z+"'"};i===null?i=[M]:i.push(M),r++}else{const M=r;for(const Y in j)if(Y!=="byteLength"){const G={instancePath:t+"/body/buffer",schemaPath:"#/properties/body/anyOf/1/properties/buffer/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:Y},message:"must NOT have additional properties"};i===null?i=[G]:i.push(G),r++;break}if(M===r&&j.byteLength!==void 0){let Y=j.byteLength;if(!(typeof Y=="number"&&isFinite(Y))){const G={instancePath:t+"/body/buffer/byteLength",schemaPath:"#/properties/body/anyOf/1/properties/buffer/properties/byteLength/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[G]:i.push(G),r++}}}}else{const Z={instancePath:t+"/body/buffer",schemaPath:"#/properties/body/anyOf/1/properties/buffer/type",keyword:"type",params:{type:"object"},message:"must be object"};i===null?i=[Z]:i.push(Z),r++}var b=D===r}else var b=!0;if(b){if(B.byteLength!==void 0){let j=B.byteLength;const D=r;if(!(typeof j=="number"&&isFinite(j))){const Z={instancePath:t+"/body/byteLength",schemaPath:"#/properties/body/anyOf/1/properties/byteLength/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[Z]:i.push(Z),r++}var b=D===r}else var b=!0;if(b){if(B.byteOffset!==void 0){let j=B.byteOffset;const D=r;if(!(typeof j=="number"&&isFinite(j))){const Z={instancePath:t+"/body/byteOffset",schemaPath:"#/properties/body/anyOf/1/properties/byteOffset/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[Z]:i.push(Z),r++}var b=D===r}else var b=!0;if(b)if(B.length!==void 0){let j=B.length;const D=r;if(!(typeof j=="number"&&isFinite(j))){const Z={instancePath:t+"/body/length",schemaPath:"#/properties/body/anyOf/1/properties/length/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[Z]:i.push(Z),r++}var b=D===r}else var b=!0}}}}}}else{const k={instancePath:t+"/body",schemaPath:"#/properties/body/anyOf/1/type",keyword:"type",params:{type:"object"},message:"must be object"};i===null?i=[k]:i.push(k),r++}var u=x===r;if(P=P||u,!P){const k=r;if(r===k)if(B&&typeof B=="object"&&!Array.isArray(B))for(const j in B){let D=B[j];const X=r,Z=r;let M=!1;const Y=r;if(typeof D!="string"){const G={instancePath:t+"/body/"+j.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/0/type",keyword:"type",params:{type:"string"},message:"must be string"};i===null?i=[G]:i.push(G),r++}var v=Y===r;if(M=M||v,!M){const G=r;if(r===G)if(D&&typeof D=="object"&&!Array.isArray(D)){let ee;if(D.BYTES_PER_ELEMENT===void 0&&(ee="BYTES_PER_ELEMENT")||D.buffer===void 0&&(ee="buffer")||D.byteLength===void 0&&(ee="byteLength")||D.byteOffset===void 0&&(ee="byteOffset")||D.length===void 0&&(ee="length")){const J={instancePath:t+"/body/"+j.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/1/required",keyword:"required",params:{missingProperty:ee},message:"must have required property '"+ee+"'"};i===null?i=[J]:i.push(J),r++}else{const J=r;for(const _ in D)if(!(_==="BYTES_PER_ELEMENT"||_==="buffer"||_==="byteLength"||_==="byteOffset"||_==="length")){let te=D[_];const ne=r;if(!(typeof te=="number"&&isFinite(te))){const re={instancePath:t+"/body/"+j.replace(/~/g,"~0").replace(/\//g,"~1")+"/"+_.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/1/additionalProperties/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[re]:i.push(re),r++}var w=ne===r;if(!w)break}if(J===r){if(D.BYTES_PER_ELEMENT!==void 0){let _=D.BYTES_PER_ELEMENT;const te=r;if(!(typeof _=="number"&&isFinite(_))){const ne={instancePath:t+"/body/"+j.replace(/~/g,"~0").replace(/\//g,"~1")+"/BYTES_PER_ELEMENT",schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/1/properties/BYTES_PER_ELEMENT/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[ne]:i.push(ne),r++}var L=te===r}else var L=!0;if(L){if(D.buffer!==void 0){let _=D.buffer;const te=r;if(r===te)if(_&&typeof _=="object"&&!Array.isArray(_)){let re;if(_.byteLength===void 0&&(re="byteLength")){const we={instancePath:t+"/body/"+j.replace(/~/g,"~0").replace(/\//g,"~1")+"/buffer",schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/1/properties/buffer/required",keyword:"required",params:{missingProperty:re},message:"must have required property '"+re+"'"};i===null?i=[we]:i.push(we),r++}else{const we=r;for(const Pe in _)if(Pe!=="byteLength"){const Fe={instancePath:t+"/body/"+j.replace(/~/g,"~0").replace(/\//g,"~1")+"/buffer",schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/1/properties/buffer/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:Pe},message:"must NOT have additional properties"};i===null?i=[Fe]:i.push(Fe),r++;break}if(we===r&&_.byteLength!==void 0){let Pe=_.byteLength;if(!(typeof Pe=="number"&&isFinite(Pe))){const Fe={instancePath:t+"/body/"+j.replace(/~/g,"~0").replace(/\//g,"~1")+"/buffer/byteLength",schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/1/properties/buffer/properties/byteLength/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[Fe]:i.push(Fe),r++}}}}else{const re={instancePath:t+"/body/"+j.replace(/~/g,"~0").replace(/\//g,"~1")+"/buffer",schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/1/properties/buffer/type",keyword:"type",params:{type:"object"},message:"must be object"};i===null?i=[re]:i.push(re),r++}var L=te===r}else var L=!0;if(L){if(D.byteLength!==void 0){let _=D.byteLength;const te=r;if(!(typeof _=="number"&&isFinite(_))){const re={instancePath:t+"/body/"+j.replace(/~/g,"~0").replace(/\//g,"~1")+"/byteLength",schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/1/properties/byteLength/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[re]:i.push(re),r++}var L=te===r}else var L=!0;if(L){if(D.byteOffset!==void 0){let _=D.byteOffset;const te=r;if(!(typeof _=="number"&&isFinite(_))){const re={instancePath:t+"/body/"+j.replace(/~/g,"~0").replace(/\//g,"~1")+"/byteOffset",schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/1/properties/byteOffset/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[re]:i.push(re),r++}var L=te===r}else var L=!0;if(L)if(D.length!==void 0){let _=D.length;const te=r;if(!(typeof _=="number"&&isFinite(_))){const re={instancePath:t+"/body/"+j.replace(/~/g,"~0").replace(/\//g,"~1")+"/length",schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/1/properties/length/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[re]:i.push(re),r++}var L=te===r}else var L=!0}}}}}}else{const ee={instancePath:t+"/body/"+j.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/1/type",keyword:"type",params:{type:"object"},message:"must be object"};i===null?i=[ee]:i.push(ee),r++}var v=G===r;if(M=M||v,!M){const ee=r;if(r===ee)if(D&&typeof D=="object"&&!Array.isArray(D)){let _;if(D.lastModified===void 0&&(_="lastModified")||D.name===void 0&&(_="name")||D.size===void 0&&(_="size")||D.type===void 0&&(_="type")||D.webkitRelativePath===void 0&&(_="webkitRelativePath")){const te={instancePath:t+"/body/"+j.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/2/required",keyword:"required",params:{missingProperty:_},message:"must have required property '"+_+"'"};i===null?i=[te]:i.push(te),r++}else{const te=r;for(const ne in D)if(!(ne==="size"||ne==="type"||ne==="lastModified"||ne==="name"||ne==="webkitRelativePath")){const re={instancePath:t+"/body/"+j.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/2/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:ne},message:"must NOT have additional properties"};i===null?i=[re]:i.push(re),r++;break}if(te===r){if(D.size!==void 0){let ne=D.size;const re=r;if(!(typeof ne=="number"&&isFinite(ne))){const we={instancePath:t+"/body/"+j.replace(/~/g,"~0").replace(/\//g,"~1")+"/size",schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/2/properties/size/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[we]:i.push(we),r++}var E=re===r}else var E=!0;if(E){if(D.type!==void 0){const ne=r;if(typeof D.type!="string"){const we={instancePath:t+"/body/"+j.replace(/~/g,"~0").replace(/\//g,"~1")+"/type",schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/2/properties/type/type",keyword:"type",params:{type:"string"},message:"must be string"};i===null?i=[we]:i.push(we),r++}var E=ne===r}else var E=!0;if(E){if(D.lastModified!==void 0){let ne=D.lastModified;const re=r;if(!(typeof ne=="number"&&isFinite(ne))){const Pe={instancePath:t+"/body/"+j.replace(/~/g,"~0").replace(/\//g,"~1")+"/lastModified",schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/2/properties/lastModified/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[Pe]:i.push(Pe),r++}var E=re===r}else var E=!0;if(E){if(D.name!==void 0){const ne=r;if(typeof D.name!="string"){const we={instancePath:t+"/body/"+j.replace(/~/g,"~0").replace(/\//g,"~1")+"/name",schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/2/properties/name/type",keyword:"type",params:{type:"string"},message:"must be string"};i===null?i=[we]:i.push(we),r++}var E=ne===r}else var E=!0;if(E)if(D.webkitRelativePath!==void 0){const ne=r;if(typeof D.webkitRelativePath!="string"){const we={instancePath:t+"/body/"+j.replace(/~/g,"~0").replace(/\//g,"~1")+"/webkitRelativePath",schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/2/properties/webkitRelativePath/type",keyword:"type",params:{type:"string"},message:"must be string"};i===null?i=[we]:i.push(we),r++}var E=ne===r}else var E=!0}}}}}}else{const _={instancePath:t+"/body/"+j.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf/2/type",keyword:"type",params:{type:"object"},message:"must be object"};i===null?i=[_]:i.push(_),r++}var v=ee===r;M=M||v}}if(M)r=Z,i!==null&&(Z?i.length=Z:i=null);else{const G={instancePath:t+"/body/"+j.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/properties/body/anyOf/2/additionalProperties/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};i===null?i=[G]:i.push(G),r++}var z=X===r;if(!z)break}else{const j={instancePath:t+"/body",schemaPath:"#/properties/body/anyOf/2/type",keyword:"type",params:{type:"object"},message:"must be object"};i===null?i=[j]:i.push(j),r++}var u=k===r;P=P||u}}if(P)r=q,i!==null&&(q?i.length=q:i=null);else{const x={instancePath:t+"/body",schemaPath:"#/properties/body/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};return i===null?i=[x]:i.push(x),r++,We.errors=i,!1}var p=W===r}else var p=!0}}}}}else return We.errors=[{instancePath:t,schemaPath:"#/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;return We.errors=i,r===0}const _u={type:"object",properties:{relativeUri:{type:"string",description:"Request path following the domain:port part."},scriptPath:{type:"string",description:"Path of the .php file to execute."},protocol:{type:"string",description:"Request protocol."},method:{$ref:"#/definitions/HTTPMethod",description:"Request method. Default: `GET`."},headers:{$ref:"#/definitions/PHPRequestHeaders",description:"Request headers."},body:{anyOf:[{type:"string"},{type:"object",properties:{BYTES_PER_ELEMENT:{type:"number"},buffer:{type:"object",properties:{byteLength:{type:"number"}},required:["byteLength"],additionalProperties:!1},byteLength:{type:"number"},byteOffset:{type:"number"},length:{type:"number"}},required:["BYTES_PER_ELEMENT","buffer","byteLength","byteOffset","length"],additionalProperties:{type:"number"}}],description:"Request body."},env:{type:"object",additionalProperties:{type:"string"},description:"Environment variables to set for this run."},$_SERVER:{type:"object",additionalProperties:{type:"string"},description:"$_SERVER entries to set for this run."},code:{type:"string",description:"The code snippet to eval instead of a php file."}},additionalProperties:!1};function Se(e,{instancePath:t="",parentData:s,parentDataProperty:n,rootData:o=e}={}){let i=null,r=0;if(r===0)if(e&&typeof e=="object"&&!Array.isArray(e)){const L=r;for(const E in e)if(!Oo.call(_u.properties,E))return Se.errors=[{instancePath:t,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:E},message:"must NOT have additional properties"}],!1;if(L===r){if(e.relativeUri!==void 0){const E=r;if(typeof e.relativeUri!="string")return Se.errors=[{instancePath:t+"/relativeUri",schemaPath:"#/properties/relativeUri/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var p=E===r}else var p=!0;if(p){if(e.scriptPath!==void 0){const E=r;if(typeof e.scriptPath!="string")return Se.errors=[{instancePath:t+"/scriptPath",schemaPath:"#/properties/scriptPath/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var p=E===r}else var p=!0;if(p){if(e.protocol!==void 0){const E=r;if(typeof e.protocol!="string")return Se.errors=[{instancePath:t+"/protocol",schemaPath:"#/properties/protocol/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var p=E===r}else var p=!0;if(p){if(e.method!==void 0){let E=e.method;const z=r;if(typeof E!="string")return Se.errors=[{instancePath:t+"/method",schemaPath:"#/definitions/HTTPMethod/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(!(E==="GET"||E==="POST"||E==="HEAD"||E==="OPTIONS"||E==="PATCH"||E==="PUT"||E==="DELETE"))return Se.errors=[{instancePath:t+"/method",schemaPath:"#/definitions/HTTPMethod/enum",keyword:"enum",params:{allowedValues:Co.enum},message:"must be equal to one of the allowed values"}],!1;var p=z===r}else var p=!0;if(p){if(e.headers!==void 0){let E=e.headers;const z=r;if(r===r)if(E&&typeof E=="object"&&!Array.isArray(E))for(const B in E){const W=r;if(typeof E[B]!="string")return Se.errors=[{instancePath:t+"/headers/"+B.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/definitions/PHPRequestHeaders/additionalProperties/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var m=W===r;if(!m)break}else return Se.errors=[{instancePath:t+"/headers",schemaPath:"#/definitions/PHPRequestHeaders/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var p=z===r}else var p=!0;if(p){if(e.body!==void 0){let E=e.body;const z=r,N=r;let U=!1;const B=r;if(typeof E!="string"){const q={instancePath:t+"/body",schemaPath:"#/properties/body/anyOf/0/type",keyword:"type",params:{type:"string"},message:"must be string"};i===null?i=[q]:i.push(q),r++}var u=B===r;if(U=U||u,!U){const q=r;if(r===q)if(E&&typeof E=="object"&&!Array.isArray(E)){let F;if(E.BYTES_PER_ELEMENT===void 0&&(F="BYTES_PER_ELEMENT")||E.buffer===void 0&&(F="buffer")||E.byteLength===void 0&&(F="byteLength")||E.byteOffset===void 0&&(F="byteOffset")||E.length===void 0&&(F="length")){const O={instancePath:t+"/body",schemaPath:"#/properties/body/anyOf/1/required",keyword:"required",params:{missingProperty:F},message:"must have required property '"+F+"'"};i===null?i=[O]:i.push(O),r++}else{const O=r;for(const x in E)if(!(x==="BYTES_PER_ELEMENT"||x==="buffer"||x==="byteLength"||x==="byteOffset"||x==="length")){let T=E[x];const k=r;if(!(typeof T=="number"&&isFinite(T))){const I={instancePath:t+"/body/"+x.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/properties/body/anyOf/1/additionalProperties/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[I]:i.push(I),r++}var d=k===r;if(!d)break}if(O===r){if(E.BYTES_PER_ELEMENT!==void 0){let x=E.BYTES_PER_ELEMENT;const T=r;if(!(typeof x=="number"&&isFinite(x))){const k={instancePath:t+"/body/BYTES_PER_ELEMENT",schemaPath:"#/properties/body/anyOf/1/properties/BYTES_PER_ELEMENT/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[k]:i.push(k),r++}var b=T===r}else var b=!0;if(b){if(E.buffer!==void 0){let x=E.buffer;const T=r;if(r===T)if(x&&typeof x=="object"&&!Array.isArray(x)){let I;if(x.byteLength===void 0&&(I="byteLength")){const j={instancePath:t+"/body/buffer",schemaPath:"#/properties/body/anyOf/1/properties/buffer/required",keyword:"required",params:{missingProperty:I},message:"must have required property '"+I+"'"};i===null?i=[j]:i.push(j),r++}else{const j=r;for(const D in x)if(D!=="byteLength"){const X={instancePath:t+"/body/buffer",schemaPath:"#/properties/body/anyOf/1/properties/buffer/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:D},message:"must NOT have additional properties"};i===null?i=[X]:i.push(X),r++;break}if(j===r&&x.byteLength!==void 0){let D=x.byteLength;if(!(typeof D=="number"&&isFinite(D))){const X={instancePath:t+"/body/buffer/byteLength",schemaPath:"#/properties/body/anyOf/1/properties/buffer/properties/byteLength/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[X]:i.push(X),r++}}}}else{const I={instancePath:t+"/body/buffer",schemaPath:"#/properties/body/anyOf/1/properties/buffer/type",keyword:"type",params:{type:"object"},message:"must be object"};i===null?i=[I]:i.push(I),r++}var b=T===r}else var b=!0;if(b){if(E.byteLength!==void 0){let x=E.byteLength;const T=r;if(!(typeof x=="number"&&isFinite(x))){const I={instancePath:t+"/body/byteLength",schemaPath:"#/properties/body/anyOf/1/properties/byteLength/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[I]:i.push(I),r++}var b=T===r}else var b=!0;if(b){if(E.byteOffset!==void 0){let x=E.byteOffset;const T=r;if(!(typeof x=="number"&&isFinite(x))){const I={instancePath:t+"/body/byteOffset",schemaPath:"#/properties/body/anyOf/1/properties/byteOffset/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[I]:i.push(I),r++}var b=T===r}else var b=!0;if(b)if(E.length!==void 0){let x=E.length;const T=r;if(!(typeof x=="number"&&isFinite(x))){const I={instancePath:t+"/body/length",schemaPath:"#/properties/body/anyOf/1/properties/length/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[I]:i.push(I),r++}var b=T===r}else var b=!0}}}}}}else{const F={instancePath:t+"/body",schemaPath:"#/properties/body/anyOf/1/type",keyword:"type",params:{type:"object"},message:"must be object"};i===null?i=[F]:i.push(F),r++}var u=q===r;U=U||u}if(U)r=N,i!==null&&(N?i.length=N:i=null);else{const q={instancePath:t+"/body",schemaPath:"#/properties/body/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};return i===null?i=[q]:i.push(q),r++,Se.errors=i,!1}var p=z===r}else var p=!0;if(p){if(e.env!==void 0){let E=e.env;const z=r;if(r===z)if(E&&typeof E=="object"&&!Array.isArray(E))for(const U in E){const B=r;if(typeof E[U]!="string")return Se.errors=[{instancePath:t+"/env/"+U.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/properties/env/additionalProperties/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var v=B===r;if(!v)break}else return Se.errors=[{instancePath:t+"/env",schemaPath:"#/properties/env/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var p=z===r}else var p=!0;if(p){if(e.$_SERVER!==void 0){let E=e.$_SERVER;const z=r;if(r===z)if(E&&typeof E=="object"&&!Array.isArray(E))for(const U in E){const B=r;if(typeof E[U]!="string")return Se.errors=[{instancePath:t+"/$_SERVER/"+U.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/properties/%24_SERVER/additionalProperties/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var w=B===r;if(!w)break}else return Se.errors=[{instancePath:t+"/$_SERVER",schemaPath:"#/properties/%24_SERVER/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var p=z===r}else var p=!0;if(p)if(e.code!==void 0){const E=r;if(typeof e.code!="string")return Se.errors=[{instancePath:t+"/code",schemaPath:"#/properties/code/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var p=E===r}else var p=!0}}}}}}}}}else return Se.errors=[{instancePath:t,schemaPath:"#/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;return Se.errors=i,r===0}function h(e,{instancePath:t="",parentData:s,parentDataProperty:n,rootData:o=e}={}){let i=null,r=0;if(r===0)if(e&&typeof e=="object"&&!Array.isArray(e)){let Ps;if(e.step===void 0&&(Ps="step"))return h.errors=[{instancePath:t,schemaPath:"#/required",keyword:"required",params:{missingProperty:Ps},message:"must have required property '"+Ps+"'"}],!1;{const pe=e.step;if(typeof pe=="string")if(pe==="activatePlugin"){if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let H;if(e.pluginPath===void 0&&(H="pluginPath")||e.step===void 0&&(H="step"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/0/required",keyword:"required",params:{missingProperty:H},message:"must have required property '"+H+"'"}],!1;{const Q=r;for(const a in e)if(!(a==="progress"||a==="step"||a==="pluginPath"||a==="pluginName"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/0/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:a},message:"must NOT have additional properties"}],!1;if(Q===r){if(e.progress!==void 0){let a=e.progress;const S=r;if(r===S)if(a&&typeof a=="object"&&!Array.isArray(a)){const V=r;for(const y in a)if(!(y==="weight"||y==="caption"))return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/0/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:y},message:"must NOT have additional properties"}],!1;if(V===r){if(a.weight!==void 0){let y=a.weight;const K=r;if(!(typeof y=="number"&&isFinite(y)))return h.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/0/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var p=K===r}else var p=!0;if(p)if(a.caption!==void 0){const y=r;if(typeof a.caption!="string")return h.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/0/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var p=y===r}else var p=!0}}else return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/0/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var m=S===r}else var m=!0;if(m){if(e.step!==void 0){let a=e.step;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/0/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(a!=="activatePlugin")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/0/properties/step/const",keyword:"const",params:{allowedValue:"activatePlugin"},message:"must be equal to constant"}],!1;var m=S===r}else var m=!0;if(m){if(e.pluginPath!==void 0){const a=r;if(typeof e.pluginPath!="string")return h.errors=[{instancePath:t+"/pluginPath",schemaPath:"#/oneOf/0/properties/pluginPath/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var m=a===r}else var m=!0;if(m)if(e.pluginName!==void 0){const a=r;if(typeof e.pluginName!="string")return h.errors=[{instancePath:t+"/pluginName",schemaPath:"#/oneOf/0/properties/pluginName/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var m=a===r}else var m=!0}}}}}else return h.errors=[{instancePath:t,schemaPath:"#/oneOf/0/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1}else if(pe==="activateTheme"){if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let H;if(e.step===void 0&&(H="step")||e.themeFolderName===void 0&&(H="themeFolderName"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/1/required",keyword:"required",params:{missingProperty:H},message:"must have required property '"+H+"'"}],!1;{const Q=r;for(const a in e)if(!(a==="progress"||a==="step"||a==="themeFolderName"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/1/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:a},message:"must NOT have additional properties"}],!1;if(Q===r){if(e.progress!==void 0){let a=e.progress;const S=r;if(r===S)if(a&&typeof a=="object"&&!Array.isArray(a)){const V=r;for(const y in a)if(!(y==="weight"||y==="caption"))return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/1/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:y},message:"must NOT have additional properties"}],!1;if(V===r){if(a.weight!==void 0){let y=a.weight;const K=r;if(!(typeof y=="number"&&isFinite(y)))return h.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/1/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var u=K===r}else var u=!0;if(u)if(a.caption!==void 0){const y=r;if(typeof a.caption!="string")return h.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/1/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var u=y===r}else var u=!0}}else return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/1/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var d=S===r}else var d=!0;if(d){if(e.step!==void 0){let a=e.step;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/1/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(a!=="activateTheme")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/1/properties/step/const",keyword:"const",params:{allowedValue:"activateTheme"},message:"must be equal to constant"}],!1;var d=S===r}else var d=!0;if(d)if(e.themeFolderName!==void 0){const a=r;if(typeof e.themeFolderName!="string")return h.errors=[{instancePath:t+"/themeFolderName",schemaPath:"#/oneOf/1/properties/themeFolderName/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var d=a===r}else var d=!0}}}}else return h.errors=[{instancePath:t,schemaPath:"#/oneOf/1/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1}else if(pe==="cp"){if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let H;if(e.fromPath===void 0&&(H="fromPath")||e.step===void 0&&(H="step")||e.toPath===void 0&&(H="toPath"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/2/required",keyword:"required",params:{missingProperty:H},message:"must have required property '"+H+"'"}],!1;{const Q=r;for(const a in e)if(!(a==="progress"||a==="step"||a==="fromPath"||a==="toPath"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/2/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:a},message:"must NOT have additional properties"}],!1;if(Q===r){if(e.progress!==void 0){let a=e.progress;const S=r;if(r===S)if(a&&typeof a=="object"&&!Array.isArray(a)){const V=r;for(const y in a)if(!(y==="weight"||y==="caption"))return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/2/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:y},message:"must NOT have additional properties"}],!1;if(V===r){if(a.weight!==void 0){let y=a.weight;const K=r;if(!(typeof y=="number"&&isFinite(y)))return h.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/2/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var b=K===r}else var b=!0;if(b)if(a.caption!==void 0){const y=r;if(typeof a.caption!="string")return h.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/2/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var b=y===r}else var b=!0}}else return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/2/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var v=S===r}else var v=!0;if(v){if(e.step!==void 0){let a=e.step;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/2/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(a!=="cp")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/2/properties/step/const",keyword:"const",params:{allowedValue:"cp"},message:"must be equal to constant"}],!1;var v=S===r}else var v=!0;if(v){if(e.fromPath!==void 0){const a=r;if(typeof e.fromPath!="string")return h.errors=[{instancePath:t+"/fromPath",schemaPath:"#/oneOf/2/properties/fromPath/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var v=a===r}else var v=!0;if(v)if(e.toPath!==void 0){const a=r;if(typeof e.toPath!="string")return h.errors=[{instancePath:t+"/toPath",schemaPath:"#/oneOf/2/properties/toPath/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var v=a===r}else var v=!0}}}}}else return h.errors=[{instancePath:t,schemaPath:"#/oneOf/2/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1}else if(pe==="defineWpConfigConsts"){if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let H;if(e.consts===void 0&&(H="consts")||e.step===void 0&&(H="step"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/3/required",keyword:"required",params:{missingProperty:H},message:"must have required property '"+H+"'"}],!1;{const Q=r;for(const a in e)if(!(a==="progress"||a==="step"||a==="consts"||a==="method"||a==="virtualize"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/3/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:a},message:"must NOT have additional properties"}],!1;if(Q===r){if(e.progress!==void 0){let a=e.progress;const S=r;if(r===S)if(a&&typeof a=="object"&&!Array.isArray(a)){const V=r;for(const y in a)if(!(y==="weight"||y==="caption"))return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/3/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:y},message:"must NOT have additional properties"}],!1;if(V===r){if(a.weight!==void 0){let y=a.weight;const K=r;if(!(typeof y=="number"&&isFinite(y)))return h.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/3/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var w=K===r}else var w=!0;if(w)if(a.caption!==void 0){const y=r;if(typeof a.caption!="string")return h.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/3/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var w=y===r}else var w=!0}}else return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/3/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var L=S===r}else var L=!0;if(L){if(e.step!==void 0){let a=e.step;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/3/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(a!=="defineWpConfigConsts")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/3/properties/step/const",keyword:"const",params:{allowedValue:"defineWpConfigConsts"},message:"must be equal to constant"}],!1;var L=S===r}else var L=!0;if(L){if(e.consts!==void 0){let a=e.consts;const S=r;if(r===S&&!(a&&typeof a=="object"&&!Array.isArray(a)))return h.errors=[{instancePath:t+"/consts",schemaPath:"#/oneOf/3/properties/consts/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var L=S===r}else var L=!0;if(L){if(e.method!==void 0){let a=e.method;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/method",schemaPath:"#/oneOf/3/properties/method/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(!(a==="rewrite-wp-config"||a==="define-before-run"))return h.errors=[{instancePath:t+"/method",schemaPath:"#/oneOf/3/properties/method/enum",keyword:"enum",params:{allowedValues:Kr.oneOf[3].properties.method.enum},message:"must be equal to one of the allowed values"}],!1;var L=S===r}else var L=!0;if(L)if(e.virtualize!==void 0){const a=r;if(typeof e.virtualize!="boolean")return h.errors=[{instancePath:t+"/virtualize",schemaPath:"#/oneOf/3/properties/virtualize/type",keyword:"type",params:{type:"boolean"},message:"must be boolean"}],!1;var L=a===r}else var L=!0}}}}}}else return h.errors=[{instancePath:t,schemaPath:"#/oneOf/3/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1}else if(pe==="defineSiteUrl"){if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let H;if(e.siteUrl===void 0&&(H="siteUrl")||e.step===void 0&&(H="step"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/4/required",keyword:"required",params:{missingProperty:H},message:"must have required property '"+H+"'"}],!1;{const Q=r;for(const a in e)if(!(a==="progress"||a==="step"||a==="siteUrl"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/4/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:a},message:"must NOT have additional properties"}],!1;if(Q===r){if(e.progress!==void 0){let a=e.progress;const S=r;if(r===S)if(a&&typeof a=="object"&&!Array.isArray(a)){const V=r;for(const y in a)if(!(y==="weight"||y==="caption"))return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/4/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:y},message:"must NOT have additional properties"}],!1;if(V===r){if(a.weight!==void 0){let y=a.weight;const K=r;if(!(typeof y=="number"&&isFinite(y)))return h.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/4/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var E=K===r}else var E=!0;if(E)if(a.caption!==void 0){const y=r;if(typeof a.caption!="string")return h.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/4/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var E=y===r}else var E=!0}}else return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/4/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var z=S===r}else var z=!0;if(z){if(e.step!==void 0){let a=e.step;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/4/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(a!=="defineSiteUrl")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/4/properties/step/const",keyword:"const",params:{allowedValue:"defineSiteUrl"},message:"must be equal to constant"}],!1;var z=S===r}else var z=!0;if(z)if(e.siteUrl!==void 0){const a=r;if(typeof e.siteUrl!="string")return h.errors=[{instancePath:t+"/siteUrl",schemaPath:"#/oneOf/4/properties/siteUrl/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var z=a===r}else var z=!0}}}}else return h.errors=[{instancePath:t,schemaPath:"#/oneOf/4/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1}else if(pe==="enableMultisite"){if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let H;if(e.step===void 0&&(H="step"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/5/required",keyword:"required",params:{missingProperty:H},message:"must have required property '"+H+"'"}],!1;{const Q=r;for(const a in e)if(!(a==="progress"||a==="step"||a==="wpCliPath"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/5/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:a},message:"must NOT have additional properties"}],!1;if(Q===r){if(e.progress!==void 0){let a=e.progress;const S=r;if(r===S)if(a&&typeof a=="object"&&!Array.isArray(a)){const V=r;for(const y in a)if(!(y==="weight"||y==="caption"))return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/5/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:y},message:"must NOT have additional properties"}],!1;if(V===r){if(a.weight!==void 0){let y=a.weight;const K=r;if(!(typeof y=="number"&&isFinite(y)))return h.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/5/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var N=K===r}else var N=!0;if(N)if(a.caption!==void 0){const y=r;if(typeof a.caption!="string")return h.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/5/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var N=y===r}else var N=!0}}else return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/5/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var U=S===r}else var U=!0;if(U){if(e.step!==void 0){let a=e.step;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/5/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(a!=="enableMultisite")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/5/properties/step/const",keyword:"const",params:{allowedValue:"enableMultisite"},message:"must be equal to constant"}],!1;var U=S===r}else var U=!0;if(U)if(e.wpCliPath!==void 0){const a=r;if(typeof e.wpCliPath!="string")return h.errors=[{instancePath:t+"/wpCliPath",schemaPath:"#/oneOf/5/properties/wpCliPath/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var U=a===r}else var U=!0}}}}else return h.errors=[{instancePath:t,schemaPath:"#/oneOf/5/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1}else if(pe==="importWxr"){if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let H;if(e.file===void 0&&(H="file")||e.step===void 0&&(H="step"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/6/required",keyword:"required",params:{missingProperty:H},message:"must have required property '"+H+"'"}],!1;{const Q=r;for(const a in e)if(!(a==="progress"||a==="step"||a==="file"||a==="importer"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/6/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:a},message:"must NOT have additional properties"}],!1;if(Q===r){if(e.progress!==void 0){let a=e.progress;const S=r;if(r===S)if(a&&typeof a=="object"&&!Array.isArray(a)){const V=r;for(const y in a)if(!(y==="weight"||y==="caption"))return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/6/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:y},message:"must NOT have additional properties"}],!1;if(V===r){if(a.weight!==void 0){let y=a.weight;const K=r;if(!(typeof y=="number"&&isFinite(y)))return h.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/6/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var B=K===r}else var B=!0;if(B)if(a.caption!==void 0){const y=r;if(typeof a.caption!="string")return h.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/6/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var B=y===r}else var B=!0}}else return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/6/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var W=S===r}else var W=!0;if(W){if(e.step!==void 0){let a=e.step;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/6/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(a!=="importWxr")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/6/properties/step/const",keyword:"const",params:{allowedValue:"importWxr"},message:"must be equal to constant"}],!1;var W=S===r}else var W=!0;if(W){if(e.file!==void 0){const a=r;le(e.file,{instancePath:t+"/file",parentData:e,parentDataProperty:"file",rootData:o})||(i=i===null?le.errors:i.concat(le.errors),r=i.length);var W=a===r}else var W=!0;if(W)if(e.importer!==void 0){let a=e.importer;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/importer",schemaPath:"#/oneOf/6/properties/importer/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(!(a==="data-liberation"||a==="default"))return h.errors=[{instancePath:t+"/importer",schemaPath:"#/oneOf/6/properties/importer/enum",keyword:"enum",params:{allowedValues:Kr.oneOf[6].properties.importer.enum},message:"must be equal to one of the allowed values"}],!1;var W=S===r}else var W=!0}}}}}else return h.errors=[{instancePath:t,schemaPath:"#/oneOf/6/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1}else if(pe==="importThemeStarterContent"){if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let H;if(e.step===void 0&&(H="step"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/7/required",keyword:"required",params:{missingProperty:H},message:"must have required property '"+H+"'"}],!1;{const Q=r;for(const a in e)if(!(a==="progress"||a==="step"||a==="themeSlug"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/7/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:a},message:"must NOT have additional properties"}],!1;if(Q===r){if(e.progress!==void 0){let a=e.progress;const S=r;if(r===S)if(a&&typeof a=="object"&&!Array.isArray(a)){const V=r;for(const y in a)if(!(y==="weight"||y==="caption"))return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/7/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:y},message:"must NOT have additional properties"}],!1;if(V===r){if(a.weight!==void 0){let y=a.weight;const K=r;if(!(typeof y=="number"&&isFinite(y)))return h.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/7/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var q=K===r}else var q=!0;if(q)if(a.caption!==void 0){const y=r;if(typeof a.caption!="string")return h.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/7/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var q=y===r}else var q=!0}}else return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/7/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var P=S===r}else var P=!0;if(P){if(e.step!==void 0){let a=e.step;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/7/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(a!=="importThemeStarterContent")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/7/properties/step/const",keyword:"const",params:{allowedValue:"importThemeStarterContent"},message:"must be equal to constant"}],!1;var P=S===r}else var P=!0;if(P)if(e.themeSlug!==void 0){const a=r;if(typeof e.themeSlug!="string")return h.errors=[{instancePath:t+"/themeSlug",schemaPath:"#/oneOf/7/properties/themeSlug/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var P=a===r}else var P=!0}}}}else return h.errors=[{instancePath:t,schemaPath:"#/oneOf/7/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1}else if(pe==="importWordPressFiles"){if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let H;if(e.step===void 0&&(H="step")||e.wordPressFilesZip===void 0&&(H="wordPressFilesZip"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/8/required",keyword:"required",params:{missingProperty:H},message:"must have required property '"+H+"'"}],!1;{const Q=r;for(const a in e)if(!(a==="progress"||a==="step"||a==="wordPressFilesZip"||a==="pathInZip"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/8/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:a},message:"must NOT have additional properties"}],!1;if(Q===r){if(e.progress!==void 0){let a=e.progress;const S=r;if(r===S)if(a&&typeof a=="object"&&!Array.isArray(a)){const V=r;for(const y in a)if(!(y==="weight"||y==="caption"))return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/8/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:y},message:"must NOT have additional properties"}],!1;if(V===r){if(a.weight!==void 0){let y=a.weight;const K=r;if(!(typeof y=="number"&&isFinite(y)))return h.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/8/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var F=K===r}else var F=!0;if(F)if(a.caption!==void 0){const y=r;if(typeof a.caption!="string")return h.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/8/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var F=y===r}else var F=!0}}else return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/8/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var O=S===r}else var O=!0;if(O){if(e.step!==void 0){let a=e.step;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/8/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(a!=="importWordPressFiles")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/8/properties/step/const",keyword:"const",params:{allowedValue:"importWordPressFiles"},message:"must be equal to constant"}],!1;var O=S===r}else var O=!0;if(O){if(e.wordPressFilesZip!==void 0){const a=r;le(e.wordPressFilesZip,{instancePath:t+"/wordPressFilesZip",parentData:e,parentDataProperty:"wordPressFilesZip",rootData:o})||(i=i===null?le.errors:i.concat(le.errors),r=i.length);var O=a===r}else var O=!0;if(O)if(e.pathInZip!==void 0){const a=r;if(typeof e.pathInZip!="string")return h.errors=[{instancePath:t+"/pathInZip",schemaPath:"#/oneOf/8/properties/pathInZip/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var O=a===r}else var O=!0}}}}}else return h.errors=[{instancePath:t,schemaPath:"#/oneOf/8/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1}else if(pe==="installPlugin"){if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let H;if(e.pluginData===void 0&&(H="pluginData")||e.step===void 0&&(H="step"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/9/required",keyword:"required",params:{missingProperty:H},message:"must have required property '"+H+"'"}],!1;{const Q=r;for(const a in e)if(!(a==="progress"||a==="ifAlreadyInstalled"||a==="step"||a==="pluginData"||a==="pluginZipFile"||a==="options"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/9/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:a},message:"must NOT have additional properties"}],!1;if(Q===r){if(e.progress!==void 0){let a=e.progress;const S=r;if(r===S)if(a&&typeof a=="object"&&!Array.isArray(a)){const V=r;for(const y in a)if(!(y==="weight"||y==="caption"))return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/9/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:y},message:"must NOT have additional properties"}],!1;if(V===r){if(a.weight!==void 0){let y=a.weight;const K=r;if(!(typeof y=="number"&&isFinite(y)))return h.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/9/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var x=K===r}else var x=!0;if(x)if(a.caption!==void 0){const y=r;if(typeof a.caption!="string")return h.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/9/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var x=y===r}else var x=!0}}else return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/9/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var T=S===r}else var T=!0;if(T){if(e.ifAlreadyInstalled!==void 0){let a=e.ifAlreadyInstalled;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/ifAlreadyInstalled",schemaPath:"#/oneOf/9/properties/ifAlreadyInstalled/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(!(a==="overwrite"||a==="skip"||a==="error"))return h.errors=[{instancePath:t+"/ifAlreadyInstalled",schemaPath:"#/oneOf/9/properties/ifAlreadyInstalled/enum",keyword:"enum",params:{allowedValues:Kr.oneOf[9].properties.ifAlreadyInstalled.enum},message:"must be equal to one of the allowed values"}],!1;var T=S===r}else var T=!0;if(T){if(e.step!==void 0){let a=e.step;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/9/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(a!=="installPlugin")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/9/properties/step/const",keyword:"const",params:{allowedValue:"installPlugin"},message:"must be equal to constant"}],!1;var T=S===r}else var T=!0;if(T){if(e.pluginData!==void 0){let a=e.pluginData;const S=r,V=r;let y=!1;const K=r;le(a,{instancePath:t+"/pluginData",parentData:e,parentDataProperty:"pluginData",rootData:o})||(i=i===null?le.errors:i.concat(le.errors),r=i.length);var k=K===r;if(y=y||k,!y){const Ae=r;$e(a,{instancePath:t+"/pluginData",parentData:e,parentDataProperty:"pluginData",rootData:o})||(i=i===null?$e.errors:i.concat($e.errors),r=i.length);var k=Ae===r;y=y||k}if(y)r=V,i!==null&&(V?i.length=V:i=null);else{const Ae={instancePath:t+"/pluginData",schemaPath:"#/oneOf/9/properties/pluginData/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};return i===null?i=[Ae]:i.push(Ae),r++,h.errors=i,!1}var T=S===r}else var T=!0;if(T){if(e.pluginZipFile!==void 0){const a=r;le(e.pluginZipFile,{instancePath:t+"/pluginZipFile",parentData:e,parentDataProperty:"pluginZipFile",rootData:o})||(i=i===null?le.errors:i.concat(le.errors),r=i.length);var T=a===r}else var T=!0;if(T)if(e.options!==void 0){let a=e.options;const S=r;if(r===r)if(a&&typeof a=="object"&&!Array.isArray(a)){const K=r;for(const ge in a)if(!(ge==="activate"||ge==="targetFolderName"))return h.errors=[{instancePath:t+"/options",schemaPath:"#/definitions/InstallPluginOptions/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:ge},message:"must NOT have additional properties"}],!1;if(K===r){if(a.activate!==void 0){const ge=r;if(typeof a.activate!="boolean")return h.errors=[{instancePath:t+"/options/activate",schemaPath:"#/definitions/InstallPluginOptions/properties/activate/type",keyword:"type",params:{type:"boolean"},message:"must be boolean"}],!1;var I=ge===r}else var I=!0;if(I)if(a.targetFolderName!==void 0){const ge=r;if(typeof a.targetFolderName!="string")return h.errors=[{instancePath:t+"/options/targetFolderName",schemaPath:"#/definitions/InstallPluginOptions/properties/targetFolderName/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var I=ge===r}else var I=!0}}else return h.errors=[{instancePath:t+"/options",schemaPath:"#/definitions/InstallPluginOptions/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var T=S===r}else var T=!0}}}}}}}else return h.errors=[{instancePath:t,schemaPath:"#/oneOf/9/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1}else if(pe==="installTheme"){if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let H;if(e.step===void 0&&(H="step")||e.themeData===void 0&&(H="themeData"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/10/required",keyword:"required",params:{missingProperty:H},message:"must have required property '"+H+"'"}],!1;{const Q=r;for(const a in e)if(!(a==="progress"||a==="ifAlreadyInstalled"||a==="step"||a==="themeData"||a==="themeZipFile"||a==="options"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/10/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:a},message:"must NOT have additional properties"}],!1;if(Q===r){if(e.progress!==void 0){let a=e.progress;const S=r;if(r===S)if(a&&typeof a=="object"&&!Array.isArray(a)){const V=r;for(const y in a)if(!(y==="weight"||y==="caption"))return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/10/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:y},message:"must NOT have additional properties"}],!1;if(V===r){if(a.weight!==void 0){let y=a.weight;const K=r;if(!(typeof y=="number"&&isFinite(y)))return h.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/10/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var j=K===r}else var j=!0;if(j)if(a.caption!==void 0){const y=r;if(typeof a.caption!="string")return h.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/10/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var j=y===r}else var j=!0}}else return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/10/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var D=S===r}else var D=!0;if(D){if(e.ifAlreadyInstalled!==void 0){let a=e.ifAlreadyInstalled;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/ifAlreadyInstalled",schemaPath:"#/oneOf/10/properties/ifAlreadyInstalled/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(!(a==="overwrite"||a==="skip"||a==="error"))return h.errors=[{instancePath:t+"/ifAlreadyInstalled",schemaPath:"#/oneOf/10/properties/ifAlreadyInstalled/enum",keyword:"enum",params:{allowedValues:Kr.oneOf[10].properties.ifAlreadyInstalled.enum},message:"must be equal to one of the allowed values"}],!1;var D=S===r}else var D=!0;if(D){if(e.step!==void 0){let a=e.step;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/10/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(a!=="installTheme")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/10/properties/step/const",keyword:"const",params:{allowedValue:"installTheme"},message:"must be equal to constant"}],!1;var D=S===r}else var D=!0;if(D){if(e.themeData!==void 0){let a=e.themeData;const S=r,V=r;let y=!1;const K=r;le(a,{instancePath:t+"/themeData",parentData:e,parentDataProperty:"themeData",rootData:o})||(i=i===null?le.errors:i.concat(le.errors),r=i.length);var X=K===r;if(y=y||X,!y){const Ae=r;$e(a,{instancePath:t+"/themeData",parentData:e,parentDataProperty:"themeData",rootData:o})||(i=i===null?$e.errors:i.concat($e.errors),r=i.length);var X=Ae===r;y=y||X}if(y)r=V,i!==null&&(V?i.length=V:i=null);else{const Ae={instancePath:t+"/themeData",schemaPath:"#/oneOf/10/properties/themeData/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};return i===null?i=[Ae]:i.push(Ae),r++,h.errors=i,!1}var D=S===r}else var D=!0;if(D){if(e.themeZipFile!==void 0){const a=r;le(e.themeZipFile,{instancePath:t+"/themeZipFile",parentData:e,parentDataProperty:"themeZipFile",rootData:o})||(i=i===null?le.errors:i.concat(le.errors),r=i.length);var D=a===r}else var D=!0;if(D)if(e.options!==void 0){let a=e.options;const S=r;if(r===r)if(a&&typeof a=="object"&&!Array.isArray(a)){const K=r;for(const ge in a)if(!(ge==="activate"||ge==="importStarterContent"||ge==="targetFolderName"))return h.errors=[{instancePath:t+"/options",schemaPath:"#/definitions/InstallThemeOptions/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:ge},message:"must NOT have additional properties"}],!1;if(K===r){if(a.activate!==void 0){const ge=r;if(typeof a.activate!="boolean")return h.errors=[{instancePath:t+"/options/activate",schemaPath:"#/definitions/InstallThemeOptions/properties/activate/type",keyword:"type",params:{type:"boolean"},message:"must be boolean"}],!1;var Z=ge===r}else var Z=!0;if(Z){if(a.importStarterContent!==void 0){const ge=r;if(typeof a.importStarterContent!="boolean")return h.errors=[{instancePath:t+"/options/importStarterContent",schemaPath:"#/definitions/InstallThemeOptions/properties/importStarterContent/type",keyword:"type",params:{type:"boolean"},message:"must be boolean"}],!1;var Z=ge===r}else var Z=!0;if(Z)if(a.targetFolderName!==void 0){const ge=r;if(typeof a.targetFolderName!="string")return h.errors=[{instancePath:t+"/options/targetFolderName",schemaPath:"#/definitions/InstallThemeOptions/properties/targetFolderName/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var Z=ge===r}else var Z=!0}}}else return h.errors=[{instancePath:t+"/options",schemaPath:"#/definitions/InstallThemeOptions/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var D=S===r}else var D=!0}}}}}}}else return h.errors=[{instancePath:t,schemaPath:"#/oneOf/10/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1}else if(pe==="login"){if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let H;if(e.step===void 0&&(H="step"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/11/required",keyword:"required",params:{missingProperty:H},message:"must have required property '"+H+"'"}],!1;{const Q=r;for(const a in e)if(!(a==="progress"||a==="step"||a==="username"||a==="password"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/11/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:a},message:"must NOT have additional properties"}],!1;if(Q===r){if(e.progress!==void 0){let a=e.progress;const S=r;if(r===S)if(a&&typeof a=="object"&&!Array.isArray(a)){const V=r;for(const y in a)if(!(y==="weight"||y==="caption"))return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/11/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:y},message:"must NOT have additional properties"}],!1;if(V===r){if(a.weight!==void 0){let y=a.weight;const K=r;if(!(typeof y=="number"&&isFinite(y)))return h.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/11/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var M=K===r}else var M=!0;if(M)if(a.caption!==void 0){const y=r;if(typeof a.caption!="string")return h.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/11/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var M=y===r}else var M=!0}}else return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/11/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var Y=S===r}else var Y=!0;if(Y){if(e.step!==void 0){let a=e.step;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/11/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(a!=="login")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/11/properties/step/const",keyword:"const",params:{allowedValue:"login"},message:"must be equal to constant"}],!1;var Y=S===r}else var Y=!0;if(Y){if(e.username!==void 0){const a=r;if(typeof e.username!="string")return h.errors=[{instancePath:t+"/username",schemaPath:"#/oneOf/11/properties/username/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var Y=a===r}else var Y=!0;if(Y)if(e.password!==void 0){const a=r;if(typeof e.password!="string")return h.errors=[{instancePath:t+"/password",schemaPath:"#/oneOf/11/properties/password/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var Y=a===r}else var Y=!0}}}}}else return h.errors=[{instancePath:t,schemaPath:"#/oneOf/11/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1}else if(pe==="mkdir"){if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let H;if(e.path===void 0&&(H="path")||e.step===void 0&&(H="step"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/12/required",keyword:"required",params:{missingProperty:H},message:"must have required property '"+H+"'"}],!1;{const Q=r;for(const a in e)if(!(a==="progress"||a==="step"||a==="path"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/12/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:a},message:"must NOT have additional properties"}],!1;if(Q===r){if(e.progress!==void 0){let a=e.progress;const S=r;if(r===S)if(a&&typeof a=="object"&&!Array.isArray(a)){const V=r;for(const y in a)if(!(y==="weight"||y==="caption"))return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/12/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:y},message:"must NOT have additional properties"}],!1;if(V===r){if(a.weight!==void 0){let y=a.weight;const K=r;if(!(typeof y=="number"&&isFinite(y)))return h.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/12/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var G=K===r}else var G=!0;if(G)if(a.caption!==void 0){const y=r;if(typeof a.caption!="string")return h.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/12/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var G=y===r}else var G=!0}}else return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/12/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var se=S===r}else var se=!0;if(se){if(e.step!==void 0){let a=e.step;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/12/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(a!=="mkdir")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/12/properties/step/const",keyword:"const",params:{allowedValue:"mkdir"},message:"must be equal to constant"}],!1;var se=S===r}else var se=!0;if(se)if(e.path!==void 0){const a=r;if(typeof e.path!="string")return h.errors=[{instancePath:t+"/path",schemaPath:"#/oneOf/12/properties/path/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var se=a===r}else var se=!0}}}}else return h.errors=[{instancePath:t,schemaPath:"#/oneOf/12/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1}else if(pe==="mv"){if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let H;if(e.fromPath===void 0&&(H="fromPath")||e.step===void 0&&(H="step")||e.toPath===void 0&&(H="toPath"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/13/required",keyword:"required",params:{missingProperty:H},message:"must have required property '"+H+"'"}],!1;{const Q=r;for(const a in e)if(!(a==="progress"||a==="step"||a==="fromPath"||a==="toPath"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/13/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:a},message:"must NOT have additional properties"}],!1;if(Q===r){if(e.progress!==void 0){let a=e.progress;const S=r;if(r===S)if(a&&typeof a=="object"&&!Array.isArray(a)){const V=r;for(const y in a)if(!(y==="weight"||y==="caption"))return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/13/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:y},message:"must NOT have additional properties"}],!1;if(V===r){if(a.weight!==void 0){let y=a.weight;const K=r;if(!(typeof y=="number"&&isFinite(y)))return h.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/13/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var ee=K===r}else var ee=!0;if(ee)if(a.caption!==void 0){const y=r;if(typeof a.caption!="string")return h.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/13/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var ee=y===r}else var ee=!0}}else return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/13/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var J=S===r}else var J=!0;if(J){if(e.step!==void 0){let a=e.step;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/13/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(a!=="mv")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/13/properties/step/const",keyword:"const",params:{allowedValue:"mv"},message:"must be equal to constant"}],!1;var J=S===r}else var J=!0;if(J){if(e.fromPath!==void 0){const a=r;if(typeof e.fromPath!="string")return h.errors=[{instancePath:t+"/fromPath",schemaPath:"#/oneOf/13/properties/fromPath/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var J=a===r}else var J=!0;if(J)if(e.toPath!==void 0){const a=r;if(typeof e.toPath!="string")return h.errors=[{instancePath:t+"/toPath",schemaPath:"#/oneOf/13/properties/toPath/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var J=a===r}else var J=!0}}}}}else return h.errors=[{instancePath:t,schemaPath:"#/oneOf/13/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1}else if(pe==="resetData"){if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let H;if(e.step===void 0&&(H="step"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/14/required",keyword:"required",params:{missingProperty:H},message:"must have required property '"+H+"'"}],!1;{const Q=r;for(const a in e)if(!(a==="progress"||a==="step"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/14/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:a},message:"must NOT have additional properties"}],!1;if(Q===r){if(e.progress!==void 0){let a=e.progress;const S=r;if(r===S)if(a&&typeof a=="object"&&!Array.isArray(a)){const V=r;for(const y in a)if(!(y==="weight"||y==="caption"))return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/14/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:y},message:"must NOT have additional properties"}],!1;if(V===r){if(a.weight!==void 0){let y=a.weight;const K=r;if(!(typeof y=="number"&&isFinite(y)))return h.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/14/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var _=K===r}else var _=!0;if(_)if(a.caption!==void 0){const y=r;if(typeof a.caption!="string")return h.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/14/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var _=y===r}else var _=!0}}else return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/14/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var te=S===r}else var te=!0;if(te)if(e.step!==void 0){let a=e.step;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/14/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(a!=="resetData")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/14/properties/step/const",keyword:"const",params:{allowedValue:"resetData"},message:"must be equal to constant"}],!1;var te=S===r}else var te=!0}}}else return h.errors=[{instancePath:t,schemaPath:"#/oneOf/14/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1}else if(pe==="request"){if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let H;if(e.request===void 0&&(H="request")||e.step===void 0&&(H="step"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/15/required",keyword:"required",params:{missingProperty:H},message:"must have required property '"+H+"'"}],!1;{const Q=r;for(const a in e)if(!(a==="progress"||a==="step"||a==="request"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/15/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:a},message:"must NOT have additional properties"}],!1;if(Q===r){if(e.progress!==void 0){let a=e.progress;const S=r;if(r===S)if(a&&typeof a=="object"&&!Array.isArray(a)){const V=r;for(const y in a)if(!(y==="weight"||y==="caption"))return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/15/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:y},message:"must NOT have additional properties"}],!1;if(V===r){if(a.weight!==void 0){let y=a.weight;const K=r;if(!(typeof y=="number"&&isFinite(y)))return h.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/15/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var ne=K===r}else var ne=!0;if(ne)if(a.caption!==void 0){const y=r;if(typeof a.caption!="string")return h.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/15/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var ne=y===r}else var ne=!0}}else return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/15/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var re=S===r}else var re=!0;if(re){if(e.step!==void 0){let a=e.step;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/15/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(a!=="request")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/15/properties/step/const",keyword:"const",params:{allowedValue:"request"},message:"must be equal to constant"}],!1;var re=S===r}else var re=!0;if(re)if(e.request!==void 0){const a=r;We(e.request,{instancePath:t+"/request",parentData:e,parentDataProperty:"request",rootData:o})||(i=i===null?We.errors:i.concat(We.errors),r=i.length);var re=a===r}else var re=!0}}}}else return h.errors=[{instancePath:t,schemaPath:"#/oneOf/15/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1}else if(pe==="rm"){if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let H;if(e.path===void 0&&(H="path")||e.step===void 0&&(H="step"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/16/required",keyword:"required",params:{missingProperty:H},message:"must have required property '"+H+"'"}],!1;{const Q=r;for(const a in e)if(!(a==="progress"||a==="step"||a==="path"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/16/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:a},message:"must NOT have additional properties"}],!1;if(Q===r){if(e.progress!==void 0){let a=e.progress;const S=r;if(r===S)if(a&&typeof a=="object"&&!Array.isArray(a)){const V=r;for(const y in a)if(!(y==="weight"||y==="caption"))return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/16/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:y},message:"must NOT have additional properties"}],!1;if(V===r){if(a.weight!==void 0){let y=a.weight;const K=r;if(!(typeof y=="number"&&isFinite(y)))return h.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/16/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var we=K===r}else var we=!0;if(we)if(a.caption!==void 0){const y=r;if(typeof a.caption!="string")return h.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/16/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var we=y===r}else var we=!0}}else return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/16/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var Pe=S===r}else var Pe=!0;if(Pe){if(e.step!==void 0){let a=e.step;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/16/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(a!=="rm")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/16/properties/step/const",keyword:"const",params:{allowedValue:"rm"},message:"must be equal to constant"}],!1;var Pe=S===r}else var Pe=!0;if(Pe)if(e.path!==void 0){const a=r;if(typeof e.path!="string")return h.errors=[{instancePath:t+"/path",schemaPath:"#/oneOf/16/properties/path/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var Pe=a===r}else var Pe=!0}}}}else return h.errors=[{instancePath:t,schemaPath:"#/oneOf/16/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1}else if(pe==="rmdir"){if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let H;if(e.path===void 0&&(H="path")||e.step===void 0&&(H="step"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/17/required",keyword:"required",params:{missingProperty:H},message:"must have required property '"+H+"'"}],!1;{const Q=r;for(const a in e)if(!(a==="progress"||a==="step"||a==="path"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/17/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:a},message:"must NOT have additional properties"}],!1;if(Q===r){if(e.progress!==void 0){let a=e.progress;const S=r;if(r===S)if(a&&typeof a=="object"&&!Array.isArray(a)){const V=r;for(const y in a)if(!(y==="weight"||y==="caption"))return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/17/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:y},message:"must NOT have additional properties"}],!1;if(V===r){if(a.weight!==void 0){let y=a.weight;const K=r;if(!(typeof y=="number"&&isFinite(y)))return h.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/17/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var Fe=K===r}else var Fe=!0;if(Fe)if(a.caption!==void 0){const y=r;if(typeof a.caption!="string")return h.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/17/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var Fe=y===r}else var Fe=!0}}else return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/17/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var rt=S===r}else var rt=!0;if(rt){if(e.step!==void 0){let a=e.step;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/17/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(a!=="rmdir")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/17/properties/step/const",keyword:"const",params:{allowedValue:"rmdir"},message:"must be equal to constant"}],!1;var rt=S===r}else var rt=!0;if(rt)if(e.path!==void 0){const a=r;if(typeof e.path!="string")return h.errors=[{instancePath:t+"/path",schemaPath:"#/oneOf/17/properties/path/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var rt=a===r}else var rt=!0}}}}else return h.errors=[{instancePath:t,schemaPath:"#/oneOf/17/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1}else if(pe==="runPHP"){if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let H;if(e.code===void 0&&(H="code")||e.step===void 0&&(H="step"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/18/required",keyword:"required",params:{missingProperty:H},message:"must have required property '"+H+"'"}],!1;{const Q=r;for(const a in e)if(!(a==="progress"||a==="step"||a==="code"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/18/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:a},message:"must NOT have additional properties"}],!1;if(Q===r){if(e.progress!==void 0){let a=e.progress;const S=r;if(r===S)if(a&&typeof a=="object"&&!Array.isArray(a)){const V=r;for(const y in a)if(!(y==="weight"||y==="caption"))return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/18/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:y},message:"must NOT have additional properties"}],!1;if(V===r){if(a.weight!==void 0){let y=a.weight;const K=r;if(!(typeof y=="number"&&isFinite(y)))return h.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/18/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var Kt=K===r}else var Kt=!0;if(Kt)if(a.caption!==void 0){const y=r;if(typeof a.caption!="string")return h.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/18/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var Kt=y===r}else var Kt=!0}}else return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/18/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var st=S===r}else var st=!0;if(st){if(e.step!==void 0){let a=e.step;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/18/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(a!=="runPHP")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/18/properties/step/const",keyword:"const",params:{allowedValue:"runPHP"},message:"must be equal to constant"}],!1;var st=S===r}else var st=!0;if(st)if(e.code!==void 0){const a=r;if(typeof e.code!="string")return h.errors=[{instancePath:t+"/code",schemaPath:"#/oneOf/18/properties/code/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var st=a===r}else var st=!0}}}}else return h.errors=[{instancePath:t,schemaPath:"#/oneOf/18/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1}else if(pe==="runPHPWithOptions"){if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let H;if(e.options===void 0&&(H="options")||e.step===void 0&&(H="step"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/19/required",keyword:"required",params:{missingProperty:H},message:"must have required property '"+H+"'"}],!1;{const Q=r;for(const a in e)if(!(a==="progress"||a==="step"||a==="options"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/19/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:a},message:"must NOT have additional properties"}],!1;if(Q===r){if(e.progress!==void 0){let a=e.progress;const S=r;if(r===S)if(a&&typeof a=="object"&&!Array.isArray(a)){const V=r;for(const y in a)if(!(y==="weight"||y==="caption"))return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/19/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:y},message:"must NOT have additional properties"}],!1;if(V===r){if(a.weight!==void 0){let y=a.weight;const K=r;if(!(typeof y=="number"&&isFinite(y)))return h.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/19/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var _e=K===r}else var _e=!0;if(_e)if(a.caption!==void 0){const y=r;if(typeof a.caption!="string")return h.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/19/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var _e=y===r}else var _e=!0}}else return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/19/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var Ie=S===r}else var Ie=!0;if(Ie){if(e.step!==void 0){let a=e.step;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/19/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(a!=="runPHPWithOptions")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/19/properties/step/const",keyword:"const",params:{allowedValue:"runPHPWithOptions"},message:"must be equal to constant"}],!1;var Ie=S===r}else var Ie=!0;if(Ie)if(e.options!==void 0){const a=r;Se(e.options,{instancePath:t+"/options",parentData:e,parentDataProperty:"options",rootData:o})||(i=i===null?Se.errors:i.concat(Se.errors),r=i.length);var Ie=a===r}else var Ie=!0}}}}else return h.errors=[{instancePath:t,schemaPath:"#/oneOf/19/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1}else if(pe==="runWpInstallationWizard"){if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let H;if(e.options===void 0&&(H="options")||e.step===void 0&&(H="step"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/20/required",keyword:"required",params:{missingProperty:H},message:"must have required property '"+H+"'"}],!1;{const Q=r;for(const a in e)if(!(a==="progress"||a==="step"||a==="options"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/20/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:a},message:"must NOT have additional properties"}],!1;if(Q===r){if(e.progress!==void 0){let a=e.progress;const S=r;if(r===S)if(a&&typeof a=="object"&&!Array.isArray(a)){const V=r;for(const y in a)if(!(y==="weight"||y==="caption"))return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/20/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:y},message:"must NOT have additional properties"}],!1;if(V===r){if(a.weight!==void 0){let y=a.weight;const K=r;if(!(typeof y=="number"&&isFinite(y)))return h.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/20/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var Mt=K===r}else var Mt=!0;if(Mt)if(a.caption!==void 0){const y=r;if(typeof a.caption!="string")return h.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/20/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var Mt=y===r}else var Mt=!0}}else return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/20/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var ct=S===r}else var ct=!0;if(ct){if(e.step!==void 0){let a=e.step;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/20/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(a!=="runWpInstallationWizard")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/20/properties/step/const",keyword:"const",params:{allowedValue:"runWpInstallationWizard"},message:"must be equal to constant"}],!1;var ct=S===r}else var ct=!0;if(ct)if(e.options!==void 0){let a=e.options;const S=r;if(r===r)if(a&&typeof a=="object"&&!Array.isArray(a)){const K=r;for(const ge in a)if(!(ge==="adminUsername"||ge==="adminPassword"))return h.errors=[{instancePath:t+"/options",schemaPath:"#/definitions/WordPressInstallationOptions/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:ge},message:"must NOT have additional properties"}],!1;if(K===r){if(a.adminUsername!==void 0){const ge=r;if(typeof a.adminUsername!="string")return h.errors=[{instancePath:t+"/options/adminUsername",schemaPath:"#/definitions/WordPressInstallationOptions/properties/adminUsername/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var At=ge===r}else var At=!0;if(At)if(a.adminPassword!==void 0){const ge=r;if(typeof a.adminPassword!="string")return h.errors=[{instancePath:t+"/options/adminPassword",schemaPath:"#/definitions/WordPressInstallationOptions/properties/adminPassword/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var At=ge===r}else var At=!0}}else return h.errors=[{instancePath:t+"/options",schemaPath:"#/definitions/WordPressInstallationOptions/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var ct=S===r}else var ct=!0}}}}else return h.errors=[{instancePath:t,schemaPath:"#/oneOf/20/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1}else if(pe==="runSql"){if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let H;if(e.sql===void 0&&(H="sql")||e.step===void 0&&(H="step"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/21/required",keyword:"required",params:{missingProperty:H},message:"must have required property '"+H+"'"}],!1;{const Q=r;for(const a in e)if(!(a==="progress"||a==="step"||a==="sql"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/21/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:a},message:"must NOT have additional properties"}],!1;if(Q===r){if(e.progress!==void 0){let a=e.progress;const S=r;if(r===S)if(a&&typeof a=="object"&&!Array.isArray(a)){const V=r;for(const y in a)if(!(y==="weight"||y==="caption"))return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/21/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:y},message:"must NOT have additional properties"}],!1;if(V===r){if(a.weight!==void 0){let y=a.weight;const K=r;if(!(typeof y=="number"&&isFinite(y)))return h.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/21/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var Zt=K===r}else var Zt=!0;if(Zt)if(a.caption!==void 0){const y=r;if(typeof a.caption!="string")return h.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/21/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var Zt=y===r}else var Zt=!0}}else return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/21/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var dt=S===r}else var dt=!0;if(dt){if(e.step!==void 0){let a=e.step;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/21/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(a!=="runSql")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/21/properties/step/const",keyword:"const",params:{allowedValue:"runSql"},message:"must be equal to constant"}],!1;var dt=S===r}else var dt=!0;if(dt)if(e.sql!==void 0){const a=r;le(e.sql,{instancePath:t+"/sql",parentData:e,parentDataProperty:"sql",rootData:o})||(i=i===null?le.errors:i.concat(le.errors),r=i.length);var dt=a===r}else var dt=!0}}}}else return h.errors=[{instancePath:t,schemaPath:"#/oneOf/21/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1}else if(pe==="setSiteOptions"){if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let H;if(e.options===void 0&&(H="options")||e.step===void 0&&(H="step"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/22/required",keyword:"required",params:{missingProperty:H},message:"must have required property '"+H+"'"}],!1;{const Q=r;for(const a in e)if(!(a==="progress"||a==="step"||a==="options"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/22/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:a},message:"must NOT have additional properties"}],!1;if(Q===r){if(e.progress!==void 0){let a=e.progress;const S=r;if(r===S)if(a&&typeof a=="object"&&!Array.isArray(a)){const V=r;for(const y in a)if(!(y==="weight"||y==="caption"))return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/22/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:y},message:"must NOT have additional properties"}],!1;if(V===r){if(a.weight!==void 0){let y=a.weight;const K=r;if(!(typeof y=="number"&&isFinite(y)))return h.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/22/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var Ht=K===r}else var Ht=!0;if(Ht)if(a.caption!==void 0){const y=r;if(typeof a.caption!="string")return h.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/22/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var Ht=y===r}else var Ht=!0}}else return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/22/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var Ue=S===r}else var Ue=!0;if(Ue){if(e.step!==void 0){let a=e.step;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/22/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(a!=="setSiteOptions")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/22/properties/step/const",keyword:"const",params:{allowedValue:"setSiteOptions"},message:"must be equal to constant"}],!1;var Ue=S===r}else var Ue=!0;if(Ue)if(e.options!==void 0){let a=e.options;const S=r;if(r===S&&!(a&&typeof a=="object"&&!Array.isArray(a)))return h.errors=[{instancePath:t+"/options",schemaPath:"#/oneOf/22/properties/options/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var Ue=S===r}else var Ue=!0}}}}else return h.errors=[{instancePath:t,schemaPath:"#/oneOf/22/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1}else if(pe==="unzip"){if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let H;if(e.extractToPath===void 0&&(H="extractToPath")||e.step===void 0&&(H="step"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/23/required",keyword:"required",params:{missingProperty:H},message:"must have required property '"+H+"'"}],!1;{const Q=r;for(const a in e)if(!(a==="progress"||a==="step"||a==="zipFile"||a==="zipPath"||a==="extractToPath"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/23/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:a},message:"must NOT have additional properties"}],!1;if(Q===r){if(e.progress!==void 0){let a=e.progress;const S=r;if(r===S)if(a&&typeof a=="object"&&!Array.isArray(a)){const V=r;for(const y in a)if(!(y==="weight"||y==="caption"))return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/23/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:y},message:"must NOT have additional properties"}],!1;if(V===r){if(a.weight!==void 0){let y=a.weight;const K=r;if(!(typeof y=="number"&&isFinite(y)))return h.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/23/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var Be=K===r}else var Be=!0;if(Be)if(a.caption!==void 0){const y=r;if(typeof a.caption!="string")return h.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/23/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var Be=y===r}else var Be=!0}}else return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/23/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var He=S===r}else var He=!0;if(He){if(e.step!==void 0){let a=e.step;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/23/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(a!=="unzip")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/23/properties/step/const",keyword:"const",params:{allowedValue:"unzip"},message:"must be equal to constant"}],!1;var He=S===r}else var He=!0;if(He){if(e.zipFile!==void 0){const a=r;le(e.zipFile,{instancePath:t+"/zipFile",parentData:e,parentDataProperty:"zipFile",rootData:o})||(i=i===null?le.errors:i.concat(le.errors),r=i.length);var He=a===r}else var He=!0;if(He){if(e.zipPath!==void 0){const a=r;if(typeof e.zipPath!="string")return h.errors=[{instancePath:t+"/zipPath",schemaPath:"#/oneOf/23/properties/zipPath/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var He=a===r}else var He=!0;if(He)if(e.extractToPath!==void 0){const a=r;if(typeof e.extractToPath!="string")return h.errors=[{instancePath:t+"/extractToPath",schemaPath:"#/oneOf/23/properties/extractToPath/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var He=a===r}else var He=!0}}}}}}else return h.errors=[{instancePath:t,schemaPath:"#/oneOf/23/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1}else if(pe==="updateUserMeta"){if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let H;if(e.meta===void 0&&(H="meta")||e.step===void 0&&(H="step")||e.userId===void 0&&(H="userId"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/24/required",keyword:"required",params:{missingProperty:H},message:"must have required property '"+H+"'"}],!1;{const Q=r;for(const a in e)if(!(a==="progress"||a==="step"||a==="meta"||a==="userId"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/24/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:a},message:"must NOT have additional properties"}],!1;if(Q===r){if(e.progress!==void 0){let a=e.progress;const S=r;if(r===S)if(a&&typeof a=="object"&&!Array.isArray(a)){const V=r;for(const y in a)if(!(y==="weight"||y==="caption"))return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/24/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:y},message:"must NOT have additional properties"}],!1;if(V===r){if(a.weight!==void 0){let y=a.weight;const K=r;if(!(typeof y=="number"&&isFinite(y)))return h.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/24/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var Gt=K===r}else var Gt=!0;if(Gt)if(a.caption!==void 0){const y=r;if(typeof a.caption!="string")return h.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/24/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var Gt=y===r}else var Gt=!0}}else return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/24/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var Te=S===r}else var Te=!0;if(Te){if(e.step!==void 0){let a=e.step;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/24/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(a!=="updateUserMeta")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/24/properties/step/const",keyword:"const",params:{allowedValue:"updateUserMeta"},message:"must be equal to constant"}],!1;var Te=S===r}else var Te=!0;if(Te){if(e.meta!==void 0){let a=e.meta;const S=r;if(r===S&&!(a&&typeof a=="object"&&!Array.isArray(a)))return h.errors=[{instancePath:t+"/meta",schemaPath:"#/oneOf/24/properties/meta/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var Te=S===r}else var Te=!0;if(Te)if(e.userId!==void 0){let a=e.userId;const S=r;if(!(typeof a=="number"&&isFinite(a)))return h.errors=[{instancePath:t+"/userId",schemaPath:"#/oneOf/24/properties/userId/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var Te=S===r}else var Te=!0}}}}}else return h.errors=[{instancePath:t,schemaPath:"#/oneOf/24/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1}else if(pe==="writeFile"){if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let H;if(e.data===void 0&&(H="data")||e.path===void 0&&(H="path")||e.step===void 0&&(H="step"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/25/required",keyword:"required",params:{missingProperty:H},message:"must have required property '"+H+"'"}],!1;{const Q=r;for(const a in e)if(!(a==="progress"||a==="step"||a==="path"||a==="data"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/25/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:a},message:"must NOT have additional properties"}],!1;if(Q===r){if(e.progress!==void 0){let a=e.progress;const S=r;if(r===S)if(a&&typeof a=="object"&&!Array.isArray(a)){const V=r;for(const y in a)if(!(y==="weight"||y==="caption"))return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/25/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:y},message:"must NOT have additional properties"}],!1;if(V===r){if(a.weight!==void 0){let y=a.weight;const K=r;if(!(typeof y=="number"&&isFinite(y)))return h.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/25/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var Qt=K===r}else var Qt=!0;if(Qt)if(a.caption!==void 0){const y=r;if(typeof a.caption!="string")return h.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/25/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var Qt=y===r}else var Qt=!0}}else return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/25/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var c=S===r}else var c=!0;if(c){if(e.step!==void 0){let a=e.step;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/25/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(a!=="writeFile")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/25/properties/step/const",keyword:"const",params:{allowedValue:"writeFile"},message:"must be equal to constant"}],!1;var c=S===r}else var c=!0;if(c){if(e.path!==void 0){const a=r;if(typeof e.path!="string")return h.errors=[{instancePath:t+"/path",schemaPath:"#/oneOf/25/properties/path/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var c=a===r}else var c=!0;if(c)if(e.data!==void 0){let a=e.data;const S=r,V=r;let y=!1;const K=r;le(a,{instancePath:t+"/data",parentData:e,parentDataProperty:"data",rootData:o})||(i=i===null?le.errors:i.concat(le.errors),r=i.length);var f=K===r;if(y=y||f,!y){const Ae=r;if(typeof a!="string"){const it={instancePath:t+"/data",schemaPath:"#/oneOf/25/properties/data/anyOf/1/type",keyword:"type",params:{type:"string"},message:"must be string"};i===null?i=[it]:i.push(it),r++}var f=Ae===r;if(y=y||f,!y){const it=r;if(r===it)if(a&&typeof a=="object"&&!Array.isArray(a)){let Ke;if(a.BYTES_PER_ELEMENT===void 0&&(Ke="BYTES_PER_ELEMENT")||a.buffer===void 0&&(Ke="buffer")||a.byteLength===void 0&&(Ke="byteLength")||a.byteOffset===void 0&&(Ke="byteOffset")||a.length===void 0&&(Ke="length")){const jr={instancePath:t+"/data",schemaPath:"#/oneOf/25/properties/data/anyOf/2/required",keyword:"required",params:{missingProperty:Ke},message:"must have required property '"+Ke+"'"};i===null?i=[jr]:i.push(jr),r++}else{const jr=r;for(const ue in a)if(!(ue==="BYTES_PER_ELEMENT"||ue==="buffer"||ue==="byteLength"||ue==="byteOffset"||ue==="length")){let Ne=a[ue];const Fr=r;if(!(typeof Ne=="number"&&isFinite(Ne))){const Oe={instancePath:t+"/data/"+ue.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/oneOf/25/properties/data/anyOf/2/additionalProperties/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[Oe]:i.push(Oe),r++}var l=Fr===r;if(!l)break}if(jr===r){if(a.BYTES_PER_ELEMENT!==void 0){let ue=a.BYTES_PER_ELEMENT;const Ne=r;if(!(typeof ue=="number"&&isFinite(ue))){const Fr={instancePath:t+"/data/BYTES_PER_ELEMENT",schemaPath:"#/oneOf/25/properties/data/anyOf/2/properties/BYTES_PER_ELEMENT/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[Fr]:i.push(Fr),r++}var g=Ne===r}else var g=!0;if(g){if(a.buffer!==void 0){let ue=a.buffer;const Ne=r;if(r===Ne)if(ue&&typeof ue=="object"&&!Array.isArray(ue)){let Oe;if(ue.byteLength===void 0&&(Oe="byteLength")){const qr={instancePath:t+"/data/buffer",schemaPath:"#/oneOf/25/properties/data/anyOf/2/properties/buffer/required",keyword:"required",params:{missingProperty:Oe},message:"must have required property '"+Oe+"'"};i===null?i=[qr]:i.push(qr),r++}else{const qr=r;for(const pr in ue)if(pr!=="byteLength"){const fr={instancePath:t+"/data/buffer",schemaPath:"#/oneOf/25/properties/data/anyOf/2/properties/buffer/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:pr},message:"must NOT have additional properties"};i===null?i=[fr]:i.push(fr),r++;break}if(qr===r&&ue.byteLength!==void 0){let pr=ue.byteLength;if(!(typeof pr=="number"&&isFinite(pr))){const fr={instancePath:t+"/data/buffer/byteLength",schemaPath:"#/oneOf/25/properties/data/anyOf/2/properties/buffer/properties/byteLength/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[fr]:i.push(fr),r++}}}}else{const Oe={instancePath:t+"/data/buffer",schemaPath:"#/oneOf/25/properties/data/anyOf/2/properties/buffer/type",keyword:"type",params:{type:"object"},message:"must be object"};i===null?i=[Oe]:i.push(Oe),r++}var g=Ne===r}else var g=!0;if(g){if(a.byteLength!==void 0){let ue=a.byteLength;const Ne=r;if(!(typeof ue=="number"&&isFinite(ue))){const Oe={instancePath:t+"/data/byteLength",schemaPath:"#/oneOf/25/properties/data/anyOf/2/properties/byteLength/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[Oe]:i.push(Oe),r++}var g=Ne===r}else var g=!0;if(g){if(a.byteOffset!==void 0){let ue=a.byteOffset;const Ne=r;if(!(typeof ue=="number"&&isFinite(ue))){const Oe={instancePath:t+"/data/byteOffset",schemaPath:"#/oneOf/25/properties/data/anyOf/2/properties/byteOffset/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[Oe]:i.push(Oe),r++}var g=Ne===r}else var g=!0;if(g)if(a.length!==void 0){let ue=a.length;const Ne=r;if(!(typeof ue=="number"&&isFinite(ue))){const Oe={instancePath:t+"/data/length",schemaPath:"#/oneOf/25/properties/data/anyOf/2/properties/length/type",keyword:"type",params:{type:"number"},message:"must be number"};i===null?i=[Oe]:i.push(Oe),r++}var g=Ne===r}else var g=!0}}}}}}else{const Ke={instancePath:t+"/data",schemaPath:"#/oneOf/25/properties/data/anyOf/2/type",keyword:"type",params:{type:"object"},message:"must be object"};i===null?i=[Ke]:i.push(Ke),r++}var f=it===r;y=y||f}}if(y)r=V,i!==null&&(V?i.length=V:i=null);else{const Ae={instancePath:t+"/data",schemaPath:"#/oneOf/25/properties/data/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};return i===null?i=[Ae]:i.push(Ae),r++,h.errors=i,!1}var c=S===r}else var c=!0}}}}}else return h.errors=[{instancePath:t,schemaPath:"#/oneOf/25/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1}else if(pe==="writeFiles"){if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let H;if(e.filesTree===void 0&&(H="filesTree")||e.step===void 0&&(H="step")||e.writeToPath===void 0&&(H="writeToPath"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/26/required",keyword:"required",params:{missingProperty:H},message:"must have required property '"+H+"'"}],!1;{const Q=r;for(const a in e)if(!(a==="progress"||a==="step"||a==="writeToPath"||a==="filesTree"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/26/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:a},message:"must NOT have additional properties"}],!1;if(Q===r){if(e.progress!==void 0){let a=e.progress;const S=r;if(r===S)if(a&&typeof a=="object"&&!Array.isArray(a)){const V=r;for(const y in a)if(!(y==="weight"||y==="caption"))return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/26/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:y},message:"must NOT have additional properties"}],!1;if(V===r){if(a.weight!==void 0){let y=a.weight;const K=r;if(!(typeof y=="number"&&isFinite(y)))return h.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/26/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var A=K===r}else var A=!0;if(A)if(a.caption!==void 0){const y=r;if(typeof a.caption!="string")return h.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/26/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var A=y===r}else var A=!0}}else return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/26/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var C=S===r}else var C=!0;if(C){if(e.step!==void 0){let a=e.step;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/26/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(a!=="writeFiles")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/26/properties/step/const",keyword:"const",params:{allowedValue:"writeFiles"},message:"must be equal to constant"}],!1;var C=S===r}else var C=!0;if(C){if(e.writeToPath!==void 0){const a=r;if(typeof e.writeToPath!="string")return h.errors=[{instancePath:t+"/writeToPath",schemaPath:"#/oneOf/26/properties/writeToPath/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var C=a===r}else var C=!0;if(C)if(e.filesTree!==void 0){const a=r;$e(e.filesTree,{instancePath:t+"/filesTree",parentData:e,parentDataProperty:"filesTree",rootData:o})||(i=i===null?$e.errors:i.concat($e.errors),r=i.length);var C=a===r}else var C=!0}}}}}else return h.errors=[{instancePath:t,schemaPath:"#/oneOf/26/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1}else if(pe==="wp-cli"){if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let H;if(e.command===void 0&&(H="command")||e.step===void 0&&(H="step"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/27/required",keyword:"required",params:{missingProperty:H},message:"must have required property '"+H+"'"}],!1;{const Q=r;for(const a in e)if(!(a==="progress"||a==="step"||a==="command"||a==="wpCliPath"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/27/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:a},message:"must NOT have additional properties"}],!1;if(Q===r){if(e.progress!==void 0){let a=e.progress;const S=r;if(r===S)if(a&&typeof a=="object"&&!Array.isArray(a)){const V=r;for(const y in a)if(!(y==="weight"||y==="caption"))return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/27/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:y},message:"must NOT have additional properties"}],!1;if(V===r){if(a.weight!==void 0){let y=a.weight;const K=r;if(!(typeof y=="number"&&isFinite(y)))return h.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/27/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var R=K===r}else var R=!0;if(R)if(a.caption!==void 0){const y=r;if(typeof a.caption!="string")return h.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/27/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var R=y===r}else var R=!0}}else return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/27/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var $=S===r}else var $=!0;if($){if(e.step!==void 0){let a=e.step;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/27/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(a!=="wp-cli")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/27/properties/step/const",keyword:"const",params:{allowedValue:"wp-cli"},message:"must be equal to constant"}],!1;var $=S===r}else var $=!0;if($){if(e.command!==void 0){let a=e.command;const S=r,V=r;let y=!1;const K=r;if(typeof a!="string"){const Ae={instancePath:t+"/command",schemaPath:"#/oneOf/27/properties/command/anyOf/0/type",keyword:"type",params:{type:"string"},message:"must be string"};i===null?i=[Ae]:i.push(Ae),r++}var ye=K===r;if(y=y||ye,!y){const Ae=r;if(r===Ae)if(Array.isArray(a)){var he=!0;const it=a.length;for(let Rr=0;Rr<it;Rr++){const Ke=r;if(typeof a[Rr]!="string"){const ue={instancePath:t+"/command/"+Rr,schemaPath:"#/oneOf/27/properties/command/anyOf/1/items/type",keyword:"type",params:{type:"string"},message:"must be string"};i===null?i=[ue]:i.push(ue),r++}var he=Ke===r;if(!he)break}}else{const it={instancePath:t+"/command",schemaPath:"#/oneOf/27/properties/command/anyOf/1/type",keyword:"type",params:{type:"array"},message:"must be array"};i===null?i=[it]:i.push(it),r++}var ye=Ae===r;y=y||ye}if(y)r=V,i!==null&&(V?i.length=V:i=null);else{const Ae={instancePath:t+"/command",schemaPath:"#/oneOf/27/properties/command/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};return i===null?i=[Ae]:i.push(Ae),r++,h.errors=i,!1}var $=S===r}else var $=!0;if($)if(e.wpCliPath!==void 0){const a=r;if(typeof e.wpCliPath!="string")return h.errors=[{instancePath:t+"/wpCliPath",schemaPath:"#/oneOf/27/properties/wpCliPath/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var $=a===r}else var $=!0}}}}}else return h.errors=[{instancePath:t,schemaPath:"#/oneOf/27/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1}else if(pe==="setSiteLanguage"){if(r===r)if(e&&typeof e=="object"&&!Array.isArray(e)){let H;if(e.language===void 0&&(H="language")||e.step===void 0&&(H="step"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/28/required",keyword:"required",params:{missingProperty:H},message:"must have required property '"+H+"'"}],!1;{const Q=r;for(const a in e)if(!(a==="progress"||a==="step"||a==="language"))return h.errors=[{instancePath:t,schemaPath:"#/oneOf/28/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:a},message:"must NOT have additional properties"}],!1;if(Q===r){if(e.progress!==void 0){let a=e.progress;const S=r;if(r===S)if(a&&typeof a=="object"&&!Array.isArray(a)){const V=r;for(const y in a)if(!(y==="weight"||y==="caption"))return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/28/properties/progress/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:y},message:"must NOT have additional properties"}],!1;if(V===r){if(a.weight!==void 0){let y=a.weight;const K=r;if(!(typeof y=="number"&&isFinite(y)))return h.errors=[{instancePath:t+"/progress/weight",schemaPath:"#/oneOf/28/properties/progress/properties/weight/type",keyword:"type",params:{type:"number"},message:"must be number"}],!1;var me=K===r}else var me=!0;if(me)if(a.caption!==void 0){const y=r;if(typeof a.caption!="string")return h.errors=[{instancePath:t+"/progress/caption",schemaPath:"#/oneOf/28/properties/progress/properties/caption/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var me=y===r}else var me=!0}}else return h.errors=[{instancePath:t+"/progress",schemaPath:"#/oneOf/28/properties/progress/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var ae=S===r}else var ae=!0;if(ae){if(e.step!==void 0){let a=e.step;const S=r;if(typeof a!="string")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/28/properties/step/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(a!=="setSiteLanguage")return h.errors=[{instancePath:t+"/step",schemaPath:"#/oneOf/28/properties/step/const",keyword:"const",params:{allowedValue:"setSiteLanguage"},message:"must be equal to constant"}],!1;var ae=S===r}else var ae=!0;if(ae)if(e.language!==void 0){const a=r;if(typeof e.language!="string")return h.errors=[{instancePath:t+"/language",schemaPath:"#/oneOf/28/properties/language/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var ae=a===r}else var ae=!0}}}}else return h.errors=[{instancePath:t,schemaPath:"#/oneOf/28/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1}else return h.errors=[{instancePath:t,schemaPath:"#/discriminator",keyword:"discriminator",params:{error:"mapping",tag:"step",tagValue:pe},message:'value of tag "step" must be in oneOf'}],!1;else return h.errors=[{instancePath:t,schemaPath:"#/discriminator",keyword:"discriminator",params:{error:"tag",tag:"step",tagValue:pe},message:'tag "step" must be string'}],!1}}else return h.errors=[{instancePath:t,schemaPath:"#/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;return h.errors=i,r===0}function ie(e,{instancePath:t="",parentData:s,parentDataProperty:n,rootData:o=e}={}){let i=null,r=0;if(r===0)if(e&&typeof e=="object"&&!Array.isArray(e)){const q=r;for(const P in e)if(!Oo.call(Qu.properties,P))return ie.errors=[{instancePath:t,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:P},message:"must NOT have additional properties"}],!1;if(q===r){if(e.landingPage!==void 0){const P=r;if(typeof e.landingPage!="string")return ie.errors=[{instancePath:t+"/landingPage",schemaPath:"#/properties/landingPage/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var p=P===r}else var p=!0;if(p){if(e.description!==void 0){const P=r;if(typeof e.description!="string")return ie.errors=[{instancePath:t+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var p=P===r}else var p=!0;if(p){if(e.meta!==void 0){let P=e.meta;const F=r;if(r===F)if(P&&typeof P=="object"&&!Array.isArray(P)){let x;if(P.title===void 0&&(x="title")||P.author===void 0&&(x="author"))return ie.errors=[{instancePath:t+"/meta",schemaPath:"#/properties/meta/required",keyword:"required",params:{missingProperty:x},message:"must have required property '"+x+"'"}],!1;{const T=r;for(const k in P)if(!(k==="title"||k==="description"||k==="author"||k==="categories"))return ie.errors=[{instancePath:t+"/meta",schemaPath:"#/properties/meta/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:k},message:"must NOT have additional properties"}],!1;if(T===r){if(P.title!==void 0){const k=r;if(typeof P.title!="string")return ie.errors=[{instancePath:t+"/meta/title",schemaPath:"#/properties/meta/properties/title/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var m=k===r}else var m=!0;if(m){if(P.description!==void 0){const k=r;if(typeof P.description!="string")return ie.errors=[{instancePath:t+"/meta/description",schemaPath:"#/properties/meta/properties/description/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var m=k===r}else var m=!0;if(m){if(P.author!==void 0){const k=r;if(typeof P.author!="string")return ie.errors=[{instancePath:t+"/meta/author",schemaPath:"#/properties/meta/properties/author/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var m=k===r}else var m=!0;if(m)if(P.categories!==void 0){let k=P.categories;const I=r;if(r===I)if(Array.isArray(k)){var u=!0;const D=k.length;for(let X=0;X<D;X++){const Z=r;if(typeof k[X]!="string")return ie.errors=[{instancePath:t+"/meta/categories/"+X,schemaPath:"#/properties/meta/properties/categories/items/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var u=Z===r;if(!u)break}}else return ie.errors=[{instancePath:t+"/meta/categories",schemaPath:"#/properties/meta/properties/categories/type",keyword:"type",params:{type:"array"},message:"must be array"}],!1;var m=I===r}else var m=!0}}}}}else return ie.errors=[{instancePath:t+"/meta",schemaPath:"#/properties/meta/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var p=F===r}else var p=!0;if(p){if(e.preferredVersions!==void 0){let P=e.preferredVersions;const F=r;if(r===F)if(P&&typeof P=="object"&&!Array.isArray(P)){let x;if(P.php===void 0&&(x="php")||P.wp===void 0&&(x="wp"))return ie.errors=[{instancePath:t+"/preferredVersions",schemaPath:"#/properties/preferredVersions/required",keyword:"required",params:{missingProperty:x},message:"must have required property '"+x+"'"}],!1;{const T=r;for(const k in P)if(!(k==="php"||k==="wp"))return ie.errors=[{instancePath:t+"/preferredVersions",schemaPath:"#/properties/preferredVersions/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:k},message:"must NOT have additional properties"}],!1;if(T===r){if(P.php!==void 0){let k=P.php;const I=r,j=r;let D=!1;const X=r;if(typeof k!="string"){const Z={instancePath:t+"/preferredVersions/php",schemaPath:"#/definitions/SupportedPHPVersion/type",keyword:"type",params:{type:"string"},message:"must be string"};i===null?i=[Z]:i.push(Z),r++}if(!(k==="8.3"||k==="8.2"||k==="8.1"||k==="8.0"||k==="7.4"||k==="7.3"||k==="7.2"||k==="7.1"||k==="7.0")){const Z={instancePath:t+"/preferredVersions/php",schemaPath:"#/definitions/SupportedPHPVersion/enum",keyword:"enum",params:{allowedValues:Xu.enum},message:"must be equal to one of the allowed values"};i===null?i=[Z]:i.push(Z),r++}var d=X===r;if(D=D||d,!D){const Z=r;if(typeof k!="string"){const Y={instancePath:t+"/preferredVersions/php",schemaPath:"#/properties/preferredVersions/properties/php/anyOf/1/type",keyword:"type",params:{type:"string"},message:"must be string"};i===null?i=[Y]:i.push(Y),r++}if(k!=="latest"){const Y={instancePath:t+"/preferredVersions/php",schemaPath:"#/properties/preferredVersions/properties/php/anyOf/1/const",keyword:"const",params:{allowedValue:"latest"},message:"must be equal to constant"};i===null?i=[Y]:i.push(Y),r++}var d=Z===r;D=D||d}if(D)r=j,i!==null&&(j?i.length=j:i=null);else{const Z={instancePath:t+"/preferredVersions/php",schemaPath:"#/properties/preferredVersions/properties/php/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};return i===null?i=[Z]:i.push(Z),r++,ie.errors=i,!1}var b=I===r}else var b=!0;if(b)if(P.wp!==void 0){const k=r;if(typeof P.wp!="string")return ie.errors=[{instancePath:t+"/preferredVersions/wp",schemaPath:"#/properties/preferredVersions/properties/wp/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var b=k===r}else var b=!0}}}else return ie.errors=[{instancePath:t+"/preferredVersions",schemaPath:"#/properties/preferredVersions/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var p=F===r}else var p=!0;if(p){if(e.features!==void 0){let P=e.features;const F=r;if(r===F)if(P&&typeof P=="object"&&!Array.isArray(P)){const x=r;for(const T in P)if(T!=="networking")return ie.errors=[{instancePath:t+"/features",schemaPath:"#/properties/features/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:T},message:"must NOT have additional properties"}],!1;if(x===r&&P.networking!==void 0&&typeof P.networking!="boolean")return ie.errors=[{instancePath:t+"/features/networking",schemaPath:"#/properties/features/properties/networking/type",keyword:"type",params:{type:"boolean"},message:"must be boolean"}],!1}else return ie.errors=[{instancePath:t+"/features",schemaPath:"#/properties/features/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var p=F===r}else var p=!0;if(p){if(e.extraLibraries!==void 0){let P=e.extraLibraries;const F=r;if(r===F)if(Array.isArray(P)){var v=!0;const x=P.length;for(let T=0;T<x;T++){let k=P[T];const I=r;if(typeof k!="string")return ie.errors=[{instancePath:t+"/extraLibraries/"+T,schemaPath:"#/definitions/ExtraLibrary/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;if(k!=="wp-cli")return ie.errors=[{instancePath:t+"/extraLibraries/"+T,schemaPath:"#/definitions/ExtraLibrary/const",keyword:"const",params:{allowedValue:"wp-cli"},message:"must be equal to constant"}],!1;var v=I===r;if(!v)break}}else return ie.errors=[{instancePath:t+"/extraLibraries",schemaPath:"#/properties/extraLibraries/type",keyword:"type",params:{type:"array"},message:"must be array"}],!1;var p=F===r}else var p=!0;if(p){if(e.constants!==void 0){let P=e.constants;const F=r;if(r===r)if(P&&typeof P=="object"&&!Array.isArray(P))for(const T in P){let k=P[T];const I=r;if(typeof k!="string"&&typeof k!="boolean"&&!(typeof k=="number"&&isFinite(k)))return ie.errors=[{instancePath:t+"/constants/"+T.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/definitions/PHPConstants/additionalProperties/type",keyword:"type",params:{type:Yu.additionalProperties.type},message:"must be string,boolean,number"}],!1;var w=I===r;if(!w)break}else return ie.errors=[{instancePath:t+"/constants",schemaPath:"#/definitions/PHPConstants/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var p=F===r}else var p=!0;if(p){if(e.plugins!==void 0){let P=e.plugins;const F=r;if(r===F)if(Array.isArray(P)){var L=!0;const x=P.length;for(let T=0;T<x;T++){let k=P[T];const I=r,j=r;let D=!1;const X=r;if(typeof k!="string"){const M={instancePath:t+"/plugins/"+T,schemaPath:"#/properties/plugins/items/anyOf/0/type",keyword:"type",params:{type:"string"},message:"must be string"};i===null?i=[M]:i.push(M),r++}var E=X===r;if(D=D||E,!D){const M=r;le(k,{instancePath:t+"/plugins/"+T,parentData:P,parentDataProperty:T,rootData:o})||(i=i===null?le.errors:i.concat(le.errors),r=i.length);var E=M===r;D=D||E}if(D)r=j,i!==null&&(j?i.length=j:i=null);else{const M={instancePath:t+"/plugins/"+T,schemaPath:"#/properties/plugins/items/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};return i===null?i=[M]:i.push(M),r++,ie.errors=i,!1}var L=I===r;if(!L)break}}else return ie.errors=[{instancePath:t+"/plugins",schemaPath:"#/properties/plugins/type",keyword:"type",params:{type:"array"},message:"must be array"}],!1;var p=F===r}else var p=!0;if(p){if(e.siteOptions!==void 0){let P=e.siteOptions;const F=r;if(r===F)if(P&&typeof P=="object"&&!Array.isArray(P)){const x=r;for(const T in P)if(T!=="blogname"){const k=r;if(typeof P[T]!="string")return ie.errors=[{instancePath:t+"/siteOptions/"+T.replace(/~/g,"~0").replace(/\//g,"~1"),schemaPath:"#/properties/siteOptions/additionalProperties/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var z=k===r;if(!z)break}if(x===r&&P.blogname!==void 0&&typeof P.blogname!="string")return ie.errors=[{instancePath:t+"/siteOptions/blogname",schemaPath:"#/properties/siteOptions/properties/blogname/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1}else return ie.errors=[{instancePath:t+"/siteOptions",schemaPath:"#/properties/siteOptions/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;var p=F===r}else var p=!0;if(p){if(e.login!==void 0){let P=e.login;const F=r,O=r;let x=!1;const T=r;if(typeof P!="boolean"){const I={instancePath:t+"/login",schemaPath:"#/properties/login/anyOf/0/type",keyword:"type",params:{type:"boolean"},message:"must be boolean"};i===null?i=[I]:i.push(I),r++}var N=T===r;if(x=x||N,!x){const I=r;if(r===I)if(P&&typeof P=="object"&&!Array.isArray(P)){let D;if(P.username===void 0&&(D="username")||P.password===void 0&&(D="password")){const X={instancePath:t+"/login",schemaPath:"#/properties/login/anyOf/1/required",keyword:"required",params:{missingProperty:D},message:"must have required property '"+D+"'"};i===null?i=[X]:i.push(X),r++}else{const X=r;for(const Z in P)if(!(Z==="username"||Z==="password")){const M={instancePath:t+"/login",schemaPath:"#/properties/login/anyOf/1/additionalProperties",keyword:"additionalProperties",params:{additionalProperty:Z},message:"must NOT have additional properties"};i===null?i=[M]:i.push(M),r++;break}if(X===r){if(P.username!==void 0){const Z=r;if(typeof P.username!="string"){const M={instancePath:t+"/login/username",schemaPath:"#/properties/login/anyOf/1/properties/username/type",keyword:"type",params:{type:"string"},message:"must be string"};i===null?i=[M]:i.push(M),r++}var U=Z===r}else var U=!0;if(U)if(P.password!==void 0){const Z=r;if(typeof P.password!="string"){const Y={instancePath:t+"/login/password",schemaPath:"#/properties/login/anyOf/1/properties/password/type",keyword:"type",params:{type:"string"},message:"must be string"};i===null?i=[Y]:i.push(Y),r++}var U=Z===r}else var U=!0}}}else{const D={instancePath:t+"/login",schemaPath:"#/properties/login/anyOf/1/type",keyword:"type",params:{type:"object"},message:"must be object"};i===null?i=[D]:i.push(D),r++}var N=I===r;x=x||N}if(x)r=O,i!==null&&(O?i.length=O:i=null);else{const I={instancePath:t+"/login",schemaPath:"#/properties/login/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};return i===null?i=[I]:i.push(I),r++,ie.errors=i,!1}var p=F===r}else var p=!0;if(p){if(e.steps!==void 0){let P=e.steps;const F=r;if(r===F)if(Array.isArray(P)){var B=!0;const x=P.length;for(let T=0;T<x;T++){let k=P[T];const I=r,j=r;let D=!1;const X=r;h(k,{instancePath:t+"/steps/"+T,parentData:P,parentDataProperty:T,rootData:o})||(i=i===null?h.errors:i.concat(h.errors),r=i.length);var W=X===r;if(D=D||W,!D){const M=r;if(typeof k!="string"){const G={instancePath:t+"/steps/"+T,schemaPath:"#/properties/steps/items/anyOf/1/type",keyword:"type",params:{type:"string"},message:"must be string"};i===null?i=[G]:i.push(G),r++}var W=M===r;if(D=D||W,!D){const G=r,se={instancePath:t+"/steps/"+T,schemaPath:"#/properties/steps/items/anyOf/2/not",keyword:"not",params:{},message:"must NOT be valid"};i===null?i=[se]:i.push(se),r++;var W=G===r;if(D=D||W,!D){const J=r;if(typeof k!="boolean"){const te={instancePath:t+"/steps/"+T,schemaPath:"#/properties/steps/items/anyOf/3/type",keyword:"type",params:{type:"boolean"},message:"must be boolean"};i===null?i=[te]:i.push(te),r++}if(k!==!1){const te={instancePath:t+"/steps/"+T,schemaPath:"#/properties/steps/items/anyOf/3/const",keyword:"const",params:{allowedValue:!1},message:"must be equal to constant"};i===null?i=[te]:i.push(te),r++}var W=J===r;if(D=D||W,!D){const te=r;if(k!==null){const re={instancePath:t+"/steps/"+T,schemaPath:"#/properties/steps/items/anyOf/4/type",keyword:"type",params:{type:"null"},message:"must be null"};i===null?i=[re]:i.push(re),r++}var W=te===r;D=D||W}}}}if(D)r=j,i!==null&&(j?i.length=j:i=null);else{const M={instancePath:t+"/steps/"+T,schemaPath:"#/properties/steps/items/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};return i===null?i=[M]:i.push(M),r++,ie.errors=i,!1}var B=I===r;if(!B)break}}else return ie.errors=[{instancePath:t+"/steps",schemaPath:"#/properties/steps/type",keyword:"type",params:{type:"array"},message:"must be array"}],!1;var p=F===r}else var p=!0;if(p)if(e.$schema!==void 0){const P=r;if(typeof e.$schema!="string")return ie.errors=[{instancePath:t+"/$schema",schemaPath:"#/properties/%24schema/type",keyword:"type",params:{type:"string"},message:"must be string"}],!1;var p=P===r}else var p=!0}}}}}}}}}}}}else return ie.errors=[{instancePath:t,schemaPath:"#/type",keyword:"type",params:{type:"object"},message:"must be object"}],!1;return ie.errors=i,r===0}function _r(e,{instancePath:t="",parentData:s,parentDataProperty:n,rootData:o=e}={}){let i=null,r=0;return ie(e,{instancePath:t,parentData:s,parentDataProperty:n,rootData:o})||(i=i===null?ie.errors:i.concat(ie.errors),r=i.length),_r.errors=i,r===0}const{wpCLI:$u,...Rn}=fp,ec={...Rn,"wp-cli":$u,importFile:Rn.importWxr};function xo(e,{progress:t=new ds,semaphore:s=new zn({concurrency:3}),onStepCompleted:n=()=>{},corsProxy:o}={}){var v,w,L,E,z,N,U,B,W,q;e=structuredClone(e),e={...e,steps:(e.steps||[]).filter(sc).filter(ic)};for(const P of e.steps)!P||typeof P!="object"||(P.step==="importFile"?(P.step="importWxr",xe.warn('The "importFile" step is deprecated. Use "importWxr" instead.')):(P==null?void 0:P.step)==="installPlugin"&&"pluginZipFile"in P?(P.pluginData=P.pluginZipFile,xe.warn('The "pluginZipFile" option of the "installPlugin" step is deprecated. Use "pluginData" instead.')):(P==null?void 0:P.step)==="installTheme"&&"themeZipFile"in P&&(P.themeData=P.themeZipFile,xe.warn('The "themeZipFile" option of the "installTheme" step is deprecated. Use "themeData" instead.')));if(e.constants&&e.steps.unshift({step:"defineWpConfigConsts",consts:e.constants}),e.siteOptions&&e.steps.unshift({step:"setSiteOptions",options:e.siteOptions}),e.plugins){const P=e.plugins.map(F=>typeof F=="string"?F.startsWith("https://")?{resource:"url",url:F}:{resource:"wordpress.org/plugins",slug:F}:F).map(F=>({step:"installPlugin",pluginData:F}));e.steps.unshift(...P)}e.login&&e.steps.push({step:"login",...e.login===!0?{username:"admin"}:e.login});const i=((v=e.steps)==null?void 0:v.findIndex(P=>typeof P=="object"&&(P==null?void 0:P.step)&&["wp-cli","enableMultisite"].includes(P.step)))??-1;if((w=e==null?void 0:e.extraLibraries)!=null&&w.includes("wp-cli")||i!==-1){const P={step:"writeFile",data:Qo,path:hi};i===-1?(L=e.steps)==null||L.push(P):(E=e.steps)==null||E.splice(i,0,P)}const r=(z=e.steps)==null?void 0:z.findIndex(P=>typeof P=="object"&&(P==null?void 0:P.step)==="importWxr");r!==void 0&&r>-1&&(e.steps[r].importer==="data-liberation"?(N=e.steps)==null||N.splice(r,0,{step:"writeFile",path:"/internal/shared/data-liberation-core.phar",data:{resource:"url",url:Gu,caption:"Downloading the Data Liberation WXR importer"}}):(U=e.steps)==null||U.splice(r,0,{step:"installPlugin",pluginData:{resource:"url",url:"https://playground.wordpress.net/wordpress-importer.zip",caption:"Downloading the WordPress Importer plugin"}}));const{valid:p,errors:m}=tc(e);if(!p){const P=new Error(`Invalid blueprint: ${m[0].message} at ${m[0].instancePath}`);throw P.errors=m,P}const u=e.steps||[],d=u.reduce((P,F)=>{var O;return P+(((O=F.progress)==null?void 0:O.weight)||1)},0),b=u.map(P=>nc(P,{semaphore:s,rootProgressTracker:t,totalProgressWeight:d,corsProxy:o}));return{versions:{php:rc((B=e.preferredVersions)==null?void 0:B.php,fs,$n),wp:((W=e.preferredVersions)==null?void 0:W.wp)||"latest"},features:{networking:((q=e.features)==null?void 0:q.networking)??!1},extraLibraries:e.extraLibraries||[],run:async P=>{try{for(const{resources:F}of b)for(const O of F)O.setPlayground(P),O.isAsync&&O.resolve();for(const[F,{run:O,step:x}]of Object.entries(b))try{const T=await O(P);n(T,x)}catch(T){throw xe.error(T),new Error(`Error when executing the blueprint step #${F} (${JSON.stringify(x)}) ${T instanceof Error?`: ${T.message}`:T}`,{cause:T})}}finally{try{await P.goTo(e.landingPage||"/")}catch{}t.finish()}}}}function tc(e){var o;const t=_r(e);if(t)return{valid:t};const s=new Set;for(const i of _r.errors)i.schemaPath.startsWith("#/properties/steps/items/anyOf")||s.add(i.instancePath);const n=(o=_r.errors)==null?void 0:o.filter(i=>!(i.schemaPath.startsWith("#/properties/steps/items/anyOf")&&s.has(i.instancePath)));return{valid:t,errors:n}}function rc(e,t,s){return e&&t.includes(e)?e:s}function sc(e){return!!(typeof e=="object"&&e)}function ic(e){return["setPhpIniEntry","request"].includes(e.step)?(xe.warn(`The "${e.step}" Blueprint is no longer supported and you can remove it from your Blueprint.`),!1):!0}function nc(e,{semaphore:t,rootProgressTracker:s,totalProgressWeight:n,corsProxy:o}){var b;const i=s.stage((((b=e.progress)==null?void 0:b.weight)||1)/n),r={};for(const v of Object.keys(e)){let w=e[v];ju(w)&&(w=Pt.create(w,{semaphore:t,corsProxy:o})),r[v]=w}const p=async v=>{var w;try{return i.fillSlowly(),await ec[e.step](v,await ac(r),{tracker:i,initialCaption:(w=e.progress)==null?void 0:w.caption})}finally{i.finish()}},m=jn(r),u=jn(r).filter(v=>v.isAsync),d=1/(u.length+1);for(const v of u)v.progress=i.stage(d);return{run:p,step:e,resources:m}}function jn(e){const t=[];for(const s in e){const n=e[s];n instanceof Pt&&t.push(n)}return t}async function ac(e){const t={};for(const s in e){const n=e[s];n instanceof Pt?t[s]=await n.resolve():t[s]=n}return t}async function Ho(e,t){await e.run(t)}function oc(){}async function pc({iframe:e,blueprint:t,remoteUrl:s,progressTracker:n=new ds,disableProgressBar:o,onBlueprintStepCompleted:i,onClientConnected:r=()=>{},sapiName:p,onBeforeBlueprint:m,mounts:u,scope:d,corsProxy:b,shouldInstallWordPress:v}){lc(s),fc(e),s=uc(s,{progressbar:!o}),n.setCaption("Preparing WordPress"),t||(t={});const w=xo(t,{progress:n.stage(.5),onStepCompleted:i,corsProxy:b});await new Promise(z=>{e.src=s,e.addEventListener("load",z,!1)});const L=vu(e.contentWindow,e.ownerDocument.defaultView);await L.isConnected(),n.pipe(L);const E=n.stage();return await L.onDownloadProgress(E.loadingListener),await L.boot({mounts:u,sapiName:p,scope:d??Math.random().toFixed(16),shouldInstallWordPress:v,phpVersion:w.versions.php,wpVersion:w.versions.wp,withNetworking:w.features.networking,corsProxyUrl:b}),await L.isReady(),E.finish(),jo(xe,L),r(L),m&&await m(),await Ho(w,L),n.finish(),L}function fc(e){var t,s;(t=e.sandbox)!=null&&t.length&&!((s=e.sandbox)!=null&&s.contains("allow-storage-access-by-user-activation"))&&e.sandbox.add("allow-storage-access-by-user-activation")}const $r="https://playground.wordpress.net";function lc(e){const t=new URL(e,$r);if((t.origin===$r||t.hostname==="localhost")&&t.pathname!=="/remote.html")throw new Error(`Invalid remote URL: ${t}. Expected origin to be ${$r}/remote.html.`)}function uc(e,t){const s=new URL(e,$r),n=new URLSearchParams(s.search);for(const[o,i]of Object.entries(t))if(i!=null&&i!==!1)if(Array.isArray(i))for(const r of i)n.append(o,r.toString());else n.set(o,i.toString());return s.search=n.toString(),s.toString()}exports.LatestSupportedPHPVersion=$n;exports.SupportedPHPVersions=fs;exports.SupportedPHPVersionsList=tp;exports.activatePlugin=fi;exports.activateTheme=li;exports.compileBlueprint=xo;exports.cp=Gn;exports.defineSiteUrl=gi;exports.defineWpConfigConsts=ps;exports.enableMultisite=Zn;exports.exportWXR=ia;exports.importThemeStarterContent=wi;exports.importWordPressFiles=sa;exports.importWxr=ta;exports.installPlugin=aa;exports.installTheme=oa;exports.login=pa;exports.mkdir=Xn;exports.mv=Qn;exports.phpVar=Le;exports.phpVars=Or;exports.request=Un;exports.resetData=fa;exports.rm=ui;exports.rmdir=Yn;exports.runBlueprintSteps=Ho;exports.runPHP=qn;exports.runPHPWithOptions=In;exports.runSql=Vn;exports.runWpInstallationWizard=la;exports.setPhpIniEntries=ep;exports.setPluginProxyURL=oc;exports.setSiteLanguage=ca;exports.setSiteOptions=di;exports.startPlaygroundWeb=pc;exports.unzip=us;exports.updateUserMeta=Kn;exports.wpCLI=mi;exports.wpContentFilesExcludedFromExport=pi;exports.writeFile=Cr;exports.writeFiles=ea;exports.zipWpContent=ua;
