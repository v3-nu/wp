{"version":3,"file":"php-blueprints-8f44eb4d.js","sources":["../../../../../packages/playground/website/demos/php-blueprints.ts"],"sourcesContent":["import { startPlaygroundWeb } from '@wp-playground/client';\nimport { getRemoteUrl } from '../src/lib/config';\nimport { joinPaths } from '@php-wasm/util';\nexport {};\n\nconst iframe = document.querySelector('iframe')!;\nconst playground = await startPlaygroundWeb({\n\tiframe,\n\tremoteUrl: getRemoteUrl().toString(),\n\t// Blueprint v1, implemented in TypeScript:\n\tblueprint: {\n\t\tpreferredVersions: {\n\t\t\twp: 'latest',\n\t\t\t// Required for the PHP library to run:\n\t\t\tphp: '8.2',\n\t\t},\n\t\tfeatures: {\n\t\t\tnetworking: true,\n\t\t},\n\t\t// landingPage: '/wp-content/index.php',\n\t\tlandingPage: '/',\n\t},\n});\n\nconst response = await fetch('./blueprints.phar');\nconst phar = new Uint8Array(await response.arrayBuffer());\nawait playground.writeFile(\n\tjoinPaths(await playground.documentRoot, 'blueprints.phar'),\n\tphar\n);\nconst outputDiv = document.getElementById('output')!;\n\ntry {\n\tconst wpCliRequest = fetch(\n\t\t'https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar'\n\t);\n\tconst wpCliResponse = await wpCliRequest;\n\tconst wpCli = await wpCliResponse.arrayBuffer();\n\tawait playground.writeFile('/wordpress/wp-cli.phar', new Uint8Array(wpCli));\n\n\toutputDiv.textContent +=\n\t\t'Running the Blueprint...\\nLive progress updates:\\n';\n\tawait playground.onMessage((message: string) => {\n\t\ttry {\n\t\t\tconst parsed = JSON.parse(message);\n\t\t\tif (parsed.type === 'progress') {\n\t\t\t\toutputDiv.textContent +=\n\t\t\t\t\tparsed.progress + '% ' + (parsed.caption || '') + '\\n';\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\t});\n\t// Blueprint v2, implemented in PHP. The PHP builder is not required. It only\n\t// produces a JSON document that is then used to run the Blueprint.\n\tconst result = await playground.run({\n\t\tcode: `<?php\n\t\tuse WordPress\\\\Blueprints\\\\ContainerBuilder;\n\t\tuse WordPress\\\\Blueprints\\\\Model\\\\BlueprintBuilder;\n\t\tuse WordPress\\\\Blueprints\\\\Model\\\\DataClass\\\\Blueprint;\n\t\tuse WordPress\\\\Blueprints\\\\Model\\\\DataClass\\\\UrlResource;\n\t\tuse WordPress\\\\Blueprints\\\\Progress\\\\DoneEvent;\n\t\tuse WordPress\\\\Blueprints\\\\Progress\\\\ProgressEvent;\n\t\tuse Symfony\\\\Component\\\\EventDispatcher\\\\EventSubscriberInterface;\n\t\tuse function WordPress\\\\Blueprints\\\\run_blueprint;\n\n\t\t// Provide stdin, stdout, stderr streams outside of\n\t\t// the CLI SAPI.\n\t\tdefine('STDIN', fopen('php://stdin', 'rb'));\n\t\tdefine('STDOUT', fopen('php://stdout', 'wb'));\n\t\tdefine('STDERR', fopen('/tmp/stderr', 'wb'));\n\n\t\t/*\n\t\t * When the .phar file is build with this box option:\n\t\t * > \"check-requirements\": false,\n\t\t * Then requiring it breaks http and https requests:\n\t\t *\n\t\t * > echo file_get_contents('http://127.0.0.1:5400/website-server/');\n\t\t * > <b>Warning</b>:  PHP Request Startup: Failed to open stream: Operation timed out in <b>php-wasm run script</b> on line <b>13</b><br />\n\t\t *\n\t\t * The check is therefore disabled for now.\n\t\t */\n\t\trequire '/wordpress/blueprints.phar';\n\n\t\t$blueprint = BlueprintBuilder::create()\n\t\t\t// This isn't a WordPress zip file since wordpress.org\n\t\t\t// doesn't expose the right CORS headers. It is a HTTPS-hosted\n\t\t\t// zip file nonetheless, and we can use it for testing.\n\t\t\t// Uncomment this as needed\n\t\t\t// ->setWordPressVersion( 'https://downloads.wordpress.org/plugin/hello-dolly.1.7.3.zip' )\n\n\t\t\t->withFile( 'wordpress.txt', (new UrlResource())->setUrl('https://downloads.wordpress.org/plugin/hello-dolly.zip') )\n\t\t\t->withSiteOptions( [\n\t\t\t\t'blogname' => 'My Playground Blog',\n\t\t\t] )\n\t\t\t->withWpConfigConstants( [\n\t\t\t\t'WP_DEBUG'         => true,\n\t\t\t\t'WP_DEBUG_LOG'     => true,\n\t\t\t\t'WP_DEBUG_DISPLAY' => true,\n\t\t\t\t'WP_CACHE'         => true,\n\t\t\t] )\n\t\t\t->withPlugins( [\n\t\t\t\t'https://downloads.wordpress.org/plugin/hello-dolly.zip',\n\t\t\t\t// When the regular UrlDataSource is used, the second\n\t\t\t\t// downloaded zip file always errors with:\n\t\t\t\t// > Failed to open stream: Operation timed out\n\t\t\t\t'https://downloads.wordpress.org/plugin/classic-editor.zip',\n\t\t\t\t'https://downloads.wordpress.org/plugin/gutenberg.17.7.0.zip',\n\t\t\t] )\n\t\t\t->withTheme( 'https://downloads.wordpress.org/theme/pendant.zip' )\n\t\t\t// ->withContent( 'https://raw.githubusercontent.com/WordPress/theme-test-data/master/themeunittestdata.wordpress.xml' )\n\t\t\t->andRunSQL( <<<'SQL'\n\t\t\t\tCREATE TABLE tmp_table ( id INT );\n\t\t\t\tINSERT INTO tmp_table VALUES (1);\n\t\t\t\tINSERT INTO tmp_table VALUES (2);\n\t\t\t\tSQL\n\t\t\t)\n\t\t\t->withFile( 'wordpress.txt', 'Data' )\n\t\t\t->toBlueprint()\n\t\t;\n\n\t\techo \"Running the following Blueprint:\\n\";\n\t\techo json_encode($blueprint, JSON_PRETTY_PRINT).\"\\n\\n\";\n\n\t\t$subscriber = new class implements EventSubscriberInterface {\n\t\t\tpublic static function getSubscribedEvents() {\n\t\t\t\treturn [\n\t\t\t\t\tProgressEvent::class => 'onProgress',\n\t\t\t\t\tDoneEvent::class     => 'onDone',\n\t\t\t\t];\n\t\t\t}\n\n\t\t\tpublic function onProgress( ProgressEvent $event ) {\n\t\t\t\tpost_message_to_js(json_encode([\n\t\t\t\t\t'type'    => 'progress',\n\t\t\t\t\t'caption'  => $event->caption,\n\t\t\t\t\t'progress' => $event->progress,\n\t\t\t\t]));\n\t\t\t}\n\n\t\t\tpublic function onDone( DoneEvent $event ) {\n\t\t\t\tpost_message_to_js(json_encode([\n\t\t\t\t\t'type'    => 'progress',\n\t\t\t\t\t'progress' => 100,\n\t\t\t\t]));\n\t\t\t}\n\t\t};\n\n\n\t\t$results = run_blueprint(\n\t\t\t$blueprint,\n\t\t\t[\n\t\t\t\t'environment'        => ContainerBuilder::ENVIRONMENT_PLAYGROUND,\n\t\t\t\t'documentRoot'       => '/wordpress',\n\t\t\t\t'progressSubscriber' => $subscriber,\n\t\t\t\t'progressType'       => 'steps',\n\t\t\t]\n\t\t);\n\n\t\techo \"Blueprint execution finished!\\n\";\n\t\techo \"Contents of /wordpress/wp-content/plugins:\";\n\t\tprint_r(glob('/wordpress/wp-content/plugins/*'));\n\n\t\t`,\n\t});\n\n\toutputDiv.textContent += result.text;\n\tconsole.log(result.text);\n} catch (e) {\n\tconsole.error(e);\n\toutputDiv.textContent = e + '';\n\tthrow e;\n}\n\nconsole.log(await playground.listFiles('/wordpress/wp-content/plugins'));\n"],"names":["iframe","playground","startPlaygroundWeb","getRemoteUrl","response","phar","joinPaths","outputDiv","wpCli","message","parsed","e","result"],"mappings":"wFAKA,MAAMA,EAAS,SAAS,cAAc,QAAQ,EACxCC,EAAa,MAAMC,EAAmB,CAC3C,OAAAF,EACA,UAAWG,EAAa,EAAE,SAAS,EAEnC,UAAW,CACV,kBAAmB,CAClB,GAAI,SAEJ,IAAK,KACN,EACA,SAAU,CACT,WAAY,EACb,EAEA,YAAa,GACd,CACD,CAAC,EAEKC,EAAW,MAAM,MAAM,mBAAmB,EAC1CC,EAAO,IAAI,WAAW,MAAMD,EAAS,YAAa,CAAA,EACxD,MAAMH,EAAW,UAChBK,EAAU,MAAML,EAAW,aAAc,iBAAiB,EAC1DI,CACD,EACA,MAAME,EAAY,SAAS,eAAe,QAAQ,EAElD,GAAI,CAKG,MAAAC,EAAQ,MADQ,MAHD,MACpB,2EAAA,GAGiC,cAClC,MAAMP,EAAW,UAAU,yBAA0B,IAAI,WAAWO,CAAK,CAAC,EAE1ED,EAAU,aACT;AAAA;AAAA,EACK,MAAAN,EAAW,UAAWQ,GAAoB,CAC3C,GAAA,CACG,MAAAC,EAAS,KAAK,MAAMD,CAAO,EAC7BC,EAAO,OAAS,aACnBH,EAAU,aACTG,EAAO,SAAW,MAAQA,EAAO,SAAW,IAAM;AAAA,SAE5CC,EAAG,CACX,QAAQ,MAAMA,CAAC,CAChB,CAAA,CACA,EAGK,MAAAC,EAAS,MAAMX,EAAW,IAAI,CACnaAAeK,EAAO,KACxB,QAAA,IAAIA,EAAO,IAAI,CACxB,OAASD,EAAG,CACX,cAAQ,MAAMA,CAAC,EACfJ,EAAU,YAAcI,EAAI,GACtBA,CACP,CAEA,QAAQ,IAAI,MAAMV,EAAW,UAAU,+BAA+B,CAAC"}