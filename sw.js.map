{"version":3,"file":"sw.js","sources":["packages/php-wasm/scopes/src/index.ts","packages/php-wasm/node-polyfills/src/lib/current-js-runtime.ts","packages/php-wasm/node-polyfills/src/lib/blob.ts","packages/php-wasm/node-polyfills/src/lib/custom-event.ts","packages/php-wasm/node-polyfills/src/lib/url.ts","packages/php-wasm/universal/src/lib/rethrow-file-system-error.ts","packages/php-wasm/logger/src/lib/handlers/log-event.ts","packages/php-wasm/logger/src/lib/handlers/log-to-console.ts","packages/php-wasm/logger/src/lib/handlers/log-to-memory.ts","packages/php-wasm/logger/src/lib/logger.ts","packages/php-wasm/logger/src/lib/collectors/collect-service-worker-metrics.ts","packages/php-wasm/util/src/lib/paths.ts","packages/php-wasm/universal/src/lib/fs-helpers.ts","packages/php-wasm/universal/src/lib/load-php-runtime.ts","packages/php-wasm/stream-compression/src/utils/iterable-stream-polyfill.ts","packages/php-wasm/universal/src/lib/php-request-handler.ts","packages/php-wasm/web-service-worker/src/messaging.ts","packages/php-wasm/web-service-worker/src/utils.ts","packages/playground/wordpress/src/rewrite-rules.ts","packages/playground/remote/src/lib/offline-mode-cache.ts","packages/playground/remote/service-worker.ts"],"sourcesContent":["/**\n * Scopes are unique strings, like `my-site`, used to uniquely brand\n * the outgoing HTTP traffic from each browser tab. This helps the\n * main thread distinguish between the relevant and irrelevant\n * messages received from the Service Worker.\n *\n * Scopes are included in the `PHPRequestHandler.absoluteUrl` as follows:\n *\n * An **unscoped** URL: http://localhost:8778/wp-login.php\n * A **scoped** URL:    http://localhost:8778/scope:my-site/wp-login.php\n *\n * For more information, see the README section on scopes.\n */\n\n/**\n * Checks if the given URL contains scope information.\n *\n * @example\n * ```js\n * isURLScoped(new URL('http://localhost/scope:my-site/index.php'));\n * // true\n *\n * isURLScoped(new URL('http://localhost/index.php'));\n * // false\n * ```\n *\n * @param  url The URL to check.\n * @returns `true` if the URL contains scope information, `false` otherwise.\n */\nexport function isURLScoped(url: URL): boolean {\n\treturn url.pathname.startsWith(`/scope:`);\n}\n\n/**\n * Returns the scope stored in the given URL.\n *\n * @example\n * ```js\n * getScopeFromURL(new URL('http://localhost/scope:my-site/index.php'));\n * // '96253'\n *\n * getScopeFromURL(new URL('http://localhost/index.php'));\n * // null\n * ```\n *\n * @param  url The URL.\n * @returns The scope if the URL contains a scope, `null` otherwise.\n */\nexport function getURLScope(url: URL): string | null {\n\tif (isURLScoped(url)) {\n\t\treturn url.pathname.split('/')[1].split(':')[1];\n\t}\n\treturn null;\n}\n\n/**\n * Returns a new URL with the requested scope information.\n *\n * @example\n * ```js\n * setURLScope(new URL('http://localhost/index.php'), 'my-site');\n * // URL('http://localhost/scope:my-site/index.php')\n *\n * setURLScope(new URL('http://localhost/scope:my-site/index.php'), 'my-site');\n * // URL('http://localhost/scope:my-site/index.php')\n *\n * setURLScope(new URL('http://localhost/index.php'), null);\n * // URL('http://localhost/index.php')\n * ```\n *\n * @param  url   The URL to scope.\n * @param  scope The scope value.\n * @returns A new URL with the scope information in it.\n */\nexport function setURLScope(url: URL | string, scope: string | null): URL {\n\tlet newUrl = new URL(url);\n\n\tif (isURLScoped(newUrl)) {\n\t\tif (scope) {\n\t\t\tconst parts = newUrl.pathname.split('/');\n\t\t\tparts[1] = `scope:${scope}`;\n\t\t\tnewUrl.pathname = parts.join('/');\n\t\t} else {\n\t\t\tnewUrl = removeURLScope(newUrl);\n\t\t}\n\t} else if (scope) {\n\t\tconst suffix = newUrl.pathname === '/' ? '' : newUrl.pathname;\n\t\tnewUrl.pathname = `/scope:${scope}${suffix}`;\n\t}\n\n\treturn newUrl;\n}\n\n/**\n * Returns a new URL without any scope information.\n *\n * @example\n * ```js\n * removeURLScope(new URL('http://localhost/scope:my-site/index.php'));\n * // URL('http://localhost/index.php')\n *\n * removeURLScope(new URL('http://localhost/index.php'));\n * // URL('http://localhost/index.php')\n * ```\n *\n * @param  url The URL to remove scope information from.\n * @returns A new URL without the scope information.\n */\nexport function removeURLScope(url: URL): URL {\n\tif (!isURLScoped(url)) {\n\t\treturn url;\n\t}\n\tconst newUrl = new URL(url);\n\tconst parts = newUrl.pathname.split('/');\n\tnewUrl.pathname = '/' + parts.slice(2).join('/');\n\treturn newUrl;\n}\n","export const currentJsRuntime = (function () {\n\tif (typeof process !== 'undefined' && process.release?.name === 'node') {\n\t\treturn 'NODE';\n\t} else if (typeof window !== 'undefined') {\n\t\treturn 'WEB';\n\t} else if (\n\t\t// @ts-ignore\n\t\ttypeof WorkerGlobalScope !== 'undefined' &&\n\t\t// @ts-ignore\n\t\tself instanceof (WorkerGlobalScope as any)\n\t) {\n\t\treturn 'WORKER';\n\t} else {\n\t\treturn 'NODE';\n\t}\n})();\n","import { currentJsRuntime } from './current-js-runtime';\n\n// Without this check, the polyfills below would also be applied\n// in web browsers. Unfortunately, Safari doesn't sypport BYOB streams\n// and doesn't support the polyfill provided here. Let's only apply\n// those polyfills in Node.js environments.\nif (currentJsRuntime === 'NODE') {\n\t/**\n\t * WordPress Playground heavily realies on the File class. This module\n\t * polyfill the File class for the different environments where\n\t * WordPress Playground may run.\n\t */\n\tif (typeof File === 'undefined') {\n\t\t/**\n\t\t * Polyfill the File class that isn't shipped in Node.js version 18.\n\t\t *\n\t\t * Blob conveniently provides a lot of the same methods as File, we\n\t\t * just need to implement a few File-specific properties.\n\t\t */\n\t\tclass File extends Blob {\n\t\t\toverride readonly name;\n\t\t\treadonly lastModified: number;\n\t\t\treadonly lastModifiedDate: Date;\n\t\t\twebkitRelativePath: any;\n\t\t\tconstructor(\n\t\t\t\tsources: BlobPart[],\n\t\t\t\tfileName: string,\n\t\t\t\toptions?: FilePropertyBag\n\t\t\t) {\n\t\t\t\tsuper(sources);\n\t\t\t\t/*\n\t\t\t\t * Compute a valid last modified date as that's what the\n\t\t\t\t * browsers do:\n\t\t\t\t *\n\t\t\t\t * ```\n\t\t\t\t * > new File([], '').lastModifiedDate\n\t\t\t\t * Sat Dec 16 2023 10:07:53 GMT+0100 (czas środkowoeuropejski standardowy)\n\t\t\t\t *\n\t\t\t\t * > new File([], '', { lastModified: NaN }).lastModifiedDate\n\t\t\t\t * Thu Jan 01 1970 01:00:00 GMT+0100 (czas środkowoeuropejski standardowy)\n\t\t\t\t *\n\t\t\t\t * > new File([], '', { lastModified: 'string' }).lastModifiedDate\n\t\t\t\t * Thu Jan 01 1970 01:00:00 GMT+0100 (czas środkowoeuropejski standardowy)\n\t\t\t\t *\n\t\t\t\t * > new File([], '', { lastModified: {} }).lastModifiedDate\n\t\t\t\t * Thu Jan 01 1970 01:00:00 GMT+0100 (czas środkowoeuropejski standardowy)\n\t\t\t\t * ```\n\t\t\t\t */\n\t\t\t\tlet date;\n\t\t\t\tif (options?.lastModified) {\n\t\t\t\t\tdate = new Date();\n\t\t\t\t}\n\t\t\t\tif (!date || isNaN(date.getFullYear())) {\n\t\t\t\t\tdate = new Date();\n\t\t\t\t}\n\t\t\t\tthis.lastModifiedDate = date;\n\t\t\t\tthis.lastModified = date.getMilliseconds();\n\t\t\t\tthis.name = fileName || '';\n\t\t\t}\n\t\t}\n\t\tglobal.File = File;\n\t}\n\n\t// eslint-disable-next-line no-inner-declarations\n\tfunction asPromise<T>(obj: FileReader) {\n\t\treturn new Promise<T>(function (resolve, reject) {\n\t\t\tobj.onload = obj.onerror = function (event: Event) {\n\t\t\t\tobj.onload = obj.onerror = null;\n\n\t\t\t\tif (event.type === 'load') {\n\t\t\t\t\tresolve(obj.result as T);\n\t\t\t\t} else {\n\t\t\t\t\treject(new Error('Failed to read the blob/file'));\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * File is a subclass of Blob. Let's polyfill the following Blob\n\t * methods that are missing in JSDOM:\n\t *\n\t * – Blob.text()\n\t * – Blob.stream()\n\t * – Blob.arrayBuffer()\n\t *\n\t * See the related JSDom issue:\n\t *\n\t * – [Implement Blob.stream, Blob.text and Blob.arrayBuffer](https://github.com/jsdom/jsdom/issues/2555).\n\t *\n\t * @source `blob-polyfill` npm package.\n\t * * By Eli Grey, https://eligrey.com\n\t * * By Jimmy Wärting, https://github.com/jimmywarting\n\t */\n\tif (typeof Blob.prototype.arrayBuffer === 'undefined') {\n\t\tBlob.prototype.arrayBuffer = function arrayBuffer() {\n\t\t\tconst reader = new FileReader();\n\t\t\treader.readAsArrayBuffer(this);\n\t\t\treturn asPromise<Uint8Array>(reader);\n\t\t};\n\t}\n\n\tif (typeof Blob.prototype.text === 'undefined') {\n\t\tBlob.prototype.text = function text() {\n\t\t\tconst reader = new FileReader();\n\t\t\treader.readAsText(this);\n\t\t\treturn asPromise<string>(reader);\n\t\t};\n\t}\n\n\t/**\n\t * Detects if BYOB (Bring Your Own Buffer) streams are supported\n\t * in the current environment.\n\t *\n\t * BYOB is a new feature in the Streams API that allows reading\n\t * an arbitrary number of bytes from a stream. It's not supported\n\t * in older versions of Node.js.\n\t *\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamBYOBReader\n\t */\n\t// eslint-disable-next-line no-inner-declarations\n\tfunction isByobSupported() {\n\t\tconst inputBytes = new Uint8Array([1, 2, 3, 4]);\n\t\tconst file = new File([inputBytes], 'test');\n\t\tconst stream = file.stream();\n\t\ttry {\n\t\t\t// This throws on older versions of node:\n\t\t\tstream.getReader({ mode: 'byob' });\n\t\t\treturn true;\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Polyfill the stream() method if it either doesn't exist,\n\t * or is an older version shipped with e.g. Node.js 18 where\n\t * BYOB streams seem to be unsupported.\n\t */\n\tif (typeof Blob.prototype.stream === 'undefined' || !isByobSupported()) {\n\t\tBlob.prototype.stream = function () {\n\t\t\tlet position = 0;\n\t\t\t// eslint-disable-next-line\n\t\t\tconst blob = this;\n\t\t\treturn new ReadableStream({\n\t\t\t\ttype: 'bytes',\n\t\t\t\t// 0.5 MB seems like a reasonable chunk size, let's adjust\n\t\t\t\t// this if needed.\n\t\t\t\tautoAllocateChunkSize: 512 * 1024,\n\n\t\t\t\tasync pull(controller) {\n\t\t\t\t\tconst view = controller.byobRequest!.view;\n\n\t\t\t\t\t// Read the next chunk of data:\n\t\t\t\t\tconst chunk = blob.slice(\n\t\t\t\t\t\tposition,\n\t\t\t\t\t\tposition + view!.byteLength\n\t\t\t\t\t);\n\t\t\t\t\tconst buffer = await chunk.arrayBuffer();\n\t\t\t\t\tconst uint8array = new Uint8Array(buffer);\n\n\t\t\t\t\t// Emit that chunk:\n\t\t\t\t\tnew Uint8Array(view!.buffer).set(uint8array);\n\t\t\t\t\tconst bytesRead = uint8array.byteLength;\n\t\t\t\t\tcontroller.byobRequest!.respond(bytesRead);\n\n\t\t\t\t\t// Bump the position and close this stream once\n\t\t\t\t\t// we've read the entire blob.\n\t\t\t\t\tposition += bytesRead;\n\t\t\t\t\tif (position >= blob.size) {\n\t\t\t\t\t\tcontroller.close();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\t};\n\t}\n}\n\nexport default {};\n","import { currentJsRuntime } from './current-js-runtime';\n\nif (currentJsRuntime === 'NODE' && typeof CustomEvent === 'undefined') {\n\tclass CustomEvent<T = any> extends Event {\n\t\treadonly detail: T;\n\t\tconstructor(\n\t\t\tname: string,\n\t\t\toptions: {\n\t\t\t\tdetail?: T;\n\t\t\t\tbubbles?: boolean;\n\t\t\t\tcancellable?: boolean;\n\t\t\t\tcomposed?: boolean;\n\t\t\t} = {}\n\t\t) {\n\t\t\tsuper(name, options);\n\t\t\t/*\n\t\t\t * The bang symbol (`!`) here is a lie to make TypeScript happy.\n\t\t\t *\n\t\t\t * Without the bang TS has the following complaint:\n\t\t\t *\n\t\t\t * > T | undefined is not assignable to type T\n\t\t\t *\n\t\t\t * In reality, it's absolutely fine for T (or `options.detail`)\n\t\t\t * to be undefined. However, the CustomEvent interface shipped\n\t\t\t * with TypeScript doesn't think so and marks `this.details` as\n\t\t\t * a required property.\n\t\t\t *\n\t\t\t * This little and harmless trick silences that error.\n\t\t\t */\n\t\t\tthis.detail = options.detail!;\n\t\t}\n\t\tinitCustomEvent(): void {}\n\t}\n\tglobalThis.CustomEvent = CustomEvent;\n}\n","import { currentJsRuntime } from './current-js-runtime';\n\nif (currentJsRuntime === 'NODE') {\n\t/**\n\t * Polyfill for URL.canParse if it's missing.\n\t *\n\t * URL.canParse is available since Node 19.9.0,\n\t * but Playground currently uses Node 18.18.0.\n\t *\n\t * This implementation is based on the one from `core-js`\n\t * by Denis Pushkarev, https://github.com/zloirock\n\t * https://github.com/zloirock/core-js/blob/master/packages/core-js/modules/web.url.can-parse.js\n\t */\n\tif (typeof URL.canParse !== 'function') {\n\t\tglobalThis.URL.canParse = function (url: string) {\n\t\t\ttry {\n\t\t\t\treturn !!new URL(url);\n\t\t\t} catch (e) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t};\n\t}\n}\n","/**\n * Emscripten's filesystem-related Exception.\n *\n * @see https://emscripten.org/docs/api_reference/Filesystem-API.html\n * @see https://github.com/emscripten-core/emscripten/blob/main/system/lib/libc/musl/arch/emscripten/bits/errno.h\n * @see https://github.com/emscripten-core/emscripten/blob/38eedc630f17094b3202fd48ac0c2c585dbea31e/system/include/wasi/api.h#L336\n */\n\nexport interface ErrnoError extends Error {\n\tnode?: any;\n\terrno: number;\n\tmessage: string;\n}\n/**\n * @see https://github.com/emscripten-core/emscripten/blob/38eedc630f17094b3202fd48ac0c2c585dbea31e/system/include/wasi/api.h#L336\n */\nexport const FileErrorCodes = {\n\t0: 'No error occurred. System call completed successfully.',\n\t1: 'Argument list too long.',\n\t2: 'Permission denied.',\n\t3: 'Address in use.',\n\t4: 'Address not available.',\n\t5: 'Address family not supported.',\n\t6: 'Resource unavailable, or operation would block.',\n\t7: 'Connection already in progress.',\n\t8: 'Bad file descriptor.',\n\t9: 'Bad message.',\n\t10: 'Device or resource busy.',\n\t11: 'Operation canceled.',\n\t12: 'No child processes.',\n\t13: 'Connection aborted.',\n\t14: 'Connection refused.',\n\t15: 'Connection reset.',\n\t16: 'Resource deadlock would occur.',\n\t17: 'Destination address required.',\n\t18: 'Mathematics argument out of domain of function.',\n\t19: 'Reserved.',\n\t20: 'File exists.',\n\t21: 'Bad address.',\n\t22: 'File too large.',\n\t23: 'Host is unreachable.',\n\t24: 'Identifier removed.',\n\t25: 'Illegal byte sequence.',\n\t26: 'Operation in progress.',\n\t27: 'Interrupted function.',\n\t28: 'Invalid argument.',\n\t29: 'I/O error.',\n\t30: 'Socket is connected.',\n\t31: 'There is a directory under that path.',\n\t32: 'Too many levels of symbolic links.',\n\t33: 'File descriptor value too large.',\n\t34: 'Too many links.',\n\t35: 'Message too large.',\n\t36: 'Reserved.',\n\t37: 'Filename too long.',\n\t38: 'Network is down.',\n\t39: 'Connection aborted by network.',\n\t40: 'Network unreachable.',\n\t41: 'Too many files open in system.',\n\t42: 'No buffer space available.',\n\t43: 'No such device.',\n\t44: 'There is no such file or directory OR the parent directory does not exist.',\n\t45: 'Executable file format error.',\n\t46: 'No locks available.',\n\t47: 'Reserved.',\n\t48: 'Not enough space.',\n\t49: 'No message of the desired type.',\n\t50: 'Protocol not available.',\n\t51: 'No space left on device.',\n\t52: 'Function not supported.',\n\t53: 'The socket is not connected.',\n\t54: 'Not a directory or a symbolic link to a directory.',\n\t55: 'Directory not empty.',\n\t56: 'State not recoverable.',\n\t57: 'Not a socket.',\n\t58: 'Not supported, or operation not supported on socket.',\n\t59: 'Inappropriate I/O control operation.',\n\t60: 'No such device or address.',\n\t61: 'Value too large to be stored in data type.',\n\t62: 'Previous owner died.',\n\t63: 'Operation not permitted.',\n\t64: 'Broken pipe.',\n\t65: 'Protocol error.',\n\t66: 'Protocol not supported.',\n\t67: 'Protocol wrong type for socket.',\n\t68: 'Result too large.',\n\t69: 'Read-only file system.',\n\t70: 'Invalid seek.',\n\t71: 'No such process.',\n\t72: 'Reserved.',\n\t73: 'Connection timed out.',\n\t74: 'Text file busy.',\n\t75: 'Cross-device link.',\n\t76: 'Extension: Capabilities insufficient.',\n} as any;\n\nexport function getEmscriptenFsError(e: any) {\n\tconst errno = typeof e === 'object' ? ((e as any)?.errno as any) : null;\n\tif (errno in FileErrorCodes) {\n\t\treturn FileErrorCodes[errno];\n\t}\n}\n\nexport function rethrowFileSystemError(messagePrefix = '') {\n\treturn function catchFileSystemError(\n\t\ttarget: any,\n\t\tmethodName: string,\n\t\tdescriptor: PropertyDescriptor\n\t) {\n\t\tconst method = descriptor.value;\n\t\tdescriptor.value = function (...args: any[]) {\n\t\t\ttry {\n\t\t\t\treturn method.apply(this, args);\n\t\t\t} catch (e) {\n\t\t\t\tconst errno =\n\t\t\t\t\ttypeof e === 'object' ? ((e as any)?.errno as any) : null;\n\t\t\t\tif (errno in FileErrorCodes) {\n\t\t\t\t\tconst errmsg = FileErrorCodes[errno];\n\t\t\t\t\tconst path = typeof args[1] === 'string' ? args[1] : null;\n\t\t\t\t\tconst formattedPrefix =\n\t\t\t\t\t\tpath !== null\n\t\t\t\t\t\t\t? messagePrefix.replaceAll('{path}', path)\n\t\t\t\t\t\t\t: messagePrefix;\n\t\t\t\t\tthrow new Error(`${formattedPrefix}: ${errmsg}`, {\n\t\t\t\t\t\tcause: e,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t};\n\t};\n}\n","import { LogHandler } from '../log-handlers';\nimport { Log, logger } from '../logger';\n\nexport const logEventType = 'playground-log';\n\nexport const logEvent: LogHandler = (log: Log, ...args: any[]): void => {\n\tlogger.dispatchEvent(\n\t\tnew CustomEvent(logEventType, {\n\t\t\tdetail: {\n\t\t\t\tlog,\n\t\t\t\targs,\n\t\t\t},\n\t\t})\n\t);\n};\n","import { LogHandler } from '../log-handlers';\nimport { Log, prepareLogMessage } from '../logger';\n\n/**\n * Log message to the console.\n */\nexport const logToConsole: LogHandler = (log: Log, ...args: any[]): void => {\n\tif (typeof log.message === 'string') {\n\t\t// Some errors have a read-only message property where direct\n\t\t// assignment will throw an error. The assignment is merely for\n\t\t// formatting, so let's assign with Reflect.set and avoid the error.\n\t\tReflect.set(log, 'message', prepareLogMessage(log.message));\n\t} else if (log.message.message && typeof log.message.message === 'string') {\n\t\t// Some errors have a read-only message property where direct\n\t\t// assignment will throw an error. The assignment is merely for\n\t\t// formatting, so let's assign with Reflect.set and avoid the error.\n\t\tReflect.set(\n\t\t\tlog.message,\n\t\t\t'message',\n\t\t\tprepareLogMessage(log.message.message)\n\t\t);\n\t}\n\t/* eslint-disable no-console */\n\tswitch (log.severity) {\n\t\tcase 'Debug':\n\t\t\tconsole.debug(log.message, ...args);\n\t\t\tbreak;\n\t\tcase 'Info':\n\t\t\tconsole.info(log.message, ...args);\n\t\t\tbreak;\n\t\tcase 'Warn':\n\t\t\tconsole.warn(log.message, ...args);\n\t\t\tbreak;\n\t\tcase 'Error':\n\t\t\tconsole.error(log.message, ...args);\n\t\t\tbreak;\n\t\tcase 'Fatal':\n\t\t\tconsole.error(log.message, ...args);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log(log.message, ...args);\n\t}\n\t/* eslint-enable no-console */\n};\n","import { LogHandler } from '../log-handlers';\nimport { formatLogEntry, Log } from '../logger';\n\nconst prepareLogMessage = (logMessage: object): string => {\n\tif (logMessage instanceof Error) {\n\t\treturn [logMessage.message, logMessage.stack].join('\\n');\n\t}\n\treturn JSON.stringify(logMessage, null, 2);\n};\n\nexport const logs: string[] = [];\n\nconst addToLogArray = (message: string): void => {\n\tlogs.push(message);\n};\n\n/**\n * Log to memory\n */\nexport const logToMemory: LogHandler = (log: Log): void => {\n\tif (log.raw === true) {\n\t\taddToLogArray(log.message);\n\t} else {\n\t\tconst message = formatLogEntry(\n\t\t\ttypeof log.message === 'object'\n\t\t\t\t? prepareLogMessage(log.message)\n\t\t\t\t: log.message,\n\t\t\tlog.severity ?? 'Info',\n\t\t\tlog.prefix ?? 'JavaScript'\n\t\t);\n\t\taddToLogArray(message);\n\t}\n};\n\nexport const clearMemoryLogs = (): void => {\n\tlogs.length = 0;\n};\n","import { logEvent } from './handlers/log-event';\nimport { logToMemory, logToConsole, logs } from './log-handlers';\n\nexport { logEventType } from './handlers/log-event';\n\nexport { errorLogPath } from './collectors/collect-php-logs';\n\nexport type Log = {\n\tmessage: any;\n\tseverity?: LogSeverity;\n\tprefix?: LogPrefix;\n\traw?: boolean;\n};\n\n/**\n * Log severity levels.\n */\nexport type LogSeverity = 'Debug' | 'Info' | 'Warn' | 'Error' | 'Fatal';\n\n/**\n * Log prefix.\n */\nexport type LogPrefix = 'WASM Crash' | 'PHP' | 'JavaScript';\n\n/**\n * A logger for Playground.\n */\nexport class Logger extends EventTarget {\n\tpublic readonly fatalErrorEvent = 'playground-fatal-error';\n\n\t// constructor\n\tconstructor(\n\t\t// Log handlers\n\t\tprivate readonly handlers: Function[] = []\n\t) {\n\t\tsuper();\n\t}\n\n\t/**\n\t * Get all logs.\n\t * @returns string[]\n\t */\n\tpublic getLogs(): string[] {\n\t\tif (!this.handlers.includes(logToMemory)) {\n\t\t\tthis\n\t\t\t\t.error(`Logs aren't stored because the logToMemory handler isn't registered.\n\t\t\t\tIf you're using a custom logger instance, make sure to register logToMemory handler.\n\t\t\t`);\n\t\t\treturn [];\n\t\t}\n\t\treturn [...logs];\n\t}\n\n\t/**\n\t * Log message with severity.\n\t *\n\t * @param message any\n\t * @param severity LogSeverity\n\t * @param raw boolean\n\t * @param args any\n\t */\n\tpublic logMessage(log: Log, ...args: any[]): void {\n\t\tfor (const handler of this.handlers) {\n\t\t\thandler(log, ...args);\n\t\t}\n\t}\n\n\t/**\n\t * Log message\n\t *\n\t * @param message any\n\t * @param args any\n\t */\n\tpublic log(message: any, ...args: any[]): void {\n\t\tthis.logMessage(\n\t\t\t{\n\t\t\t\tmessage,\n\t\t\t\tseverity: undefined,\n\t\t\t\tprefix: 'JavaScript',\n\t\t\t\traw: false,\n\t\t\t},\n\t\t\t...args\n\t\t);\n\t}\n\n\t/**\n\t * Log debug message\n\t *\n\t * @param message any\n\t * @param args any\n\t */\n\tpublic debug(message: any, ...args: any[]): void {\n\t\tthis.logMessage(\n\t\t\t{\n\t\t\t\tmessage,\n\t\t\t\tseverity: 'Debug',\n\t\t\t\tprefix: 'JavaScript',\n\t\t\t\traw: false,\n\t\t\t},\n\t\t\t...args\n\t\t);\n\t}\n\n\t/**\n\t * Log info message\n\t *\n\t * @param message any\n\t * @param args any\n\t */\n\tpublic info(message: any, ...args: any[]): void {\n\t\tthis.logMessage(\n\t\t\t{\n\t\t\t\tmessage,\n\t\t\t\tseverity: 'Info',\n\t\t\t\tprefix: 'JavaScript',\n\t\t\t\traw: false,\n\t\t\t},\n\t\t\t...args\n\t\t);\n\t}\n\n\t/**\n\t * Log warning message\n\t *\n\t * @param message any\n\t * @param args any\n\t */\n\tpublic warn(message: any, ...args: any[]): void {\n\t\tthis.logMessage(\n\t\t\t{\n\t\t\t\tmessage,\n\t\t\t\tseverity: 'Warn',\n\t\t\t\tprefix: 'JavaScript',\n\t\t\t\traw: false,\n\t\t\t},\n\t\t\t...args\n\t\t);\n\t}\n\n\t/**\n\t * Log error message\n\t *\n\t * @param message any\n\t * @param args any\n\t */\n\tpublic error(message: any, ...args: any[]): void {\n\t\tthis.logMessage(\n\t\t\t{\n\t\t\t\tmessage,\n\t\t\t\tseverity: 'Error',\n\t\t\t\tprefix: 'JavaScript',\n\t\t\t\traw: false,\n\t\t\t},\n\t\t\t...args\n\t\t);\n\t}\n}\n\nconst getDefaultHandlers = () => {\n\ttry {\n\t\tif (process.env['NODE_ENV'] === 'test') {\n\t\t\treturn [logToMemory, logEvent];\n\t\t}\n\t} catch (e) {\n\t\t// Process.env is not available in the browser\n\t}\n\treturn [logToMemory, logToConsole, logEvent];\n};\n\n/**\n * The logger instance.\n */\nexport const logger: Logger = new Logger(getDefaultHandlers());\n\nexport const prepareLogMessage = (message: string) => {\n\treturn message.replace(/\\t/g, '');\n};\n\nexport const formatLogEntry = (\n\tmessage: string,\n\tseverity: LogSeverity,\n\tprefix: string\n): string => {\n\tconst date = new Date();\n\tconst formattedDate = new Intl.DateTimeFormat('en-GB', {\n\t\tyear: 'numeric',\n\t\tmonth: 'short',\n\t\tday: '2-digit',\n\t\ttimeZone: 'UTC',\n\t})\n\t\t.format(date)\n\t\t.replace(/ /g, '-');\n\n\tconst formattedTime = new Intl.DateTimeFormat('en-GB', {\n\t\thour: '2-digit',\n\t\tminute: '2-digit',\n\t\tsecond: '2-digit',\n\t\thour12: false,\n\t\ttimeZone: 'UTC',\n\t\ttimeZoneName: 'short',\n\t}).format(date);\n\tconst now = formattedDate + ' ' + formattedTime;\n\tmessage = prepareLogMessage(message);\n\treturn `[${now}] ${prefix} ${severity}: ${message}`;\n};\n\n/**\n * Add a listener for the Playground crashes.\n * These crashes include Playground errors like Asyncify errors.\n * The callback function will receive an Event object with logs in the detail\n * property.\n *\n * @param loggerInstance The logger instance\n * @param callback The callback function\n */\nexport const addCrashListener = (\n\tloggerInstance: Logger,\n\tcallback: EventListenerOrEventListenerObject\n) => {\n\tloggerInstance.addEventListener(loggerInstance.fatalErrorEvent, callback);\n};\n","/// <reference lib=\"WebWorker\" />\n\n/**\n * **Call this inside a service worker.**\n * These errors include Playground errors like Asyncify errors. PHP errors\n * won't trigger this event.\n *\n * Reports service worker metrics.\n * Allows the logger to request metrics from the service worker by sending a\n * message. The service worker will respond with the number of open Playground\n * tabs.\n *\n * @param worker The service worker\n */\nexport const reportServiceWorkerMetrics = (\n\tworker: ServiceWorkerGlobalScope\n) => {\n\tworker.addEventListener('activate', () => {\n\t\tworker.clients.matchAll().then((clients) => {\n\t\t\tconst metrics = {\n\t\t\t\tnumberOfOpenPlaygroundTabs: clients.filter(\n\t\t\t\t\t// Only count top-level frames to get the number of tabs.\n\t\t\t\t\t(c) => c.frameType === 'top-level'\n\t\t\t\t).length,\n\t\t\t};\n\t\t\tfor (const client of clients) {\n\t\t\t\tclient.postMessage(metrics);\n\t\t\t}\n\t\t});\n\t});\n};\n","/**\n * The functions in this module are mostly copied from the generated\n * Emscripten PHP module. This enables features like filesystem journaling,\n * which use some low-level Emscripten APIs and need access to the\n * same path helpers.\n */\n\n/**\n * Joins paths together.\n *\n * For example:\n *\n * > joinPaths('wordpress', 'wp-content')\n * 'wordpress/wp-content'\n *\n * Use this for all PHP paths and **do not** use path.join().\n * This is important because Emscripten paths are **always**\n * POSIX-style paths. Imagine joining paths on Windows:\n *\n * > path.join('wordpress', 'wp-content')\n * '\\\\wordpress\\\\wp-content'  // invalid in PHP.wasm\n *\n * See the path.join issue for more details:\n *\n * https://github.com/WordPress/playground-tools/issues/11#issuecomment-1579074763\n *\n * @param paths Paths segments to join\n * @returns A joined path\n */\nexport function joinPaths(...paths: string[]) {\n\tfunction hasTrailingSlash(p: string) {\n\t\treturn p.substring(p.length - 1) === '/';\n\t}\n\n\tlet path = paths.join('/');\n\tconst isAbsolute = path[0] === '/';\n\tconst trailingSlash = hasTrailingSlash(path);\n\tpath = normalizePath(path);\n\tif (!path && !isAbsolute) {\n\t\tpath = '.';\n\t}\n\tif (path && trailingSlash && !hasTrailingSlash(path)) {\n\t\tpath += '/';\n\t}\n\treturn path;\n}\n\n/**\n * Returns the directory name of a path.\n *\n * @param path\n * @returns\n */\nexport function dirname(path: string) {\n\tif (path === '/') {\n\t\treturn '/';\n\t}\n\n\tpath = normalizePath(path);\n\n\tconst lastSlash = path.lastIndexOf('/');\n\tif (lastSlash === -1) {\n\t\treturn '';\n\t} else if (lastSlash === 0) {\n\t\treturn '/';\n\t}\n\treturn path.substr(0, lastSlash);\n}\n\n/**\n * Returns the last portion of a path.\n *\n * @param path - The path to extract the basename from.\n * @returns The basename of the path.\n */\nexport function basename(path: string) {\n\tif (path === '/') {\n\t\treturn '/';\n\t}\n\n\tpath = normalizePath(path);\n\n\tconst lastSlash = path.lastIndexOf('/');\n\tif (lastSlash === -1) {\n\t\treturn path;\n\t}\n\treturn path.substr(lastSlash + 1);\n}\n\n/**\n * Normalizes a path.\n *\n * For example:\n *\n * > normalizePath('wordpress/wp-content/../')\n * 'wordpress'\n *\n * @param path\n * @returns\n */\nexport function normalizePath(path: string) {\n\tconst isAbsolute = path[0] === '/';\n\tpath = normalizePathsArray(\n\t\tpath.split('/').filter((p: any) => !!p),\n\t\t!isAbsolute\n\t).join('/');\n\treturn (isAbsolute ? '/' : '') + path.replace(/\\/$/, '');\n}\n\n/**\n * Normalizes paths.\n *\n * For example:\n *\n * > normalizePathsArray(['wordpress', 'wp-content', '..', '', '.',\n * 'wp-includes']) ['wordpress', 'wp-includes']\n *\n * @param parts parts of the path to normalize\n * @param allowAboveRoot allow paths above the root\n * @returns normalized paths\n */\nexport function normalizePathsArray(parts: string[], allowAboveRoot: boolean) {\n\tlet up = 0;\n\tfor (let i = parts.length - 1; i >= 0; i--) {\n\t\tconst last = parts[i];\n\t\tif (last === '.') {\n\t\t\tparts.splice(i, 1);\n\t\t} else if (last === '..') {\n\t\t\tparts.splice(i, 1);\n\t\t\tup++;\n\t\t} else if (up) {\n\t\t\tparts.splice(i, 1);\n\t\t\tup--;\n\t\t}\n\t}\n\tif (allowAboveRoot) {\n\t\tfor (; up; up--) {\n\t\t\tparts.unshift('..');\n\t\t}\n\t}\n\treturn parts;\n}\n\n/**\n * Checks if the given parent path is an ancestor of the given child path.\n *\n * @param parent The parent path to check.\n * @param child The child path to verify against the parent.\n * @returns Whether the `parent` path is an ancestor of the `child` path.\n */\nexport function isParentOf(parent: string, child: string) {\n\tif (parent === '/') {\n\t\treturn true;\n\t}\n\tparent = normalizePath(parent);\n\tchild = normalizePath(child);\n\treturn child.startsWith(parent + '/') || child === parent;\n}\n","import { Emscripten } from './emscripten-types';\nimport {\n\tgetEmscriptenFsError,\n\trethrowFileSystemError,\n} from './rethrow-file-system-error';\nimport { logger } from '@php-wasm/logger';\nimport { dirname, joinPaths } from '@php-wasm/util';\n\nexport interface RmDirOptions {\n\t/**\n\t * If true, recursively removes the directory and all its contents.\n\t * Default: true.\n\t */\n\trecursive?: boolean;\n}\n\nexport interface ListFilesOptions {\n\t/**\n\t * If true, prepend given folder path to all file names.\n\t * Default: false.\n\t */\n\tprependPath: boolean;\n}\n\nexport class FSHelpers {\n\t/**\n\t * Reads a file from the PHP filesystem and returns it as a string.\n\t *\n\t * @throws {@link @php-wasm/universal:ErrnoError} – If the file doesn't exist.\n\t * @param FS\n\t * @param  path - The file path to read.\n\t * @returns The file contents.\n\t */\n\t@rethrowFileSystemError('Could not read \"{path}\"')\n\tstatic readFileAsText(FS: Emscripten.RootFS, path: string) {\n\t\treturn new TextDecoder().decode(FSHelpers.readFileAsBuffer(FS, path));\n\t}\n\n\t/**\n\t * Reads a file from the PHP filesystem and returns it as an array buffer.\n\t *\n\t * @throws {@link @php-wasm/universal:ErrnoError} – If the file doesn't exist.\n\t * @param FS\n\t * @param  path - The file path to read.\n\t * @returns The file contents.\n\t */\n\t@rethrowFileSystemError('Could not read \"{path}\"')\n\tstatic readFileAsBuffer(FS: Emscripten.RootFS, path: string): Uint8Array {\n\t\treturn FS.readFile(path);\n\t}\n\n\t/**\n\t * Overwrites data in a file in the PHP filesystem.\n\t * Creates a new file if one doesn't exist yet.\n\t *\n\t * @param FS\n\t * @param  path - The file path to write to.\n\t * @param  data - The data to write to the file.\n\t */\n\t@rethrowFileSystemError('Could not write to \"{path}\"')\n\tstatic writeFile(\n\t\tFS: Emscripten.RootFS,\n\t\tpath: string,\n\t\tdata: string | Uint8Array\n\t) {\n\t\tFS.writeFile(path, data);\n\t}\n\n\t/**\n\t * Removes a file from the PHP filesystem.\n\t *\n\t * @throws {@link @php-wasm/universal:ErrnoError} – If the file doesn't exist.\n\t * @param FS\n\t * @param  path - The file path to remove.\n\t */\n\t@rethrowFileSystemError('Could not unlink \"{path}\"')\n\tstatic unlink(FS: Emscripten.RootFS, path: string) {\n\t\tFS.unlink(path);\n\t}\n\n\t/**\n\t * Moves a file or directory in the PHP filesystem to a\n\t * new location.\n\t *\n\t * @param FS\n\t * @param fromPath The path to rename.\n\t * @param toPath The new path.\n\t */\n\tstatic mv(FS: Emscripten.RootFS, fromPath: string, toPath: string) {\n\t\ttry {\n\t\t\t// FS.rename moves the inode within the same filesystem.\n\t\t\t// If fromPath and toPath are on different filesystems,\n\t\t\t// the operation will fail. In that case, we need to do\n\t\t\t// a recursive copy of all the files and remove the original.\n\t\t\t// Note this is also what happens in the linux `mv` command.\n\t\t\tconst fromMount = FS.lookupPath(fromPath).node.mount;\n\t\t\tconst toMount = FSHelpers.fileExists(FS, toPath)\n\t\t\t\t? FS.lookupPath(toPath).node.mount\n\t\t\t\t: FS.lookupPath(dirname(toPath)).node.mount;\n\t\t\tconst movingBetweenFilesystems =\n\t\t\t\tfromMount.mountpoint !== toMount.mountpoint;\n\n\t\t\tif (movingBetweenFilesystems) {\n\t\t\t\tFSHelpers.copyRecursive(FS, fromPath, toPath);\n\t\t\t\tif (FSHelpers.isDir(FS, fromPath)) {\n\t\t\t\t\tFSHelpers.rmdir(FS, fromPath, { recursive: true });\n\t\t\t\t} else {\n\t\t\t\t\tFS.unlink(fromPath);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tFS.rename(fromPath, toPath);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconst errmsg = getEmscriptenFsError(e);\n\t\t\tif (!errmsg) {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t\tthrow new Error(\n\t\t\t\t`Could not move ${fromPath} to ${toPath}: ${errmsg}`,\n\t\t\t\t{\n\t\t\t\t\tcause: e,\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Removes a directory from the PHP filesystem.\n\t *\n\t * @param FS\n\t * @param path The directory path to remove.\n\t * @param options Options for the removal.\n\t */\n\t@rethrowFileSystemError('Could not remove directory \"{path}\"')\n\tstatic rmdir(\n\t\tFS: Emscripten.RootFS,\n\t\tpath: string,\n\t\toptions: RmDirOptions = { recursive: true }\n\t) {\n\t\tif (options?.recursive) {\n\t\t\tFSHelpers.listFiles(FS, path).forEach((file) => {\n\t\t\t\tconst filePath = `${path}/${file}`;\n\t\t\t\tif (FSHelpers.isDir(FS, filePath)) {\n\t\t\t\t\tFSHelpers.rmdir(FS, filePath, options);\n\t\t\t\t} else {\n\t\t\t\t\tFSHelpers.unlink(FS, filePath);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tFS.rmdir(path);\n\t}\n\n\t/**\n\t * Lists the files and directories in the given directory.\n\t *\n\t * @param FS\n\t * @param  path - The directory path to list.\n\t * @param  options - Options for the listing.\n\t * @returns The list of files and directories in the given directory.\n\t */\n\t@rethrowFileSystemError('Could not list files in \"{path}\"')\n\tstatic listFiles(\n\t\tFS: Emscripten.RootFS,\n\t\tpath: string,\n\t\toptions: ListFilesOptions = { prependPath: false }\n\t): string[] {\n\t\tif (!FSHelpers.fileExists(FS, path)) {\n\t\t\treturn [];\n\t\t}\n\t\ttry {\n\t\t\tconst files = FS.readdir(path).filter(\n\t\t\t\t(name: string) => name !== '.' && name !== '..'\n\t\t\t);\n\t\t\tif (options.prependPath) {\n\t\t\t\tconst prepend = path.replace(/\\/$/, '');\n\t\t\t\treturn files.map((name: string) => `${prepend}/${name}`);\n\t\t\t}\n\t\t\treturn files;\n\t\t} catch (e) {\n\t\t\tlogger.error(e, { path });\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t/**\n\t * Checks if a directory exists in the PHP filesystem.\n\t *\n\t * @param FS\n\t * @param  path – The path to check.\n\t * @returns True if the path is a directory, false otherwise.\n\t */\n\t@rethrowFileSystemError('Could not stat \"{path}\"')\n\tstatic isDir(FS: Emscripten.RootFS, path: string): boolean {\n\t\tif (!FSHelpers.fileExists(FS, path)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn FS.isDir(FS.lookupPath(path, { follow: true }).node.mode);\n\t}\n\n\t/**\n\t * Checks if a file exists in the PHP filesystem.\n\t *\n\t * @param FS\n\t * @param  path – The path to check.\n\t * @returns True if the path is a file, false otherwise.\n\t */\n\t@rethrowFileSystemError('Could not stat \"{path}\"')\n\tstatic isFile(FS: Emscripten.RootFS, path: string): boolean {\n\t\tif (!FSHelpers.fileExists(FS, path)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn FS.isFile(FS.lookupPath(path, { follow: true }).node.mode);\n\t}\n\n\t/**\n\t * Creates a symlink in the PHP filesystem.\n\t *\n\t * @param FS\n\t * @param target\n\t * @param link\n\t */\n\tstatic symlink(FS: Emscripten.RootFS, target: string, link: string): any {\n\t\treturn FS.symlink(target, link);\n\t}\n\n\t/**\n\t * Checks if a path is a symlink in the PHP filesystem.\n\t *\n\t * @param FS\n\t * @param path\n\t * @returns True if the path is a symlink, false otherwise.\n\t */\n\tstatic isSymlink(FS: Emscripten.RootFS, path: string): boolean {\n\t\tif (!FSHelpers.fileExists(FS, path)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn FS.isLink(FS.lookupPath(path).node.mode);\n\t}\n\n\t/**\n\t * Reads the target of a symlink in the PHP filesystem.\n\t * @param FS\n\t * @param path\n\t * @returns The target of the symlink.\n\t * @throws {@link @php-wasm/universal:ErrnoError} – If the path is not a symlink.\n\t */\n\tstatic readlink(FS: Emscripten.RootFS, path: string): string {\n\t\treturn FS.readlink(path);\n\t}\n\n\t/**\n\t * Gets the real path of a file in the PHP filesystem.\n\t * @param FS\n\t * @param path\n\t *\n\t * @returns The real path of the file.\n\t */\n\t@rethrowFileSystemError('Could not stat \"{path}\"')\n\tstatic realpath(FS: Emscripten.RootFS, path: string): string {\n\t\treturn FS.lookupPath(path, { follow: true }).path;\n\t}\n\n\t/**\n\t * Checks if a file (or a directory) exists in the PHP filesystem.\n\t *\n\t * @param FS\n\t * @param  path - The file path to check.\n\t * @returns True if the file exists, false otherwise.\n\t */\n\t@rethrowFileSystemError('Could not stat \"{path}\"')\n\tstatic fileExists(FS: Emscripten.RootFS, path: string): boolean {\n\t\ttry {\n\t\t\tFS.lookupPath(path);\n\t\t\treturn true;\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Recursively creates a directory with the given path in the PHP filesystem.\n\t * For example, if the path is `/root/php/data`, and `/root` already exists,\n\t * it will create the directories `/root/php` and `/root/php/data`.\n\t *\n\t * @param FS\n\t * @param  path - The directory path to create.\n\t */\n\t@rethrowFileSystemError('Could not create directory \"{path}\"')\n\tstatic mkdir(FS: Emscripten.RootFS, path: string) {\n\t\tFS.mkdirTree(path);\n\t}\n\n\t@rethrowFileSystemError('Could not copy files from \"{path}\"')\n\tstatic copyRecursive(\n\t\tFS: Emscripten.FileSystemInstance,\n\t\tfromPath: string,\n\t\ttoPath: string\n\t) {\n\t\tconst fromNode = FS.lookupPath(fromPath).node;\n\t\tif (FS.isDir(fromNode.mode)) {\n\t\t\tFS.mkdirTree(toPath);\n\t\t\tconst filenames = FS.readdir(fromPath).filter(\n\t\t\t\t(name: string) => name !== '.' && name !== '..'\n\t\t\t);\n\t\t\tfor (const filename of filenames) {\n\t\t\t\tFSHelpers.copyRecursive(\n\t\t\t\t\tFS,\n\t\t\t\t\tjoinPaths(fromPath, filename),\n\t\t\t\t\tjoinPaths(toPath, filename)\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tFS.writeFile(toPath, FS.readFile(fromPath));\n\t\t}\n\t}\n}\n","import { logger } from '@php-wasm/logger';\nimport { IncomingMessage, Server, ServerResponse } from 'http';\n\nconst RuntimeId = Symbol('RuntimeId');\nconst loadedRuntimes: Map<number, PHPRuntime> = new Map();\nlet lastRuntimeId = 0;\n\n/**\n * Loads the PHP runtime with the given arguments and data dependencies.\n *\n * This function handles the entire PHP initialization pipeline. In particular,\n * it:\n *\n * * Instantiates the Emscripten PHP module\n * * Wires it together with the data dependencies and loads them\n * * Ensures is all happens in a correct order\n * * Waits until the entire loading sequence is finished\n *\n * Basic usage:\n *\n * ```js\n *  const phpLoaderModule = await getPHPLoaderModule(\"7.4\");\n *  const php = await loadPHPRuntime( phpLoaderModule );\n *  console.log(php.run(`<?php echo \"Hello, world!\"; `));\n *  // { stdout: ArrayBuffer containing the string \"Hello, world!\", stderr: [''], exitCode: 0 }\n * ```\n *\n * **The PHP loader module:**\n *\n * In the basic usage example, `phpLoaderModule` is **not** a vanilla\n * Emscripten module. Instead, it's an ESM module that wraps the regular\n * Emscripten output and adds some extra functionality. It's generated by the\n * Dockerfile shipped with this repo. Here's the API it provides:\n *\n * ```js\n * // php.wasm size in bytes:\n * export const dependenciesTotalSize = 5644199;\n *\n * // php.wasm filename:\n * export const dependencyFilename = 'php.wasm';\n *\n * // Run Emscripten's generated module:\n * export default function(jsEnv, emscriptenModuleArgs) {}\n * ```\n *\n * **PHP Filesystem:**\n *\n * Once initialized, the PHP has its own filesystem separate from the project\n * files. It's provided by [Emscripten and uses its FS library](https://emscripten.org/docs/api_reference/Filesystem-API.html).\n *\n * The API exposed to you via the PHP class is succinct and abstracts\n * certain unintuitive parts of low-level filesystem interactions.\n *\n * Here's how to use it:\n *\n * ```js\n * // Recursively create a /var/www directory\n * php.mkdirTree('/var/www');\n *\n * console.log(php.fileExists('/var/www/file.txt'));\n * // false\n *\n * php.writeFile('/var/www/file.txt', 'Hello from the filesystem!');\n *\n * console.log(php.fileExists('/var/www/file.txt'));\n * // true\n *\n * console.log(php.readFile('/var/www/file.txt'));\n * // \"Hello from the filesystem!\n *\n * // Delete the file:\n * php.unlink('/var/www/file.txt');\n * ```\n *\n * For more details consult the PHP class directly.\n *\n * **Data dependencies:**\n *\n * Using existing PHP packages by manually recreating them file-by-file would\n * be quite inconvenient. Fortunately, Emscripten provides a \"data dependencies\"\n * feature.\n *\n * Data dependencies consist of a `dependency.data` file and a `dependency.js`\n * loader and can be packaged with the [file_packager.py tool](\n * https://emscripten.org/docs/porting/files/packaging_files.html#packaging-using-the-file-packager-tool).\n * This project requires wrapping the Emscripten-generated `dependency.js` file\n * in an ES module as follows:\n *\n * 1. Prepend `export default function(emscriptenPHPModule) {'; `\n * 2. Prepend `export const dependencyFilename = '<DATA FILE NAME>'; `\n * 3. Prepend `export const dependenciesTotalSize = <DATA FILE SIZE>;`\n * 4. Append `}`\n *\n * Be sure to use the `--export-name=\"emscriptenPHPModule\"` file_packager.py\n * option.\n *\n * You want the final output to look as follows:\n *\n * ```js\n * export const dependenciesTotalSize = 5644199;\n * export const dependencyFilename = 'dependency.data';\n * export default function(emscriptenPHPModule) {\n *    // Emscripten-generated code:\n *    var Module = typeof emscriptenPHPModule !== 'undefined' ? emscriptenPHPModule : {};\n *    // ... the rest of it ...\n * }\n * ```\n *\n * Such a constructions enables loading the `dependency.js` as an ES Module\n * using `import(\"/dependency.js\")`.\n *\n * Once it's ready, you can load PHP and your data dependencies as follows:\n *\n * ```js\n *  const [phpLoaderModule, wordPressLoaderModule] = await Promise.all([\n *    getPHPLoaderModule(\"7.4\"),\n *    import(\"/wp.js\")\n *  ]);\n *  const php = await loadPHPRuntime(phpLoaderModule, {}, [wordPressLoaderModule]);\n * ```\n *\n * @public\n * @param  phpLoaderModule         - The ESM-wrapped Emscripten module. Consult the Dockerfile for the build process.\n * @param  phpModuleArgs           - The Emscripten module arguments, see https://emscripten.org/docs/api_reference/module.html#affecting-execution.\n * @returns Loaded runtime id.\n */\n\nexport async function loadPHPRuntime(\n\tphpLoaderModule: PHPLoaderModule,\n\tphpModuleArgs: EmscriptenOptions = {}\n): Promise<number> {\n\tconst [phpReady, resolvePHP, rejectPHP] = makePromise();\n\n\tconst PHPRuntime = phpLoaderModule.init(currentJsRuntime, {\n\t\tonAbort(reason) {\n\t\t\trejectPHP(reason);\n\t\t\t// This can happen after PHP has been initialized so\n\t\t\t// let's just log it.\n\t\t\tlogger.error(reason);\n\t\t},\n\t\tENV: {},\n\t\t// Emscripten sometimes prepends a '/' to the path, which\n\t\t// breaks vite dev mode. An identity `locateFile` function\n\t\t// fixes it.\n\t\tlocateFile: (path) => path,\n\t\t...phpModuleArgs,\n\t\tnoInitialRun: true,\n\t\tonRuntimeInitialized() {\n\t\t\tif (phpModuleArgs.onRuntimeInitialized) {\n\t\t\t\tphpModuleArgs.onRuntimeInitialized();\n\t\t\t}\n\t\t\tresolvePHP();\n\t\t},\n\t});\n\n\tawait phpReady;\n\n\tconst id = ++lastRuntimeId;\n\n\tPHPRuntime.FS;\n\tPHPRuntime.id = id;\n\tPHPRuntime.originalExit = PHPRuntime._exit;\n\n\tPHPRuntime._exit = function (code: number) {\n\t\tif (PHPRuntime.outboundNetworkProxyServer) {\n\t\t\tPHPRuntime.outboundNetworkProxyServer.close();\n\t\t\tPHPRuntime.outboundNetworkProxyServer.closeAllConnections();\n\t\t}\n\t\tloadedRuntimes.delete(id);\n\t\treturn PHPRuntime.originalExit(code);\n\t};\n\n\tPHPRuntime[RuntimeId] = id;\n\tloadedRuntimes.set(id, PHPRuntime);\n\treturn id;\n}\n\nexport type RuntimeType = 'NODE' | 'WEB' | 'WORKER';\n\ndeclare const self: WindowOrWorkerGlobalScope;\ndeclare const WorkerGlobalScope: object | undefined;\n\nexport type PHPRuntimeId = number;\n\nexport function getLoadedRuntime(id: PHPRuntimeId): PHPRuntime {\n\treturn loadedRuntimes.get(id);\n}\n\nexport const currentJsRuntime = (function () {\n\tif (typeof process !== 'undefined' && process.release?.name === 'node') {\n\t\treturn 'NODE';\n\t} else if (typeof window !== 'undefined') {\n\t\treturn 'WEB';\n\t} else if (\n\t\ttypeof WorkerGlobalScope !== 'undefined' &&\n\t\tself instanceof (WorkerGlobalScope as any)\n\t) {\n\t\treturn 'WORKER';\n\t} else {\n\t\treturn 'NODE';\n\t}\n})();\n\n/**\n * Creates and exposes Promise resolve/reject methods for later use.\n */\nconst makePromise = () => {\n\tconst methods: any = [];\n\n\tconst promise = new Promise((resolve, reject) => {\n\t\tmethods.push(resolve, reject);\n\t});\n\tmethods.unshift(promise);\n\n\treturn methods as [Promise<any>, (v?: any) => void, (e?: any) => void];\n};\n\nexport type PHPRuntime = any;\n\nexport type PHPLoaderModule = {\n\tdependencyFilename: string;\n\tdependenciesTotalSize: number;\n\tinit: (jsRuntime: string, options: EmscriptenOptions) => PHPRuntime;\n};\n\nexport type DataModule = {\n\tdependencyFilename: string;\n\tdependenciesTotalSize: number;\n\tdefault: (phpRuntime: PHPRuntime) => void;\n};\n\nexport type EmscriptenOptions = {\n\tonAbort?: (message: string) => void;\n\t/**\n\t * Set to true for debugging tricky WebAssembly errors.\n\t */\n\tdebug?: boolean;\n\tENV?: Record<string, string>;\n\tlocateFile?: (path: string) => string;\n\tnoInitialRun?: boolean;\n\tprint?: (message: string) => void;\n\tprintErr?: (message: string) => void;\n\tquit?: (status: number, toThrow: any) => void;\n\tonRuntimeInitialized?: () => void;\n\tmonitorRunDependencies?: (left: number) => void;\n\tonMessage?: (listener: EmscriptenMessageListener) => void;\n\toutboundNetworkProxyServer?: Server<\n\t\ttypeof IncomingMessage,\n\t\ttypeof ServerResponse\n\t>;\n\tinstantiateWasm?: (\n\t\tinfo: WebAssembly.Imports,\n\t\treceiveInstance: (\n\t\t\tinstance: WebAssembly.Instance,\n\t\t\tmodule: WebAssembly.Module\n\t\t) => void\n\t) => void;\n} & Record<string, any>;\n\nexport type EmscriptenMessageListener = (type: string, data: string) => void;\n","/**\n * Polyfill for ReadableStream[Symbol.asyncIterator]\n * This enables the use of for-await-of loops with ReadableStreams\n *\n * @example\n * ```ts\n * for await (const entry of stream) {\n * \t   // ...\n * }\n * ```\n */\n// @ts-ignore\nif (!ReadableStream.prototype[Symbol.asyncIterator]) {\n\t// @ts-ignore\n\tReadableStream.prototype[Symbol.asyncIterator] = async function* () {\n\t\tconst reader = this.getReader();\n\t\ttry {\n\t\t\twhile (true) {\n\t\t\t\tconst { done, value } = await reader.read();\n\t\t\t\tif (done) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tyield value;\n\t\t\t}\n\t\t} finally {\n\t\t\treader.releaseLock();\n\t\t}\n\t};\n\t// @ts-ignore\n\tReadableStream.prototype.iterate =\n\t\t// @ts-ignore\n\t\tReadableStream.prototype[Symbol.asyncIterator];\n}\n\nexport type IterableReadableStream<R> = ReadableStream<R> & AsyncIterable<R>;\n","import { joinPaths } from '@php-wasm/util';\nimport {\n\tensurePathPrefix,\n\ttoRelativeUrl,\n\tremovePathPrefix,\n\tDEFAULT_BASE_URL,\n} from './urls';\nimport { PHP, PHPExecutionFailureError, normalizeHeaders } from './php';\nimport { PHPResponse } from './php-response';\nimport { PHPRequest, PHPRunOptions } from './universal-php';\nimport { encodeAsMultipart } from './encode-as-multipart';\nimport {\n\tMaxPhpInstancesError,\n\tPHPFactoryOptions,\n\tPHPProcessManager,\n\tSpawnedPHP,\n} from './php-process-manager';\nimport { HttpCookieStore } from './http-cookie-store';\nimport mimeTypes from './mime-types.json';\n\nexport type RewriteRule = {\n\tmatch: RegExp;\n\treplacement: string;\n};\n\nexport type FileNotFoundToResponse = {\n\ttype: 'response';\n\tresponse: PHPResponse;\n};\nexport type FileNotFoundToInternalRedirect = {\n\ttype: 'internal-redirect';\n\turi: string;\n};\nexport type FileNotFoundTo404 = { type: '404' };\n\nexport type FileNotFoundAction =\n\t| FileNotFoundToResponse\n\t| FileNotFoundToInternalRedirect\n\t| FileNotFoundTo404;\n\nexport type FileNotFoundGetActionCallback = (\n\trelativePath: string\n) => FileNotFoundAction;\n\ninterface BaseConfiguration {\n\t/**\n\t * The directory in the PHP filesystem where the server will look\n\t * for the files to serve. Default: `/var/www`.\n\t */\n\tdocumentRoot?: string;\n\t/**\n\t * Request Handler URL. Used to populate $_SERVER details like HTTP_HOST.\n\t */\n\tabsoluteUrl?: string;\n\n\t/**\n\t * Rewrite rules\n\t */\n\trewriteRules?: RewriteRule[];\n\n\t/**\n\t * A callback that decides how to handle a file-not-found condition for a\n\t * given request URI.\n\t */\n\tgetFileNotFoundAction?: FileNotFoundGetActionCallback;\n}\n\nexport type PHPRequestHandlerFactoryArgs = PHPFactoryOptions & {\n\trequestHandler: PHPRequestHandler;\n};\n\nexport type PHPRequestHandlerConfiguration = BaseConfiguration &\n\t(\n\t\t| {\n\t\t\t\t/**\n\t\t\t\t * PHPProcessManager is required because the request handler needs\n\t\t\t\t * to make a decision for each request.\n\t\t\t\t *\n\t\t\t\t * Static assets are served using the primary PHP's filesystem, even\n\t\t\t\t * when serving 100 static files concurrently. No new PHP interpreter\n\t\t\t\t * is ever created as there's no need for it.\n\t\t\t\t *\n\t\t\t\t * Dynamic PHP requests, however, require grabbing an available PHP\n\t\t\t\t * interpreter, and that's where the PHPProcessManager comes in.\n\t\t\t\t */\n\t\t\t\tprocessManager: PHPProcessManager;\n\t\t  }\n\t\t| {\n\t\t\t\tphpFactory: (\n\t\t\t\t\trequestHandler: PHPRequestHandlerFactoryArgs\n\t\t\t\t) => Promise<PHP>;\n\t\t\t\t/**\n\t\t\t\t * The maximum number of PHP instances that can exist at\n\t\t\t\t * the same time.\n\t\t\t\t */\n\t\t\t\tmaxPhpInstances?: number;\n\t\t  }\n\t);\n\n/**\n * Handles HTTP requests using PHP runtime as a backend.\n *\n * @public\n * @example Use PHPRequestHandler implicitly with a new PHP instance:\n * ```js\n * import { PHP } from '@php-wasm/web';\n *\n * const php = await PHP.load( '7.4', {\n *     requestHandler: {\n *         // PHP FS path to serve the files from:\n *         documentRoot: '/www',\n *\n *         // Used to populate $_SERVER['SERVER_NAME'] etc.:\n *         absoluteUrl: 'http://127.0.0.1'\n *     }\n * } );\n *\n * php.mkdirTree('/www');\n * php.writeFile('/www/index.php', '<?php echo \"Hi from PHP!\"; ');\n *\n * const response = await php.request({ path: '/index.php' });\n * console.log(response.text);\n * // \"Hi from PHP!\"\n * ```\n *\n * @example Explicitly create a PHPRequestHandler instance and run a PHP script:\n * ```js\n * import {\n *   loadPHPRuntime,\n *   PHP,\n *   PHPRequestHandler,\n *   getPHPLoaderModule,\n * } from '@php-wasm/web';\n *\n * const runtime = await loadPHPRuntime( await getPHPLoaderModule('7.4') );\n * const php = new PHP( runtime );\n *\n * php.mkdirTree('/www');\n * php.writeFile('/www/index.php', '<?php echo \"Hi from PHP!\"; ');\n *\n * const server = new PHPRequestHandler(php, {\n *     // PHP FS path to serve the files from:\n *     documentRoot: '/www',\n *\n *     // Used to populate $_SERVER['SERVER_NAME'] etc.:\n *     absoluteUrl: 'http://127.0.0.1'\n * });\n *\n * const response = server.request({ path: '/index.php' });\n * console.log(response.text);\n * // \"Hi from PHP!\"\n * ```\n */\nexport class PHPRequestHandler {\n\t#DOCROOT: string;\n\t#PROTOCOL: string;\n\t#HOSTNAME: string;\n\t#PORT: number;\n\t#HOST: string;\n\t#PATHNAME: string;\n\t#ABSOLUTE_URL: string;\n\t#cookieStore: HttpCookieStore;\n\trewriteRules: RewriteRule[];\n\tprocessManager: PHPProcessManager;\n\tgetFileNotFoundAction: FileNotFoundGetActionCallback;\n\n\t/**\n\t * The request handler needs to decide whether to serve a static asset or\n\t * run the PHP interpreter. For static assets it should just reuse the primary\n\t * PHP even if there's 50 concurrent requests to serve. However, for\n\t * dynamic PHP requests, it needs to grab an available interpreter.\n\t * Therefore, it cannot just accept PHP as an argument as serving requests\n\t * requires access to ProcessManager.\n\t *\n\t * @param  php    - The PHP instance.\n\t * @param  config - Request Handler configuration.\n\t */\n\tconstructor(config: PHPRequestHandlerConfiguration) {\n\t\tconst {\n\t\t\tdocumentRoot = '/www/',\n\t\t\tabsoluteUrl = typeof location === 'object' ? location?.href : '',\n\t\t\trewriteRules = [],\n\t\t\tgetFileNotFoundAction = () => ({ type: '404' }),\n\t\t} = config;\n\t\tif ('processManager' in config) {\n\t\t\tthis.processManager = config.processManager;\n\t\t} else {\n\t\t\tthis.processManager = new PHPProcessManager({\n\t\t\t\tphpFactory: async (info) => {\n\t\t\t\t\tconst php = await config.phpFactory!({\n\t\t\t\t\t\t...info,\n\t\t\t\t\t\trequestHandler: this,\n\t\t\t\t\t});\n\t\t\t\t\t// @TODO: Decouple PHP and request handler\n\t\t\t\t\t(php as any).requestHandler = this;\n\t\t\t\t\treturn php;\n\t\t\t\t},\n\t\t\t\tmaxPhpInstances: config.maxPhpInstances,\n\t\t\t});\n\t\t}\n\t\tthis.#cookieStore = new HttpCookieStore();\n\t\tthis.#DOCROOT = documentRoot;\n\n\t\tconst url = new URL(absoluteUrl);\n\t\tthis.#HOSTNAME = url.hostname;\n\t\tthis.#PORT = url.port\n\t\t\t? Number(url.port)\n\t\t\t: url.protocol === 'https:'\n\t\t\t? 443\n\t\t\t: 80;\n\t\tthis.#PROTOCOL = (url.protocol || '').replace(':', '');\n\t\tconst isNonStandardPort = this.#PORT !== 443 && this.#PORT !== 80;\n\t\tthis.#HOST = [\n\t\t\tthis.#HOSTNAME,\n\t\t\tisNonStandardPort ? `:${this.#PORT}` : '',\n\t\t].join('');\n\t\tthis.#PATHNAME = url.pathname.replace(/\\/+$/, '');\n\t\tthis.#ABSOLUTE_URL = [\n\t\t\t`${this.#PROTOCOL}://`,\n\t\t\tthis.#HOST,\n\t\t\tthis.#PATHNAME,\n\t\t].join('');\n\t\tthis.rewriteRules = rewriteRules;\n\t\tthis.getFileNotFoundAction = getFileNotFoundAction;\n\t}\n\n\tasync getPrimaryPhp() {\n\t\treturn await this.processManager.getPrimaryPhp();\n\t}\n\n\t/**\n\t * Converts a path to an absolute URL based at the PHPRequestHandler\n\t * root.\n\t *\n\t * @param  path The server path to convert to an absolute URL.\n\t * @returns The absolute URL.\n\t */\n\tpathToInternalUrl(path: string): string {\n\t\treturn `${this.absoluteUrl}${path}`;\n\t}\n\n\t/**\n\t * Converts an absolute URL based at the PHPRequestHandler to a relative path\n\t * without the server pathname and scope.\n\t *\n\t * @param  internalUrl An absolute URL based at the PHPRequestHandler root.\n\t * @returns The relative path.\n\t */\n\tinternalUrlToPath(internalUrl: string): string {\n\t\tconst url = new URL(internalUrl);\n\t\tif (url.pathname.startsWith(this.#PATHNAME)) {\n\t\t\turl.pathname = url.pathname.slice(this.#PATHNAME.length);\n\t\t}\n\t\treturn toRelativeUrl(url);\n\t}\n\n\t/**\n\t * The absolute URL of this PHPRequestHandler instance.\n\t */\n\tget absoluteUrl() {\n\t\treturn this.#ABSOLUTE_URL;\n\t}\n\n\t/**\n\t * The directory in the PHP filesystem where the server will look\n\t * for the files to serve. Default: `/var/www`.\n\t */\n\tget documentRoot() {\n\t\treturn this.#DOCROOT;\n\t}\n\n\t/**\n\t * Serves the request – either by serving a static file, or by\n\t * dispatching it to the PHP runtime.\n\t *\n\t * The request() method mode behaves like a web server and only works if\n\t * the PHP was initialized with a `requestHandler` option (which the online\n\t * version of WordPress Playground does by default).\n\t *\n\t * In the request mode, you pass an object containing the request information\n\t * (method, headers, body, etc.) and the path to the PHP file to run:\n\t *\n\t * ```ts\n\t * const php = PHP.load('7.4', {\n\t * \trequestHandler: {\n\t * \t\tdocumentRoot: \"/www\"\n\t * \t}\n\t * })\n\t * php.writeFile(\"/www/index.php\", `<?php echo file_get_contents(\"php://input\");`);\n\t * const result = await php.request({\n\t * \tmethod: \"GET\",\n\t * \theaders: {\n\t * \t\t\"Content-Type\": \"text/plain\"\n\t * \t},\n\t * \tbody: \"Hello world!\",\n\t * \tpath: \"/www/index.php\"\n\t * });\n\t * // result.text === \"Hello world!\"\n\t * ```\n\t *\n\t * The `request()` method cannot be used in conjunction with `cli()`.\n\t *\n\t * @example\n\t * ```js\n\t * const output = await php.request({\n\t * \tmethod: 'GET',\n\t * \turl: '/index.php',\n\t * \theaders: {\n\t * \t\t'X-foo': 'bar',\n\t * \t},\n\t * \tbody: {\n\t * \t\tfoo: 'bar',\n\t * \t},\n\t * });\n\t * console.log(output.stdout); // \"Hello world!\"\n\t * ```\n\t *\n\t * @param  request - PHP Request data.\n\t */\n\tasync request(request: PHPRequest): Promise<PHPResponse> {\n\t\tconst isAbsolute = URL.canParse(request.url);\n\t\tconst requestedUrl = new URL(\n\t\t\t// Remove the hash part of the URL as it's not meant for the server.\n\t\t\trequest.url.split('#')[0],\n\t\t\tisAbsolute ? undefined : DEFAULT_BASE_URL\n\t\t);\n\n\t\tconst normalizedRequestedPath = applyRewriteRules(\n\t\t\tremovePathPrefix(\n\t\t\t\tdecodeURIComponent(requestedUrl.pathname),\n\t\t\t\tthis.#PATHNAME\n\t\t\t),\n\t\t\tthis.rewriteRules\n\t\t);\n\n\t\tconst primaryPhp = await this.getPrimaryPhp();\n\n\t\tlet fsPath = joinPaths(this.#DOCROOT, normalizedRequestedPath);\n\n\t\tif (primaryPhp.isDir(fsPath)) {\n\t\t\t// Ensure directory URIs have a trailing slash. Otherwise,\n\t\t\t// relative URIs in index.php or index.html files are relative\n\t\t\t// to the next directory up.\n\t\t\t//\n\t\t\t// Example:\n\t\t\t// For an index page served for URI \"/settings\", we naturally expect\n\t\t\t// links to be relative to \"/settings\", but without the trailing\n\t\t\t// slash, a relative link \"edit.php\" resolves to \"/edit.php\"\n\t\t\t// rather than \"/settings/edit.php\".\n\t\t\t//\n\t\t\t// This treatment of relative links is correct behavior for the browser:\n\t\t\t// https://www.rfc-editor.org/rfc/rfc3986#section-5.2.3\n\t\t\t//\n\t\t\t// But user intent for `/settings/index.php` is that its relative\n\t\t\t// URIs are relative to `/settings/`. So we redirect to add a\n\t\t\t// trailing slash to directory URIs to meet this expecatation.\n\t\t\t//\n\t\t\t// This behavior is also necessary for WordPress to function properly.\n\t\t\t// Otherwise, when viewing the WP admin dashboard at `/wp-admin`,\n\t\t\t// links to other admin pages like `edit.php` will incorrectly\n\t\t\t// resolve to `/edit.php` rather than `/wp-admin/edit.php`.\n\t\t\tif (!fsPath.endsWith('/')) {\n\t\t\t\treturn new PHPResponse(\n\t\t\t\t\t301,\n\t\t\t\t\t{ Location: [`${requestedUrl.pathname}/`] },\n\t\t\t\t\tnew Uint8Array(0)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// We can only satisfy requests for directories with a default file\n\t\t\t// so let's first resolve to a default path when available.\n\t\t\tfor (const possibleIndexFile of ['index.php', 'index.html']) {\n\t\t\t\tconst possibleIndexPath = joinPaths(fsPath, possibleIndexFile);\n\t\t\t\tif (primaryPhp.isFile(possibleIndexPath)) {\n\t\t\t\t\tfsPath = possibleIndexPath;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!primaryPhp.isFile(fsPath)) {\n\t\t\tconst fileNotFoundAction = this.getFileNotFoundAction(\n\t\t\t\tnormalizedRequestedPath\n\t\t\t);\n\t\t\tswitch (fileNotFoundAction.type) {\n\t\t\t\tcase 'response':\n\t\t\t\t\treturn fileNotFoundAction.response;\n\t\t\t\tcase 'internal-redirect':\n\t\t\t\t\tfsPath = joinPaths(this.#DOCROOT, fileNotFoundAction.uri);\n\t\t\t\t\tbreak;\n\t\t\t\tcase '404':\n\t\t\t\t\treturn PHPResponse.forHttpCode(404);\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Unsupported file-not-found action type: ' +\n\t\t\t\t\t\t\t// Cast because TS asserts the remaining possibility is `never`\n\t\t\t\t\t\t\t`'${\n\t\t\t\t\t\t\t\t(fileNotFoundAction as FileNotFoundAction).type\n\t\t\t\t\t\t\t}'`\n\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// We need to confirm that the current target file exists because\n\t\t// file-not-found fallback actions may redirect to non-existent files.\n\t\tif (primaryPhp.isFile(fsPath)) {\n\t\t\tif (fsPath.endsWith('.php')) {\n\t\t\t\tconst effectiveRequest: PHPRequest = {\n\t\t\t\t\t...request,\n\t\t\t\t\t// Pass along URL with the #fragment filtered out\n\t\t\t\t\turl: requestedUrl.toString(),\n\t\t\t\t};\n\t\t\t\treturn this.#spawnPHPAndDispatchRequest(\n\t\t\t\t\teffectiveRequest,\n\t\t\t\t\tfsPath\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn this.#serveStaticFile(primaryPhp, fsPath);\n\t\t\t}\n\t\t} else {\n\t\t\treturn PHPResponse.forHttpCode(404);\n\t\t}\n\t}\n\n\t/**\n\t * Serves a static file from the PHP filesystem.\n\t *\n\t * @param  fsPath - Absolute path of the static file to serve.\n\t * @returns The response.\n\t */\n\t#serveStaticFile(php: PHP, fsPath: string): PHPResponse {\n\t\tconst arrayBuffer = php.readFileAsBuffer(fsPath);\n\t\treturn new PHPResponse(\n\t\t\t200,\n\t\t\t{\n\t\t\t\t'content-length': [`${arrayBuffer.byteLength}`],\n\t\t\t\t// @TODO: Infer the content-type from the arrayBuffer instead of the\n\t\t\t\t// file path. The code below won't return the correct mime-type if the\n\t\t\t\t// extension was tampered with.\n\t\t\t\t'content-type': [inferMimeType(fsPath)],\n\t\t\t\t'accept-ranges': ['bytes'],\n\t\t\t\t'cache-control': ['public, max-age=0'],\n\t\t\t},\n\t\t\tarrayBuffer\n\t\t);\n\t}\n\n\t/**\n\t * Spawns a new PHP instance and dispatches a request to it.\n\t */\n\tasync #spawnPHPAndDispatchRequest(\n\t\trequest: PHPRequest,\n\t\tscriptPath: string\n\t): Promise<PHPResponse> {\n\t\tlet spawnedPHP: SpawnedPHP | undefined = undefined;\n\t\ttry {\n\t\t\tspawnedPHP = await this.processManager!.acquirePHPInstance();\n\t\t} catch (e) {\n\t\t\tif (e instanceof MaxPhpInstancesError) {\n\t\t\t\treturn PHPResponse.forHttpCode(502);\n\t\t\t} else {\n\t\t\t\treturn PHPResponse.forHttpCode(500);\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\treturn await this.#dispatchToPHP(\n\t\t\t\tspawnedPHP.php,\n\t\t\t\trequest,\n\t\t\t\tscriptPath\n\t\t\t);\n\t\t} finally {\n\t\t\tspawnedPHP.reap();\n\t\t}\n\t}\n\n\t/**\n\t * Runs the requested PHP file with all the request and $_SERVER\n\t * superglobals populated.\n\t *\n\t * @param  request - The request.\n\t * @returns The response.\n\t */\n\tasync #dispatchToPHP(\n\t\tphp: PHP,\n\t\trequest: PHPRequest,\n\t\tscriptPath: string\n\t): Promise<PHPResponse> {\n\t\tlet preferredMethod: PHPRunOptions['method'] = 'GET';\n\n\t\tconst headers: Record<string, string> = {\n\t\t\thost: this.#HOST,\n\t\t\t...normalizeHeaders(request.headers || {}),\n\t\t\tcookie: this.#cookieStore.getCookieRequestHeader(),\n\t\t};\n\n\t\tlet body = request.body;\n\t\tif (typeof body === 'object' && !(body instanceof Uint8Array)) {\n\t\t\tpreferredMethod = 'POST';\n\t\t\tconst { bytes, contentType } = await encodeAsMultipart(body);\n\t\t\tbody = bytes;\n\t\t\theaders['content-type'] = contentType;\n\t\t}\n\n\t\ttry {\n\t\t\tconst response = await php.run({\n\t\t\t\trelativeUri: ensurePathPrefix(\n\t\t\t\t\ttoRelativeUrl(new URL(request.url)),\n\t\t\t\t\tthis.#PATHNAME\n\t\t\t\t),\n\t\t\t\tprotocol: this.#PROTOCOL,\n\t\t\t\tmethod: request.method || preferredMethod,\n\t\t\t\t$_SERVER: {\n\t\t\t\t\tREMOTE_ADDR: '127.0.0.1',\n\t\t\t\t\tDOCUMENT_ROOT: this.#DOCROOT,\n\t\t\t\t\tHTTPS: this.#ABSOLUTE_URL.startsWith('https://')\n\t\t\t\t\t\t? 'on'\n\t\t\t\t\t\t: '',\n\t\t\t\t},\n\t\t\t\tbody,\n\t\t\t\tscriptPath,\n\t\t\t\theaders,\n\t\t\t});\n\t\t\tthis.#cookieStore.rememberCookiesFromResponseHeaders(\n\t\t\t\tresponse.headers\n\t\t\t);\n\t\t\treturn response;\n\t\t} catch (error) {\n\t\t\tconst executionError = error as PHPExecutionFailureError;\n\t\t\tif (executionError?.response) {\n\t\t\t\treturn executionError.response;\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n\n/**\n * Naively infer a file mime type from its path.\n *\n * @todo Infer the mime type based on the file contents.\n *       A naive function like this one can be inaccurate\n *       and potentially have negative security consequences.\n *\n * @param  path - The file path\n * @returns The inferred mime type.\n */\nfunction inferMimeType(path: string): string {\n\tconst extension = path.split('.').pop() as keyof typeof mimeTypes;\n\t// @TODO: Consider not sending a default mime type to let the browser guess\n\treturn mimeTypes[extension] || mimeTypes['_default'];\n}\n\n/**\n * Applies the given rewrite rules to the given path.\n *\n * @param  path  The path to apply the rules to.\n * @param  rules The rules to apply.\n * @returns The path with the rules applied.\n */\nexport function applyRewriteRules(path: string, rules: RewriteRule[]): string {\n\tfor (const rule of rules) {\n\t\tif (new RegExp(rule.match).test(path)) {\n\t\t\treturn path.replace(rule.match, rule.replacement);\n\t\t}\n\t}\n\treturn path;\n}\n","const DEFAULT_RESPONSE_TIMEOUT = 25000;\n\nlet lastRequestId = 0;\n\n/**\n * Posts a message branded with a unique `requestId` to the given `target`.\n * Then returns the `requestId` so it can be used to await a reply.\n * Effectively, it implements the request/response dynamics on\n * of JavaScript's `postMessage`\n *\n * @example\n *\n * In the main app:\n *\n * ```js\n * import { postMessageExpectReply, awaitReply } from 'php-wasm-browser';\n * const iframeWindow = iframe.contentWindow;\n * const requestId = postMessageExpectReply(iframeWindow, {\n *    type: \"get_php_version\"\n * });\n * const response = await awaitReply(iframeWindow, requestId);\n * console.log(response);\n * // \"8.0.24\"\n * ```\n *\n * In the iframe:\n *\n * ```js\n * import { responseTo } from 'php-wasm-browser';\n * window.addEventListener('message', (event) => {\n *    let response = '8.0.24';\n *    if(event.data.type === 'get_php_version') {\n *       response = '8.0.24';\n *    } else {\n *       throw new Error(`Unexpected message type: ${event.data.type}`);\n *    }\n *\n *    // When `requestId` is present, the other thread expects a response:\n *    if (event.data.requestId) {\n *       const response = responseTo(event.data.requestId, response);\n *       window.parent.postMessage(response, event.origin);\n *    }\n * });\n * ```\n *\n * @param  target          An object that has a `postMessage` method.\n * @param  message         A key-value object that can be serialized to JSON.\n * @param  postMessageArgs Additional arguments to pass to `postMessage`.\n * @returns The message ID for awaitReply().\n */\nexport function postMessageExpectReply(\n\ttarget: PostMessageTarget,\n\tmessage: Record<string, any>,\n\t...postMessageArgs: any[]\n): number {\n\tconst requestId = getNextRequestId();\n\ttarget.postMessage(\n\t\t{\n\t\t\t...message,\n\t\t\trequestId,\n\t\t},\n\t\t...postMessageArgs\n\t);\n\treturn requestId;\n}\n\nexport function getNextRequestId() {\n\treturn ++lastRequestId;\n}\n\n/**\n * Awaits a reply to the message with the given ID.\n *\n * @see postMessageExpectReply\n * @throws {@link Error} If the reply is not received within the timeout.\n * @param  messageTarget EventEmitter emitting `message` events, e.g. `window`\n *                       or a `Worker` instance.\n * @param  requestId     The message ID returned by postMessageExpectReply().\n * @param  timeout       The number of milliseconds to wait for a reply before\n *                       throwing an error.\n * @returns The reply from the messageTarget.\n */\nexport function awaitReply(\n\tmessageTarget: IsomorphicEventTarget,\n\trequestId: number,\n\ttimeout: number = DEFAULT_RESPONSE_TIMEOUT\n): Promise<any> {\n\treturn new Promise((resolve, reject) => {\n\t\tconst responseHandler = (event: MessageEvent) => {\n\t\t\tif (\n\t\t\t\tevent.data.type === 'response' &&\n\t\t\t\tevent.data.requestId === requestId\n\t\t\t) {\n\t\t\t\tmessageTarget.removeEventListener('message', responseHandler);\n\t\t\t\tclearTimeout(failOntimeout);\n\t\t\t\tresolve(event.data.response);\n\t\t\t}\n\t\t};\n\n\t\tconst failOntimeout = setTimeout(() => {\n\t\t\treject(new Error('Request timed out'));\n\t\t\tmessageTarget.removeEventListener('message', responseHandler);\n\t\t}, timeout);\n\n\t\tmessageTarget.addEventListener('message', responseHandler);\n\t});\n}\n\n/**\n * Creates a response message to the given message ID.\n *\n * @see postMessageExpectReply\n * @param  requestId The message ID sent from the other thread by\n *                   `postMessageExpectReply` in the `message` event.\n * @param  response  The response to send back to the messageTarget.\n * @returns A message object that can be sent back to the other thread.\n */\nexport function responseTo<T>(\n\trequestId: number,\n\tresponse: T\n): MessageResponse<T> {\n\treturn {\n\t\ttype: 'response',\n\t\trequestId,\n\t\tresponse,\n\t};\n}\n\nexport interface MessageResponse<T> {\n\ttype: 'response';\n\trequestId: number;\n\tresponse: T;\n}\n\ninterface PostMessageTarget {\n\tpostMessage(message: any, ...args: any[]): void;\n}\n\ninterface IsomorphicEventTarget {\n\taddEventListener(type: string, listener: (event: any) => void): void;\n\tremoveEventListener(type: string, listener: (event: any) => void): void;\n}\n","/// <reference lib=\"WebWorker\" />\ndeclare const self: ServiceWorkerGlobalScope;\n\nimport { awaitReply, getNextRequestId } from './messaging';\nimport { getURLScope, isURLScoped, setURLScope } from '@php-wasm/scopes';\n\nexport async function convertFetchEventToPHPRequest(event: FetchEvent) {\n\tlet url = new URL(event.request.url);\n\n\tif (!isURLScoped(url)) {\n\t\ttry {\n\t\t\tconst referrerUrl = new URL(event.request.referrer);\n\t\t\turl = setURLScope(url, getURLScope(referrerUrl)!);\n\t\t} catch (e) {\n\t\t\t// ignore\n\t\t}\n\t}\n\n\tconst contentType = event.request.headers.get('content-type')!;\n\tconst body =\n\t\tevent.request.method === 'POST'\n\t\t\t? new Uint8Array(await event.request.clone().arrayBuffer())\n\t\t\t: undefined;\n\tconst requestHeaders: Record<string, string> = {};\n\tfor (const pair of (event.request.headers as any).entries()) {\n\t\trequestHeaders[pair[0]] = pair[1];\n\t}\n\n\tlet phpResponse;\n\ttry {\n\t\tconst message = {\n\t\t\tmethod: 'request',\n\t\t\targs: [\n\t\t\t\t{\n\t\t\t\t\tbody,\n\t\t\t\t\turl: url.toString(),\n\t\t\t\t\tmethod: event.request.method,\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t...requestHeaders,\n\t\t\t\t\t\tHost: url.host,\n\t\t\t\t\t\t// Safari and Firefox don't make the User-Agent header\n\t\t\t\t\t\t// available in the fetch event. Let's add it manually:\n\t\t\t\t\t\t'User-agent': self.navigator.userAgent,\n\t\t\t\t\t\t'Content-type': contentType,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t\tconst scope = getURLScope(url);\n\t\tif (scope === null) {\n\t\t\tthrow new Error(\n\t\t\t\t`The URL ${url.toString()} is not scoped. This should not happen.`\n\t\t\t);\n\t\t}\n\t\tconst requestId = await broadcastMessageExpectReply(message, scope);\n\t\tphpResponse = await awaitReply(self, requestId);\n\n\t\t// X-frame-options gets in a way when PHP is\n\t\t// being displayed in an iframe.\n\t\tdelete phpResponse.headers['x-frame-options'];\n\t} catch (e) {\n\t\tconsole.error(e, { url: url.toString() });\n\t\tthrow e;\n\t}\n\n\t/**\n\t * Safari has a bug that prevents Service Workers from redirecting relative URLs.\n\t * When attempting to redirect to a relative URL, the network request will return an error.\n\t * See the Webkit bug for details: https://bugs.webkit.org/show_bug.cgi?id=282427.\n\t *\n\t * Because PHP and WordPress can redirect to both relative and absolute URLs\n\t * using the `location` header we need to ensure redirects are processed\n\t * correctly by the Service Worker.\n\t *\n\t * As a workaround for Safari Service Workers, we use `Response.redirect()`\n\t * for all redirect responses (300-399 status codes) coming from PHP.\n\t * This solution was suggested in the Webkit bug comment:\n\t * https://bugs.webkit.org/show_bug.cgi?id=282427#c2\n\t */\n\tif (\n\t\tphpResponse.httpStatusCode >= 300 &&\n\t\tphpResponse.httpStatusCode <= 399 &&\n\t\tphpResponse.headers['location']\n\t) {\n\t\treturn Response.redirect(\n\t\t\tphpResponse.headers['location'][0],\n\t\t\tphpResponse.httpStatusCode\n\t\t);\n\t}\n\n\treturn new Response(phpResponse.bytes, {\n\t\theaders: phpResponse.headers,\n\t\tstatus: phpResponse.httpStatusCode,\n\t});\n}\n\n/**\n * Sends the message to all the controlled clients\n * of this service worker.\n *\n * This used to be implemented with a BroadcastChannel, but\n * it didn't work in Safari. BroadcastChannel breaks iframe\n * embedding the playground in Safari.\n *\n * Weirdly, Safari does not pass any messages from the ServiceWorker\n * to Window if the page is rendered inside an iframe. Window to Service\n * Worker communication works just fine.\n *\n * The regular client.postMessage() communication works perfectly, so that's\n * what this function uses to broadcast the message.\n *\n * @param  message The message to broadcast.\n * @param  scope   Target web worker scope.\n * @returns The request ID to receive the reply.\n */\nexport async function broadcastMessageExpectReply(message: any, scope: string) {\n\tconst requestId = getNextRequestId();\n\tfor (const client of await self.clients.matchAll({\n\t\t// Sometimes the client that triggered the current fetch()\n\t\t// event is considered uncontrolled in Google Chrome. This\n\t\t// only happens on the first few fetches() after the initial\n\t\t// registration of the service worker.\n\t\tincludeUncontrolled: true,\n\t})) {\n\t\tclient.postMessage({\n\t\t\t...message,\n\t\t\t/**\n\t\t\t * Attach the scope with a URL starting with `/scope:` to this message.\n\t\t\t *\n\t\t\t * We need this mechanics because this worker broadcasts\n\t\t\t * events to all the listeners across all browser tabs. Scopes\n\t\t\t * helps WASM workers ignore requests meant for other WASM workers.\n\t\t\t */\n\t\t\tscope,\n\t\t\trequestId,\n\t\t});\n\t}\n\treturn requestId;\n}\n\n/**\n * Copy a request with custom overrides.\n *\n * This function is only needed because Request properties\n * are read-only. The only way to change e.g. a URL is to\n * create an entirely new request:\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/Request\n *\n * @param  request\n * @param  overrides\n * @returns The new request.\n */\nexport async function cloneRequest(\n\trequest: Request,\n\toverrides: Record<string, any>\n): Promise<Request> {\n\tconst body =\n\t\t['GET', 'HEAD'].includes(request.method) || 'body' in overrides\n\t\t\t? undefined\n\t\t\t: await request.blob();\n\n\treturn new Request(overrides['url'] || request.url, {\n\t\tbody,\n\t\tmethod: request.method,\n\t\theaders: request.headers,\n\t\treferrer: request.referrer,\n\t\treferrerPolicy: request.referrerPolicy,\n\t\tmode: request.mode === 'navigate' ? 'same-origin' : request.mode,\n\t\tcredentials: request.credentials,\n\t\tcache: request.cache,\n\t\tredirect: request.redirect,\n\t\tintegrity: request.integrity,\n\t\t...overrides,\n\t});\n}\n\n/**\n * Extracts headers from a Request as a plain key->value JS object.\n *\n * @param request\n * @returns\n */\nexport function getRequestHeaders(request: Request) {\n\tconst headers: Record<string, string> = {};\n\trequest.headers.forEach((value: string, key: string) => {\n\t\theaders[key] = value;\n\t});\n\treturn headers;\n}\n","import type { RewriteRule } from '@php-wasm/universal';\n\n/**\n * The default rewrite rules for WordPress.\n */\nexport const wordPressRewriteRules: RewriteRule[] = [\n\t{\n\t\tmatch: /^\\/(.*?)(\\/wp-(content|admin|includes)\\/.*)/g,\n\t\treplacement: '$2',\n\t},\n];\n","import { isURLScoped } from '@php-wasm/scopes';\n// @ts-ignore\nimport { buildVersion } from 'virtual:remote-config';\n\nconst CACHE_NAME_PREFIX = 'playground-cache';\nconst LATEST_CACHE_NAME = `${CACHE_NAME_PREFIX}-${buildVersion}`;\n\n// We save a top-level Promise because this module is imported by\n// a Service Worker module which does not allow top-level await.\nconst promisedOfflineModeCache = caches.open(LATEST_CACHE_NAME);\n\nexport async function cacheFirstFetch(request: Request): Promise<Response> {\n\tconst offlineModeCache = await promisedOfflineModeCache;\n\tconst cachedResponse = await offlineModeCache.match(request, {\n\t\tignoreSearch: true,\n\t});\n\tif (cachedResponse) {\n\t\treturn cachedResponse;\n\t}\n\n\t/**\n\t * Ensure the response is not coming from HTTP cache.\n\t *\n\t * We never want to put a stale asset in CacheStorage as\n\t * that would break Playground.\n\t *\n\t * See service-worker.ts for more details.\n\t */\n\tconst response = await fetchFresh(request);\n\tif (response.ok) {\n\t\t/**\n\t\t * Confirm the current service worker is still active\n\t\t * when the asset is fetched. Caching a stale request\n\t\t * from a stale worker has no benefits. It only takes\n\t\t * up space.\n\t\t */\n\t\tif (isCurrentServiceWorkerActive()) {\n\t\t\t// Intentionally do not await writing to the cache so the response\n\t\t\t// promise can be returned immediately and observed for progress events.\n\t\t\t// NOTE: This is a race condition for simultaneous requests for the same asset.\n\t\t\tofflineModeCache.put(request, response.clone());\n\t\t}\n\t}\n\n\treturn response;\n}\n\nexport async function networkFirstFetch(request: Request): Promise<Response> {\n\tconst offlineModeCache = await promisedOfflineModeCache;\n\tconst cachedResponse = await offlineModeCache.match(request, {\n\t\tignoreSearch: true,\n\t});\n\n\tlet response: Response | undefined = undefined;\n\ttry {\n\t\tresponse = await fetch(request, {\n\t\t\tcache: 'no-cache',\n\t\t});\n\t} catch (e) {\n\t\tif (cachedResponse) {\n\t\t\treturn cachedResponse;\n\t\t}\n\t\tthrow e;\n\t}\n\n\tif (response.ok) {\n\t\t// Intentionally do not await writing to the cache so the response\n\t\t// promise can be returned immediately and observed for progress events.\n\t\t// NOTE: This is a race condition for simultaneous requests for the same asset.\n\t\tofflineModeCache.put(request, response.clone());\n\t\treturn response;\n\t}\n\n\tif (cachedResponse) {\n\t\treturn cachedResponse;\n\t}\n\n\treturn response;\n}\n\n/**\n * For offline mode to work we need to cache all required assets.\n *\n * These assets are listed in the `/assets-required-for-offline-mode.json`\n * file and contain JavaScript, CSS, and other assets required to load the\n * site without making any network requests.\n */\nexport async function cacheOfflineModeAssetsForCurrentRelease(): Promise<any> {\n\t// Get the cache manifest and add all the files to the cache\n\tconst manifestResponse = await fetchFresh(\n\t\t'/assets-required-for-offline-mode.json'\n\t);\n\tconst requiredOfflineAssetUrls = await manifestResponse.json();\n\tconst urlsToCache = ['/', ...requiredOfflineAssetUrls];\n\tconst websiteRequests = urlsToCache.map(\n\t\t/**\n\t\t * Ensure the response is not coming from HTTP cache.\n\t\t *\n\t\t * If it did, we'd risk mixing assets from different\n\t\t * Playground builds and breaking the site.\n\t\t *\n\t\t * See service-worker.ts for more details.\n\t\t */\n\t\t(url: string) => new Request(url, { cache: 'no-cache' })\n\t);\n\tconst offlineModeCache = await promisedOfflineModeCache;\n\tawait offlineModeCache.addAll(websiteRequests);\n}\n\n/**\n * Remove outdated files from the cache.\n *\n * We cache data based on `buildVersion` which is updated whenever Playground\n * is built. So when a new version of Playground is deployed, the service\n * worker will remove the old cache and cache the new assets.\n *\n * If your build version doesn't change while developing locally check\n * `buildVersionPlugin` for more details on how it's generated.\n */\nexport async function purgeEverythingFromPreviousRelease() {\n\tconst keys = await caches.keys();\n\tconst oldKeys = keys.filter(\n\t\t(key) => key.startsWith(CACHE_NAME_PREFIX) && key !== LATEST_CACHE_NAME\n\t);\n\treturn Promise.all(oldKeys.map((key) => caches.delete(key)));\n}\n\n/**\n * Answers whether a given URL has a response in the offline mode cache.\n * Ignores the search part of the URL by default.\n */\nexport async function hasCachedResponse(\n\turl: string,\n\tqueryOptions: CacheQueryOptions = { ignoreSearch: true }\n): Promise<boolean> {\n\tconst offlineModeCache = await promisedOfflineModeCache;\n\tconst cachedResponse = await offlineModeCache.match(url, queryOptions);\n\treturn !!cachedResponse;\n}\n\nexport function shouldCacheUrl(url: URL) {\n\tif (url.href.includes('wordpress-static.zip')) {\n\t\treturn true;\n\t}\n\t/**\n\t * The development environment uses Vite which doesn't work offline because\n\t * it dynamically generates assets. Check the README for offline development\n\t * instructions.\n\t */\n\tif (\n\t\turl.href.startsWith('http://127.0.0.1:5400/') ||\n\t\turl.href.startsWith('http://localhost:5400/') ||\n\t\turl.href.startsWith('https://playground.test/') ||\n\t\turl.pathname.startsWith('/website-server/')\n\t) {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Don't cache scoped requests made to the PHP Worker Thread.\n\t * They may be static assets, but they may also be PHP files.\n\t * We can't tell by the URL, e.g. `/sitemap.xml` can be both.\n\t */\n\tif (isURLScoped(url)) {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Don't cache responses generated by PHP files – they may\n\t * change on every request.\n\t */\n\tif (url.pathname.endsWith('.php')) {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Allow only requests to the same hostname to be cached.\n\t */\n\treturn self.location.hostname === url.hostname;\n}\n\n/**\n * Fetches a resource and avoids stale responses from browser cache.\n *\n * @param resource The resource to fetch.\n * @param init     Optional object containing custom settings.\n * @returns Promise<Response>\n */\nfunction fetchFresh(resource: RequestInfo | URL, init?: RequestInit) {\n\treturn fetch(resource, {\n\t\t...init,\n\t\tcache: 'no-cache',\n\t});\n}\n\nexport function isCurrentServiceWorkerActive() {\n\t// @ts-ignore\n\t// Firefox doesn't support serviceWorker.state\n\tif (!('serviceWorker' in self) || !('state' in self.serviceWorker)) {\n\t\treturn true;\n\t}\n\t// @ts-ignore\n\treturn self.serviceWorker.state === 'activated';\n}\n","/// <reference lib=\"WebWorker\" />\n/**\n * Playground's service worker. Here's a rundown of non-obvious things that\n * are happening in here:\n *\n * ## Playground must be upgraded as early as possible after a new release\n *\n * New service workers call .skipWaiting(), immediately claim all the clients\n * that were controlled by the previous service worker and clears the offline\n * cache. The claimed clients are not forcibly refreshed. They just continue\n * running under the new service worker.\n *\n * Why?\n *\n * Because Playground fetches new resources asynchronously and on demand. However,\n * deploying a new webapp version of the app destroys the resources referenced in\n * the previous webapp version. Therefore, we can't allow the previous version\n * to run when a new version becomes available.\n *\n * ## Caching strategy\n *\n * Playground uses caching heavily to achieve great loading speeds and provide\n * an offline mode.\n *\n * Caching is a complex beast. Playground deals with the following cache layers:\n *\n * * HTTP cache in the browser\n * * CacheStorage in the service worker\n * * Edge Cache on playground.wordpress.net\n *\n * ### HTTP cache in the browser\n *\n * This service worker skips the browser HTTP cache for all network requests. This is because\n * the HTTP cache caused a particularly nasty problem in Playground deployments.\n *\n * Installing a new service worker purged the CacheStorage and requested a new set of assets\n * from the network. However, some of these requests were served from the HTTP cache. As a\n * result, Playground would start loading a mix of old and new assets and quickly error out.\n * What made it worse is that this broken state was cached in CacheStorage, breaking Playground\n * for weeks until the cache was refreshed.\n *\n * See https://github.com/WordPress/wordpress-playground/pull/1822 for more details.\n *\n * ### CacheStorage in the service worker\n *\n * Playground primarily relies on the **Cache first** strategy. This means assets are:\n *\n * 1. Loaded from the network without using any HTTP caching.\n * 2. Stored in the CacheStorage.\n * 3. Served from the CacheStorage on subsequent requests.\n *\n * While this strategy enables fast load times and an offline experience, it also\n * creates a substantial challenge.\n *\n * When a new Playground version is deployed, all the clients will load an old\n * version of the `remote.html` file on their next visit. Unfortunately, that old\n * `remote.html` file contains hardcoded references to assets that may not be\n * cached and no longer exist in the new webapp build.\n *\n * To solve this problem, we use the **Network first** strategy when `remote.html`\n * is requested. This introduces a small network overhead, but it guarantees loading\n * the most recent version of `remote.html` and all the referenced assets.\n *\n * Similarly, we use the **Network first** strategy for the `/` path. This is\n * useful in situations where the user didn't visit Playground in a while,\n * they have a stale version of the `/` route cached, and they open Playground.\n * If we loaded the cached version, they'd see the old Playground website on their\n * first visit and then the new Playground website only on their second visit.\n *\n * There's still a small window of time between loading the remote.html file and\n * fetching the new assets when a new deployment would break the application.\n * This should be very rare, but when it happens we provide an error message asking\n * the user to reload the page.\n *\n * ### Edge Cache on playground.wordpress.net\n *\n * The remote server (playground.wordpress.net) has an Edge Cache that's populated with\n * all static assets on every webapp deployment. All the assets served by playground.wordpress.net\n * at any point in time come from the same build and are consistent with each other. The\n * deployment process is atomic-ish so the server should never expose a mix of old and new\n * assets.\n *\n * However, what if a new webapp version is deployed right when someone downloaded 10 out of\n * 27 static assets required to boot Playground?\n *\n * Right now, they'd end up in an undefined state and likely see an error. Then, on a page refresh,\n * they'd pick up a new service worker that would purge the stale assets and boot the new webapp\n * version.\n *\n * This is not a big problem for now, but it's also not the best user experience. This can be\n * eventually solved with push notifications. A new deployment would notify all the active\n * clients to upgrade and pick up the new assets.\n *\n * ## Related resources\n *\n * * PR that turned off HTTP caching: https://github.com/WordPress/wordpress-playground/pull/1822\n * * Exploring all the cache layers: https://github.com/WordPress/wordpress-playground/issues/1774\n * * Cache first strategy: https://web.dev/articles/offline-cookbook#cache-falling-back-to-network\n * * Service worker caching and HTTP caching: https://web.dev/articles/service-worker-caching-and-http-caching\n */\n\ndeclare const self: ServiceWorkerGlobalScope;\n\nimport { getURLScope, isURLScoped, removeURLScope } from '@php-wasm/scopes';\nimport { applyRewriteRules } from '@php-wasm/universal';\nimport {\n\tawaitReply,\n\tconvertFetchEventToPHPRequest,\n\tcloneRequest,\n\tbroadcastMessageExpectReply,\n} from '@php-wasm/web-service-worker';\nimport { wordPressRewriteRules } from '@wp-playground/wordpress';\nimport { reportServiceWorkerMetrics } from '@php-wasm/logger';\n\nimport {\n\tcacheFirstFetch,\n\tnetworkFirstFetch,\n\tcacheOfflineModeAssetsForCurrentRelease,\n\tisCurrentServiceWorkerActive,\n\tpurgeEverythingFromPreviousRelease,\n\tshouldCacheUrl,\n} from './src/lib/offline-mode-cache';\n\nif (!(self as any).document) {\n\t// Workaround: vite translates import.meta.url\n\t// to document.currentScript which fails inside of\n\t// a service worker because document is undefined\n\t// @ts-ignore\n\t// eslint-disable-next-line no-global-assign\n\tself.document = {};\n}\n\n/**\n * Forces the browser to always use the latest service worker.\n *\n * Each service worker build contains a hardcoded `buildVersion` used to derive a cache key\n * for offline-mode-cache. As long as the previous service worker is used, it will\n * keep serving a stale version of Playground assets, e.g. `/index.html`, `php.wasm`, etc.\n *\n * This is problematic for two reasons:\n *\n * 1. Users won't receive critical bugfixes for up to 24 hours after they're released [1].\n * 2. Users will experience fatal crashes. Assets such as the WebAssembly PHP builds are\n *    loaded asynchronously using fetch() and import() functions. The specific URLs are\n *    hardcoded by the bundler at build time, e.g. the worker-thread.js file contains\n *    a call similar to `import(\"./assets/php_8_3-2286e20c.js\")`. If the browser uses\n *    a stale version of the worker thread, it will try to import a JavaScript file\n *    that no longer exists.\n *\n * See also: https://github.com/WordPress/wordpress-playground/issues/105\n *\n * [1] https://web.dev/articles/service-worker-lifecycle#updates\n */\nself.addEventListener('install', (event) => {\n\tevent.waitUntil(self.skipWaiting());\n});\n\n/**\n * Ensures:\n *\n * * The very first Playground load is controlled by this service worker.\n * * Other browser tabs are upgraded to the latest service worker.\n *\n * ## Initial load\n *\n * This is necessary because service workers don't control any pages loaded\n * before they are activated. This includes the page that actually registers\n * the service worker. You need to reload it before\n * `navigator.serviceWorker.controller` is set and the fetch() requests are\n * intercepted here.\n *\n * However, the initial Playground load already downloads a few large assets,\n * like a 12MB wordpress-static.zip file. We need to cache them these requests.\n * Otherwise they'll be fetched again on the next page load.\n *\n * client.claim() only affects pages loaded before the initial servie worker\n * registration. It shouldn't have unwanted side effects in our case. All these\n * pages would get controlled eventually anyway.\n *\n * See:\n * * The service worker lifecycle https://web.dev/articles/service-worker-lifecycle\n * * Clients.claim() docs https://developer.mozilla.org/en-US/docs/Web/API/Clients/claim\n */\nself.addEventListener('activate', function (event) {\n\tasync function doActivate() {\n\t\tawait self.clients.claim();\n\n\t\tif (shouldCacheUrl(new URL(location.href))) {\n\t\t\tawait purgeEverythingFromPreviousRelease();\n\t\t\tcacheOfflineModeAssetsForCurrentRelease();\n\t\t}\n\t}\n\tevent.waitUntil(doActivate());\n});\n\nself.addEventListener('fetch', (event) => {\n\tif (!isCurrentServiceWorkerActive()) {\n\t\treturn;\n\t}\n\n\tconst url = new URL(event.request.url);\n\n\t// Don't handle requests to the service worker script itself.\n\tif (url.pathname.startsWith(self.location.pathname)) {\n\t\treturn;\n\t}\n\n\tconst isReservedUrl =\n\t\turl.pathname.startsWith('/plugin-proxy') ||\n\t\turl.pathname.startsWith('/client/index.js');\n\tif (isReservedUrl) {\n\t\treturn;\n\t}\n\n\tif (isURLScoped(url)) {\n\t\treturn event.respondWith(handleScopedRequest(event, getURLScope(url)!));\n\t}\n\n\tlet referrerUrl;\n\ttry {\n\t\treferrerUrl = new URL(event.request.referrer);\n\t} catch (e) {\n\t\t// ignore\n\t}\n\n\tif (referrerUrl && isURLScoped(referrerUrl)) {\n\t\treturn event.respondWith(\n\t\t\thandleScopedRequest(event, getURLScope(referrerUrl)!)\n\t\t);\n\t}\n\n\t/**\n\t * A proxy that enables offline caching of cross-origin requests.\n\t *\n\t * For example, the following request fetching the list of all the Blueprints\n\t * from the Blueprints directory:\n\t *\n\t * https://playground.wordpress.net/proxy/network-first-fetch/https://raw.githubusercontent.com/WordPress/blueprints/trunk/index.json\n\t *\n\t * would be proxied to:\n\t *\n\t * https://raw.githubusercontent.com/WordPress/blueprints/trunk/index.json\n\t *\n\t * And the response would be cached for when Playground is running in the\n\t * offline mode.\n\t */\n\tif (url.pathname.startsWith('/proxy/')) {\n\t\tconst segments = url.pathname.split('/');\n\t\tconst command = segments[2];\n\t\tswitch (command) {\n\t\t\tcase 'network-first-fetch': {\n\t\t\t\tconst proxiedUrl =\n\t\t\t\t\turl.pathname.substring(\n\t\t\t\t\t\t'/proxy/'.length + command.length + 1\n\t\t\t\t\t) +\n\t\t\t\t\t(url?.search ? '?' + url.search : '') +\n\t\t\t\t\t(url?.hash ? '#' + url.hash : '');\n\t\t\t\tconst requestWithTargetUrl = cloneRequest(event.request, {\n\t\t\t\t\turl: proxiedUrl,\n\t\t\t\t});\n\t\t\t\treturn event.respondWith(\n\t\t\t\t\trequestWithTargetUrl.then(networkFirstFetch)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!shouldCacheUrl(new URL(event.request.url))) {\n\t\t/**\n\t\t * It's safe to use the regular `fetch` function here.\n\t\t *\n\t\t * This request won't be cached in the offline mode cache\n\t\t * and there's no risk of the two caches interfering with\n\t\t * each other.\n\t\t *\n\t\t * See service-worker.ts for more details.\n\t\t */\n\t\treturn;\n\t}\n\n\t/**\n\t * Always fetch the fresh version of `/remote.html` and `/` from the network.\n\t *\n\t * This is the secret sauce that enables seamless upgrades of the\n\t * running Playground clients when a new version is deployed on\n\t * the server.\n\t *\n\t * ## The problem with deployments\n\t *\n\t * App deployments remove all the static assets associated with the\n\t * previous app version. Meanwhile, the remote.html file we've cached\n\t * for offline usage still holds references to those assets.\n\t *\n\t * If we just loaded the cached remote.html file, the site would crash\n\t * with seemingly random errors.\n\t *\n\t * Instead, we fetch the most recent version of remote.html from the network.\n\t * It references the static assets that are now available on the server and\n\t * should work just fine.\n\t *\n\t * Relatedly, loading the `/` path using the network first strategy ensures\n\t * that the user sees the latest version of the webapp even if they aleady\n\t * have the previous version cached in CacheStorage.\n\t *\n\t * This very simple resolution took multiple iterations to get right. See\n\t * https://github.com/WordPress/wordpress-playground/issues/1821 for more\n\t * details.\n\t */\n\tif (url.pathname === '/remote.html' || url.pathname === '/') {\n\t\tevent.respondWith(networkFirstFetch(event.request));\n\t\treturn;\n\t}\n\n\t// Use cache first strategy to serve regular static assets.\n\treturn event.respondWith(cacheFirstFetch(event.request));\n});\n\n/**\n * A request to a PHP Worker Thread or to a regular static asset,\n * but initiated by a scoped referer (e.g. fetch() from a block editor iframe).\n */\nasync function handleScopedRequest(event: FetchEvent, scope: string) {\n\tconst fullUrl = new URL(event.request.url);\n\tconst unscopedUrl = removeURLScope(fullUrl);\n\tif (fullUrl.pathname.endsWith('/wp-includes/empty.html')) {\n\t\treturn emptyHtml();\n\t}\n\n\tconst workerResponse = await convertFetchEventToPHPRequest(event);\n\n\tif (\n\t\tworkerResponse.status === 404 &&\n\t\tworkerResponse.headers.get('x-backfill-from') === 'remote-host'\n\t) {\n\t\tconst { staticAssetsDirectory } = await getScopedWpDetails(scope!);\n\t\tif (!staticAssetsDirectory) {\n\t\t\tconst plain404Response = workerResponse.clone();\n\t\t\tplain404Response.headers.delete('x-backfill-from');\n\t\t\treturn plain404Response;\n\t\t}\n\n\t\t// If we get a 404 for a static file, try to fetch it from\n\t\t// the from the static assets directory at the remote server.\n\t\tconst requestedUrl = new URL(event.request.url);\n\t\tconst resolvedUrl = removeURLScope(requestedUrl);\n\t\tresolvedUrl.pathname = applyRewriteRules(\n\t\t\tresolvedUrl.pathname,\n\t\t\twordPressRewriteRules\n\t\t);\n\t\tif (\n\t\t\t// Vite dev server requests\n\t\t\t!resolvedUrl.pathname.startsWith('/@fs') &&\n\t\t\t!resolvedUrl.pathname.startsWith('/assets')\n\t\t) {\n\t\t\tresolvedUrl.pathname = `/${staticAssetsDirectory}${resolvedUrl.pathname}`;\n\t\t}\n\t\tconst request = await cloneRequest(event.request, {\n\t\t\turl: resolvedUrl,\n\t\t\t// Omit credentials to avoid causing cache aborts due to presence of\n\t\t\t// cookies\n\t\t\tcredentials: 'omit',\n\t\t});\n\n\t\t/**\n\t\t * Intentionally use fetch() over fetchFresh().\n\t\t *\n\t\t * At this point we know this request very likely came from WordPress\n\t\t * and is looking for a WordPress-related static asset. WordPress\n\t\t * has its own caching strategies in place. We're going to pass this\n\t\t * request to the remote server as it is and let WordPress manage its\n\t\t * own HTTP caching.\n\t\t */\n\t\treturn fetch(request).catch((e) => {\n\t\t\tif (e?.name === 'TypeError') {\n\t\t\t\t// This could be an ERR_HTTP2_PROTOCOL_ERROR that sometimes\n\t\t\t\t// happen on playground.wordpress.net. Let's add a randomized\n\t\t\t\t// delay and retry once\n\t\t\t\treturn new Promise((resolve) => {\n\t\t\t\t\tsetTimeout(\n\t\t\t\t\t\t() => resolve(fetch(request)),\n\t\t\t\t\t\tMath.random() * 1500\n\t\t\t\t\t);\n\t\t\t\t}) as Promise<Response>;\n\t\t\t}\n\n\t\t\t// Otherwise let's just re-throw the error\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\t// Path the block-editor.js file to ensure the site editor's iframe\n\t// inherits the service worker.\n\t// @see controlledIframe below for more details.\n\tif (\n\t\t// WordPress Core version of block-editor.js\n\t\tunscopedUrl.pathname.endsWith('/wp-includes/js/dist/block-editor.js') ||\n\t\tunscopedUrl.pathname.endsWith(\n\t\t\t'/wp-includes/js/dist/block-editor.min.js'\n\t\t) ||\n\t\t// Gutenberg version of block-editor.js\n\t\tunscopedUrl.pathname.endsWith('/build/block-editor/index.js') ||\n\t\tunscopedUrl.pathname.endsWith('/build/block-editor/index.min.js')\n\t) {\n\t\tconst script = await workerResponse.text();\n\t\tconst newScript = `${controlledIframe} ${script.replace(\n\t\t\t/\\(\\s*\"iframe\",/,\n\t\t\t'(__playground_ControlledIframe,'\n\t\t)}`;\n\t\treturn new Response(newScript, {\n\t\t\tstatus: workerResponse.status,\n\t\t\tstatusText: workerResponse.statusText,\n\t\t\theaders: workerResponse.headers,\n\t\t});\n\t}\n\n\treturn workerResponse;\n}\n\nreportServiceWorkerMetrics(self);\n\n/**\n * Pair the site editor's nested iframe to the Service Worker.\n *\n * Without the patch below, the site editor initiates network requests that\n * aren't routed through the service worker. That's a known browser issue:\n *\n * * https://bugs.chromium.org/p/chromium/issues/detail?id=880768\n * * https://bugzilla.mozilla.org/show_bug.cgi?id=1293277\n * * https://github.com/w3c/ServiceWorker/issues/765\n *\n * The problem with iframes using srcDoc and src=\"about:blank\" as they\n * fail to inherit the root site's service worker.\n *\n * Gutenberg loads the site editor using <iframe srcDoc=\"<!doctype html\">\n * to force the standards mode and not the quirks mode:\n *\n * https://github.com/WordPress/gutenberg/pull/38855\n *\n * This commit patches the site editor to achieve the same result via\n * <iframe src=\"/doctype.html\"> and a doctype.html file containing just\n * `<!doctype html>`. This allows the iframe to inherit the service worker\n * and correctly load all the css, js, fonts, images, and other assets.\n *\n * Ideally this issue would be fixed directly in Gutenberg and the patch\n * below would be removed.\n *\n * See https://github.com/WordPress/wordpress-playground/issues/42 for more details\n *\n * ## Why does this code live in the service worker?\n *\n * There's many ways to install the Gutenberg plugin:\n *\n * * Install plugin step\n * * Import a site\n * * Install Gutenberg from the plugin directory\n * * Upload a Gutenberg zip\n *\n * It's too difficult to patch Gutenberg in all these cases, so we\n * blanket-patch all the scripts requested over the network whose names seem to\n * indicate they're related to the Gutenberg plugin.\n */\nconst controlledIframe = `\nwindow.__playground_ControlledIframe = window.wp.element.forwardRef(function (props, ref) {\n\tconst source = window.wp.element.useMemo(function () {\n\t\t/**\n\t\t * A synchronous function to read a blob URL as text.\n\t\t *\n\t\t * @param {string} url\n\t\t * @returns {string}\n\t\t */\n\t\tconst __playground_readBlobAsText = function (url) {\n\t\t\ttry {\n\t\t\tlet xhr = new XMLHttpRequest();\n\t\t\txhr.open('GET', url, false);\n\t\t\txhr.overrideMimeType('text/plain;charset=utf-8');\n\t\t\txhr.send();\n\t\t\treturn xhr.responseText;\n\t\t\t} catch(e) {\n\t\t\treturn '';\n\t\t\t} finally {\n\t\t\tURL.revokeObjectURL(url);\n\t\t\t}\n\t\t};\n\t\tif (props.srcDoc) {\n\t\t\t// WordPress <= 6.2 uses a srcDoc that only contains a doctype.\n\t\t\treturn '/wp-includes/empty.html';\n\t\t} else if (props.src && props.src.startsWith('blob:')) {\n\t\t\t// WordPress 6.3 uses a blob URL with doctype and a list of static assets.\n\t\t\t// Let's pass the document content to empty.html and render it there.\n\t\t\treturn '/wp-includes/empty.html#' + encodeURIComponent(__playground_readBlobAsText(props.src));\n\t\t} else {\n\t\t\t// WordPress >= 6.4 uses a plain HTTPS URL that needs no correction.\n\t\t\treturn props.src;\n\t\t}\n\t}, [props.src]);\n\treturn (\n\t\twindow.wp.element.createElement('iframe', {\n\t\t\t...props,\n\t\t\tref: ref,\n\t\t\tsrc: source,\n\t\t\t// Make sure there's no srcDoc, as it would interfere with the src.\n\t\t\tsrcDoc: undefined\n\t\t})\n\t)\n});`;\n\n/**\n * The empty HTML file loaded by the patched editor iframe.\n */\nfunction emptyHtml() {\n\treturn new Response(\n\t\t'<!doctype html><script>const hash = window.location.hash.substring(1); if ( hash ) document.write(decodeURIComponent(hash))</script>',\n\t\t{\n\t\t\tstatus: 200,\n\t\t\theaders: {\n\t\t\t\t'content-type': 'text/html',\n\t\t\t},\n\t\t}\n\t);\n}\n\ntype WPModuleDetails = {\n\tstaticAssetsDirectory?: string;\n};\n\nconst scopeToWpModule: Record<string, WPModuleDetails> = {};\nasync function getScopedWpDetails(scope: string): Promise<WPModuleDetails> {\n\tif (!scopeToWpModule[scope]) {\n\t\tconst requestId = await broadcastMessageExpectReply(\n\t\t\t{\n\t\t\t\tmethod: 'getWordPressModuleDetails',\n\t\t\t},\n\t\t\tscope\n\t\t);\n\t\tscopeToWpModule[scope] = await awaitReply(self, requestId);\n\t}\n\treturn scopeToWpModule[scope];\n}\n"],"names":["isURLScoped","url","getURLScope","setURLScope","scope","newUrl","parts","removeURLScope","suffix","currentJsRuntime","asPromise","obj","resolve","reject","event","isByobSupported","inputBytes","stream","File","sources","fileName","options","date","reader","position","blob","controller","view","buffer","uint8array","bytesRead","CustomEvent","name","FileErrorCodes","getEmscriptenFsError","errno","rethrowFileSystemError","messagePrefix","target","methodName","descriptor","method","args","e","errmsg","path","formattedPrefix","logEventType","logEvent","log","logger","logToConsole","prepareLogMessage","logMessage","logs","addToLogArray","message","logToMemory","formatLogEntry","Logger","handlers","handler","getDefaultHandlers","severity","prefix","formattedDate","formattedTime","now","reportServiceWorkerMetrics","worker","clients","metrics","c","client","joinPaths","paths","hasTrailingSlash","p","isAbsolute","trailingSlash","normalizePath","dirname","lastSlash","normalizePathsArray","allowAboveRoot","up","i","last","_FSHelpers","FS","data","fromPath","toPath","fromMount","toMount","file","filePath","files","prepend","link","fromNode","filenames","filename","__decorateClass","done","value","applyRewriteRules","rules","rule","DEFAULT_RESPONSE_TIMEOUT","lastRequestId","getNextRequestId","awaitReply","messageTarget","requestId","timeout","responseHandler","failOntimeout","convertFetchEventToPHPRequest","referrerUrl","contentType","body","requestHeaders","pair","phpResponse","broadcastMessageExpectReply","cloneRequest","request","overrides","wordPressRewriteRules","CACHE_NAME_PREFIX","LATEST_CACHE_NAME","buildVersion","promisedOfflineModeCache","cacheFirstFetch","offlineModeCache","cachedResponse","response","fetchFresh","isCurrentServiceWorkerActive","networkFirstFetch","cacheOfflineModeAssetsForCurrentRelease","websiteRequests","purgeEverythingFromPreviousRelease","oldKeys","key","shouldCacheUrl","resource","init","doActivate","handleScopedRequest","command","proxiedUrl","requestWithTargetUrl","fullUrl","unscopedUrl","emptyHtml","workerResponse","staticAssetsDirectory","getScopedWpDetails","plain404Response","requestedUrl","resolvedUrl","script","newScript","controlledIframe","scopeToWpModule"],"mappings":"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"}